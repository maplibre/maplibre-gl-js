@startuml
participant map
participant source_cache
participant source
participant ajax
participant "glyph/image\nmanager"
box worker
participant worker
participant worker_source
participant worker_tile
participant bucket
participant worker_ajax
end box

map->source_cache: update(transform)
source_cache->source_cache: compute covering\ntiles
source_cache->source: loadTile() for\neach missing tile
alt raster_tile_source
source->ajax: getImage
else image_source
source->ajax: getImage (once)
else raster_dem_tile_source
source->ajax: getImage()
source->worker: loadDEMTile()
worker->worker: add 1px buffer
worker-->source: DEMData
else vector_tile_source/geojson_source
source->worker: loadTile()
worker->worker_source: loadVectorTile()
alt vector_tile_source
worker_source->worker_ajax: getArrayBuffer()
worker_source->worker_source: decode pbf
worker_source->worker_source: parse vector tile
else geojson_source
worker_source->worker_ajax: getJSON()
worker_source->worker_source: geojson-vt parse
worker_source->worker_source: getTile()
end
worker_source->worker_tile: parse()
loop for each "layer family"
worker_tile->worker_tile: calculate layout\nproperties
worker_tile->worker_tile: createBucket
worker_tile->bucket: populate()
bucket->bucket: compute triangles\nneeded by GPU\nfor each feature we\nhave data for
worker_tile->"glyph/image\nmanager": getGlyphs
"glyph/image\nmanager"->ajax: Fetch font\nPBFs
"glyph/image\nmanager"->"glyph/image\nmanager": TinySDF
worker_tile->"glyph/image\nmanager": getImages
"glyph/image\nmanager"->ajax: Fetch icon\nimages
"glyph/image\nmanager"-->worker_tile: glyph/Image dependencies
worker_tile->worker_tile: maybePrepare()
worker_tile->worker_tile: create GlyphAtlas
worker_tile->worker_tile: create ImageAtlas
worker_tile->bucket: addFeatures
worker_tile->bucket: performSymbolLayout
bucket->bucket: place characters
bucket->bucket: compute collision\nboxes
bucket->bucket: compute triangles\nneeded by GPU
end
worker_tile-->source: callback(bucket, featureIndex, collision boxes, GlyphAtlas, ImageAtlas)
source->source: loadVectorData()\ndecode\nresponse
end
source-->source_cache: Tile
source_cache-->source_cache: _backfillDEM()\ncopy 1px buffer\nfrom neigboring tiles
source->source: fire('data', {\n  dataType: 'source'\n})
source->source_cache:
source_cache->map:
map->map: fire('sourcedata')
map->map: render new frame
@enduml
