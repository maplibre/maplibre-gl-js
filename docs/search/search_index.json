{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>MapLibre GL JS is a TypeScript library that uses WebGL to render interactive maps from vector tiles in a browser. The customization of the map comply with the MapLibre Style Spec. It is part of the MapLibre ecosystem, with a counterpart for Android, iOS and other platforms called MapLibre Native.</p>"},{"location":"#quickstart","title":"Quickstart","text":"<pre><code>&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    var map = new maplibregl.Map({\n        container: 'map', // container id\n        style: 'https://demotiles.maplibre.org/globe.json', // style URL\n        center: [0, 0], // starting position [lng, lat]\n        zoom: 2 // starting zoom\n    });\n&lt;/script&gt;\n</code></pre>"},{"location":"#reading-this-documentation","title":"Reading this documentation","text":"<p>This documentation is divided into several sections:</p> <ul> <li>Main - The Main section holds the following classes<ul> <li><code>Map</code> object is the map on your page. It lets you access methods and properties for interacting with the map's style and layers, respond to events, and manipulate the user's perspective with the camera.</li> <li><code>Global Functions</code> let you set global properties and options that you might want to access while initializing your map or accessing information about its status.</li> </ul> </li> <li>Markers and Controls - This section describes the user interface elements that you can add to your map. The items in this section exist outside of the map's <code>canvas</code> element. This consists of <code>Marker</code>, <code>Popup</code> and all the controls.</li> <li>Geography and geometry - This section includes general utilities and types that relate to working with and manipulating geographic information or geometries.</li> <li>User interaction handlers - The items in this section relate to the ways in which the map responds to user input.</li> <li>Sources - This section describes the source types MapLibre GL JS can handle besides the ones described in the MapLibre Style Specification.</li> <li>Event Related - This section describes the different types of events that MapLibre GL JS can raise.</li> </ul> <p>Each section describes classes or objects as well as their properties, parameters, instance members, and associated events. Many sections also include inline code examples and related resources.</p> <p>In the examples, we use vector tiles from our Demo tiles repository and from MapTiler. Get your own API key if you want to use MapTiler data in your project.</p>"},{"location":"#npm","title":"npm","text":"<p>Install the MapLibre GL JS package via npm.</p> <pre><code>npm install maplibre-gl\n</code></pre> <p>You can then import the MapLibre GL JS module in your project.</p> <pre><code>&lt;div id=\"map\"&gt;&lt;/div&gt;\n</code></pre> <pre><code>import maplibregl from 'maplibre-gl';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n\nconst map = new maplibregl.Map({\n    container: 'map', // container id\n    style: 'https://demotiles.maplibre.org/globe.json', // style URL\n    center: [0, 0], // starting position [lng, lat]\n    zoom: 1 // starting zoom\n});\n</code></pre>"},{"location":"#csp-directives","title":"CSP Directives","text":"<p>As a mitigation for Cross-Site Scripting and other types of web security vulnerabilities, you may use a Content Security Policy (CSP) to specify security policies for your website. If you do, MapLibre GL JS requires the following CSP directives:</p> <pre><code>worker-src blob: ;\nchild-src blob: ;\nimg-src data: blob: ;\n</code></pre> <p>For strict CSP environments without <code>worker-src blob: ; child-src blob:</code> enabled, there's a separate MapLibre GL JS bundle (<code>maplibre-gl-csp.js</code> and <code>maplibre-gl-csp-worker.js</code>) which requires setting the path to the worker manually:</p> <pre><code>&lt;script&gt;\nmaplibregl.setWorkerUrl(\"${urls.js().replace('.js', '-csp-worker.js')}\");\n...\n&lt;/script&gt;\n</code></pre>"},{"location":"#maplibre-css","title":"MapLibre CSS","text":"<p>The CSS referenced in the Quickstart is used to style DOM elements created by MapLibre code. Without the CSS, elements like Popups and Markers won't work.</p> <p>Including it with a <code>&lt;link&gt;</code> in the head of the document via the UNPKG CDN is the simplest and easiest way to provide the CSS, but it is also bundled in the MapLibre module, meaning that if you have a bundler that can handle CSS, you can import the CSS from <code>maplibre-gl/dist/maplibre-gl.css</code>.</p> <p>Note too that if the CSS isn't available by the first render, as soon as the CSS is provided, the DOM elements that depend on this CSS should recover.</p>"},{"location":"#cdn","title":"CDN","text":"<p>MapLibre GL JS is also distributed via UNPKG. Our latest version can installed by adding below tags this in the html <code>&lt;head&gt;</code>. Further instructions on how to select specific versions and semver ranges can be found on at unpkg.com.</p> <pre><code>&lt;script src=\"https://unpkg.com/maplibre-gl@^5.10.0/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n&lt;link href=\"https://unpkg.com/maplibre-gl@^5.10.0/dist/maplibre-gl.css\" rel=\"stylesheet\" /&gt;\n</code></pre>"},{"location":"plugins/","title":"Plugins","text":""},{"location":"plugins/#user-interface-plugins","title":"User Interface Plugins","text":"<ul> <li>\ud83d\udc99 maplibre-gl-compare - Enables users to compare two maps by swiping left and right.</li> <li>any-routing - A modular plugin for calculating routes.</li> <li>Gauge Legend - Dynamic gauge legend for MapLibre GL JS</li> <li>mapbox-gl-controls - Adds controls for a ruler, style inspector, localization, and style switcher.</li> <li>mapbox-gl-draw - Adds support for drawing and editing features on maps.</li> <li>mapbox-gl-elevation - Adds a control to retrieve altitude from terrain RGB tilesets.</li> <li>mapbox-gl-infobox - Adds a control to display an infobox or a gradient.</li> <li>mapbox-gl-legend - Adds a control that shows a legend generated from the map style.</li> <li>mapbox-gl-valhalla - Adds a control to provide isochrone features from valhalla server.</li> <li>mapboxgl-minimap - Adds a control to show a miniature overview of the current map.</li> <li>maplibre-compass-pro - old fashioned compass (with compass rose) for Maplibre GL. demo</li> <li>map-gl-style-switcher - A customizable style switcher control for MapLibre GL JS, also has a <code>react-map-gl</code> wrapper.</li> <li>maplibre-geoman - Plugin for drawing and editing geometry layers. demo</li> <li>maplibre-preload - A tiny zero-configuration plugin for preloading tiles and smoothen the experience when using targeted movements in MapLibre GL JS.</li> <li>maplibre-gl-basemaps - A plugin for switching between raster basemaps.</li> <li>maplibre-gl-export - Adds a control that exports the map as a PDF or images such as PNG, JPEG and SVG.</li> <li>maplibre-gl-map-to-image - Creates static image data from a map and sets it as the src of a target html image element. Similar to maplibre-gl-export but intended for use cases where you are embedding the image in a document rather than printing full page.</li> <li>maplibre-gl-measures - A plugin for taking measures on the map.</li> <li>maplibre-gl-opacity - A plugin to switch layer like Leaflet.control.layers, and update opacities. demo</li> <li>maplibre-gl-temporal-control - A plugin to easily animate temporal data. demo</li> <li>route-snapper - Draw routes and areas snapped to roads.</li> <li>Terra Draw - The library has a MapLibre GL JS adapter to provide drawing and geometry editing functionality to the map</li> <li>maplibregl-minimap - Customizable minimap Control for maplibregl.</li> <li>maplibre-gl-style-flipper - A custom control to switch between different map styles in MapLibre GL JS.</li> <li>maplibre-google-streetview - Plugin that integrates Google Street View into any MapLibre map.</li> <li>maplibre-transition - A plugin for smooth transitions between map styles. demo</li> <li>maplibre-gl-layers-control - It allows to show/hide layers, opacity control and integration with legends.</li> <li>maplibre-ui-translations - Community translations for the default MapLibre UI.</li> </ul>"},{"location":"plugins/#geocoding-search-plugins","title":"Geocoding &amp; Search Plugins","text":"<ul> <li>mapbox.photon - Adds a control to provide a geocoding feature from Photon API.</li> <li>\ud83d\udc99 maplibre-gl-geocoder - Adds a geocoder control.</li> <li>maplibre-search-box - Adds a control for searching for places using Stadia Maps.</li> <li>maptiler-geocoding-control - Adds a geocoding control for searching for places using MapTiler API. docs</li> </ul>"},{"location":"plugins/#map-rendering-plugins","title":"Map Rendering Plugins","text":"<ul> <li>\ud83d\udc99 MapLibre GL Leaflet - A plugin for rendering MapLibre styles in Leaflet.</li> <li>deck.gl - Adds advanced WebGL visualization layers.</li> <li>flowmap.blue - Render a geographic flow map visualization from a spreadsheet published on Google Sheets.</li> <li>H3J / H3T - Light H3 data formats for client side geometry generation and rendering using MapLibre GL JS</li> <li>L7-maplibre-gl - Adds large-scale WebGL-powered geospatial data visualization framework to maplibre-gl.demo</li> <li>mapbox-gl-language - Automatically localizes the map into the user\u2019s language.</li> <li>mapbox-gl-rtl-text - Adds right-to-left text support.</li> <li>maplibre-gl-complex-text - Adds support for some complex scripts including Khmer and Devanagari.</li> <li>mapbox-gl-traffic - Hide and show traffic layers on your map with an optional toggle button.</li> <li>maplibre-adiff-viewer \u2013 Visualizes OpenStreetMap augmented diffs.</li> <li>maplibre-contour - Renders contour lines from raster DEM tiles in MapLibre GL JS.</li> <li>maplibre-gl-dates \u2013 Filters a time-enabled map by date. Optimized for OpenHistoricalMap vector tiles.</li> <li>maplibre-gl-vector-text-protocol - Supports <code>CSV</code>, <code>TSV</code>, <code>Topojson</code>, <code>KML</code>, <code>GPX</code>, and <code>TCX</code> formats using the addProtocol feature.</li> <li>geogrid-maplibre-gl - Renders customizable graticule (geographic grid).</li> <li>maplibre-gleo - Adds symbols using the \"gleo\" WebGL map rendering library.</li> <li>maplibre-contourmap - Renders contour lines from vector sources in MapLibre GL JS. demo</li> <li>maplibre-three-plugin - A bridge plugin that cleverly connects MapLibre GL JS with Three.js, enabling developers to implement 3D rendering and animation on maps.</li> <li>maplibre-gl-teritorio-cluster - Clustering plugin implementing a MapLibre GL Layer with configurable HTML clustering renderer and support of events.</li> </ul>"},{"location":"plugins/#layer-types-plugins","title":"Layer Types Plugins","text":"<ul> <li>Allmaps Maplibre - A package for displaying georeferenced IIIF images by loading Georeference Annotations and using WebGL to transform and overlay the images on their correct geographical position.</li> <li>mapbox-gl-arcgis-featureserver - A library for retrieving features from an ArcGIS FeatureServer or MapServer. This library makes tiled requests rather than simply requesting every feature.</li> <li>mapbox-gl-esri-sources - A library for making it easier to use Esri services in MapLibre GL JS. Supports Esri Map Services (dynamic &amp; tiled), Esri Vector Tile Services &amp; Esri Vector Basemap Styles.</li> <li>mapbox-gl-flatgeobuf - A library for retrieving features from FlatGeobuf file using a tiled approach. Compatible with MapLibre GL JS and Mapbox GL JS.</li> <li>mapbox-gl-ogc-feature-collection - A small package for requesting geojson from an OGC Feature API endpoint to serve tiles in MapBox/MapLibre.</li> <li>maplibre-cog-protocol - Custom protocol to load Cloud Optimized GeoTIFFs (COG) in Maplibre GL JS.</li> <li>maplibre-google-maps - A library for integrating Google Maps as raster layers into MapLibre GL JS. It uses the new Google Map Tiles API.</li> <li>ol-maplibre-layer - Render a MapLibre GL JS map as an OpenLayers layer.</li> <li>PMTiles for MapLibre - A library that uses addProtocol to read PMTIles. a single-file format for hosting tilesets without a server or API, just S3 or other storage providers.</li> <li>@naivemap/maplibre-gl-image-layer - A versatile layer for displaying georeferenced images with various projections (using proj4js) on the map.</li> </ul>"},{"location":"plugins/#utility-libraries","title":"Utility Libraries","text":"<ul> <li>expression-jamsession - Converts Mapbox Studio formulas into expressions.</li> <li>mapbox-choropleth - Create a choropleth layer from a CSV source and a geometry source.</li> <li>mapbox-gl-layer-groups - Manages layer groups.</li> <li>mapbox-gl-sync-move - Syncs movement between multiple maps.</li> <li>mapbox-gl-utils - Manage layers, sources, and properties with syntactic sugar and convenience functions.</li> <li>maplibregl-mapbox-request-transformer - This library provides a request transforming function enabling the consumption of MapboxGL Styles in MapLibreGL.</li> <li>maplibregl-theme - Custom themes for your MapLibre GL Web app. Theme customizer</li> <li>simplespec-to-gl-style - Converts GeoJSON styles with simplestyle-spec to a MapLibre GL Style.</li> <li>turf - provides advanced geospatial analysis tools.</li> <li>Maperture - A web application for comparing webmap styles.</li> <li>geojson-map-fit-mercator - Finds the optimal bearing, zoom and center point for fitting a set of GeoJSON features in a Mapbox GL or MapLibre GL viewport. demo</li> <li>maplibre-legend - Legends generator from a style.json developed in Rust. crate</li> </ul>"},{"location":"plugins/#development-tools-plugins","title":"Development Tools Plugins","text":"<ul> <li>mapbox-gl-framerate - A frame rate control to evaluate map rendering performance.</li> <li>mapbox-gl-fps - A frames-per-seconds GUI control and measurer with statistic report output.</li> <li>mapgrab - A tool for creating end-to-end (e2e) map tests using popular testing frameworks like Playwright, Cypress, and Selenium.</li> <li>maplibre-gl-inspect - Adds an inspect control to view vector source features and properties.</li> </ul>"},{"location":"plugins/#framework-integrations","title":"Framework Integrations","text":""},{"location":"plugins/#angular","title":"Angular","text":"<ul> <li>\ud83d\udc99 ngx-maplibre-gl - Angular binding with hosted demos at maplibre.org/ngx-maplibre-gl/demo</li> </ul>"},{"location":"plugins/#astro","title":"Astro","text":"<ul> <li>maps-withastro - Bring Leaflet &amp; MapLibre maps directly into Astro.</li> </ul>"},{"location":"plugins/#echarts","title":"Echarts","text":"<ul> <li>echartslayer - Provides an echarts integration.</li> <li>@naivemap/maplibre-gl-echarts-layer - Integrate Apache ECharts' Lines and Scatter charts.</li> </ul>"},{"location":"plugins/#elm","title":"Elm","text":"<ul> <li>elm-mapbox - Provides an Elm integration.</li> </ul>"},{"location":"plugins/#ember","title":"Ember","text":"<ul> <li>ember-mapbox-gl - Provides an Ember integration.</li> </ul>"},{"location":"plugins/#jekyll","title":"Jekyll","text":"<ul> <li>jekyll-maplibre - Provides a Jekyll integration (plug-in).</li> </ul>"},{"location":"plugins/#react","title":"React","text":"<ul> <li>react-map-gl - A suite of React components for mapbox-gl, maplibre-gl or compatible libraries</li> <li>react-map-components-maplibre - A React component framework for declarative GIS application development with demos in their showcase and docs</li> <li>maplibre-react-components - Lightweight MapLibre only binding for React.</li> <li>react-mapbox-gl - Provides a React integration.</li> </ul>"},{"location":"plugins/#svelte","title":"Svelte","text":"<ul> <li>sveltekit-maplibre-boilerplate - A preconfigured template repository develop a MapLibre application in svelte/sveltekit.</li> <li>svelte-maplibre - Provides a Svelte integration.</li> <li>svelte-maplibre-components - A set of maplibre plugins to integrate with svelte/sveltekit. The repository consists of various useful plugins such as export plugin, legend plugin, measure plugin, attribute table plugin, tour plugin, etc.</li> <li>svelte-maplibre-gl - Svelte (v5) component wrapping MapLibre GL JS to provide declarative handling of GL JS through familiar API.</li> </ul>"},{"location":"plugins/#vuejs","title":"VueJS","text":"<ul> <li>@indoorequal/vue-maplibre-gl - Vue 3 plugin for maplibre-gl-js</li> <li>LibreGL - A powerful Vue library for Maplibre with an intuitive API, and a collection of highly customizable components.</li> </ul>"},{"location":"plugins/#webtoolkit","title":"Webtoolkit","text":"<ul> <li>wtMapbox - Provides a Webtoolkit integration.</li> </ul>"},{"location":"plugins/#vanilla-js","title":"Vanilla JS","text":"<ul> <li>plotly.js - Create analytical geospatial figures with MapLibre GL JS in javascript.</li> </ul>"},{"location":"style-spec/","title":"Style Specifications","text":"<p>The style spec is the definition language for the visualization of the map. It can be fine tuned to show the most amazing maps! In order to learn it better the following documentation site was created for it:</p> <p>Style Specifications</p> <p>Enjoy!</p>"},{"location":"API/","title":"Intro","text":"<p>This file is intended as a reference for the important and public classes of this API. We recommend looking at the examples as they will help you the most to start with MapLibre.</p> <p>Most of the classes written here have an \"Options\" object for initialization, it is recommended to check which options exist.</p> <p>It is recommended to import what you need and then use it. Some examples for classes assume you did that. For example, import the <code>Map</code> class like this: <pre><code>import {Map} from 'maplibre-gl';\nconst map = new Map(...)\n</code></pre></p> <p>Import declarations are omitted from the examples for brevity.</p>"},{"location":"API/#main","title":"Main","text":"<ul> <li>Map</li> </ul>"},{"location":"API/#markers-and-controls","title":"Markers and Controls","text":"<ul> <li>AttributionControl</li> <li>FullscreenControl</li> <li>GeolocateControl</li> <li>GlobeControl</li> <li>Hash</li> <li>LogoControl</li> <li>Marker</li> <li>NavigationControl</li> <li>Popup</li> <li>ScaleControl</li> <li>TerrainControl</li> </ul>"},{"location":"API/#geography-and-geometry","title":"Geography and Geometry","text":"<ul> <li>EdgeInsets</li> <li>LngLat</li> <li>LngLatBounds</li> <li>MercatorCoordinate</li> <li>LngLatBoundsLike</li> <li>LngLatLike</li> <li>PaddingOptions</li> <li>PointLike</li> </ul>"},{"location":"API/#handlers","title":"Handlers","text":"<ul> <li>BoxZoomHandler</li> <li>CooperativeGesturesHandler</li> <li>DoubleClickZoomHandler</li> <li>DragPanHandler</li> <li>DragRotateHandler</li> <li>KeyboardHandler</li> <li>ScrollZoomHandler</li> <li>TwoFingersTouchPitchHandler</li> <li>TwoFingersTouchRotateHandler</li> <li>TwoFingersTouchZoomHandler</li> <li>TwoFingersTouchZoomRotateHandler</li> </ul>"},{"location":"API/#sources","title":"Sources","text":"<ul> <li>CanvasSource</li> <li>GeoJSONSource</li> <li>ImageSource</li> <li>RasterDEMTileSource</li> <li>VectorTileSource</li> <li>VideoSource</li> <li>Source</li> </ul>"},{"location":"API/#event-related","title":"Event Related","text":"<ul> <li>Evented</li> <li>MapMouseEvent</li> <li>MapTouchEvent</li> <li>MapWheelEvent</li> <li>MapEventType</li> <li>MapContextEvent</li> <li>MapDataEvent</li> <li>MapLayerEventType</li> <li>MapLayerMouseEvent</li> <li>MapLayerTouchEvent</li> <li>MapLibreEvent</li> <li>MapLibreZoomEvent</li> <li>MapProjectionEvent</li> <li>MapSourceDataEvent</li> <li>MapStyleDataEvent</li> <li>MapStyleImageMissingEvent</li> <li>MapTerrainEvent</li> </ul>"},{"location":"API/_media/CONTRIBUTING/","title":"Contributing to MapLibre GL JS","text":"<p>Hi, and thanks in advance for contributing to MapLibre GL JS. Here's how we work. Please follow these conventions when submitting an issue or pull request.</p>"},{"location":"API/_media/CONTRIBUTING/#do-not-violate-mapbox-copyright","title":"Do not violate Mapbox copyright!","text":"<p>In December 2020 Mapbox decided to publish future versions of mapbox-gl-js under a proprietary license. You are not allowed to backport code from Mapbox projects which has been contributed under this new license. Unauthorized backports are the biggest threat to the MapLibre project. If you are unsure about this issue, please ask!</p>"},{"location":"API/_media/CONTRIBUTING/#best-practices-for-contributions","title":"Best Practices for Contributions","text":"<p>MapLibre welcomes contributions from community! This codebase is large and complex, and following these best practices will assist the maintainer team in reviewing your contribution. In general, the project values discussion and communication over process and documentation. However, due to the size and complexity of the code, below are some best practices that have aided contributors.</p> <p>It is a good idea to discuss proposed changes before proceeding to an issue ticket or PR. The project team is active in the following forums:</p> <ul> <li>For informal chat discussions, visit the project's Slack Channel.</li> <li>For discussions whose output and outcomes should not be ephemeral, consider starting a thread on GitHub Discussions. This makes it easier to find and reference the discussion in the future.</li> </ul> <p>MapLibre software relies heavily on automated testing, and the project includes a suite of unit and integration tests. For both new features and bugfixes, contributions should update or add test cases to prevent regressions.</p>"},{"location":"API/_media/CONTRIBUTING/#new-features","title":"New Features","text":"<p>For new features, it is usually a good idea to start with an issue ticket. If the feature requires changes to the style specification, an issue ticket should be created in the style specification GitHub repository. Style specification changes are hard to change later, so there will be particularly close scrutiny on changes to the specification.</p> <p>If possible, it is beneficial to demonstrate proposed new features and assess the performance implications of the proposed change. You can use <code>npm install &lt;location-of-maplibre-source-code&gt;</code> to test changes in an npm context, or <code>npm run build-prod</code> to build a .js package for this purpose.</p> <p>For more complex proposed features that require deeper discussion, you should consider bringing it up in the Technical Steering Committee meeting for a video discussion with the team about the proposed change. We find that sometimes it's easier to have a focused, face-to-face discussion for more consequential decisions.</p> <p>The Technical Steering Committee meetings are open to anyone who wants to get involved in the technical direction of the project. These meetings offer a chance for discussion and collaboration on various technical topics. We welcome you to join the meetings if you're interested in getting involved.</p>"},{"location":"API/_media/CONTRIBUTING/#bug-fixes","title":"Bug Fixes","text":"<p>If you've identified a significant bug, or one that you don't intend to fix yourself, please write up an issue ticket describing the problem. For minor or straightforward bug fixes, feel free to proceed directly to a PR.</p> <p>Some best practices for PRs for bugfixes are as follows:</p> <ol> <li>Begin by writing a failing test which demonstrates how the current software fails to operate as expected. Commit and push the branch.</li> <li>Create a draft PR which documents the incorrect behavior. This will show the failing test you've just written in the project's continuous integration and demonstrates the existence of the bug.</li> <li>Fix the bug, and update the PR with any other notes needed to describe the change in the PR's description.</li> <li>Don't forget to mark the PR as ready for review when you're satisfied with the code changes.</li> </ol> <p>This is not intended to be a strict process but rather a guideline that will build confidence that your PR is addressing the problem.</p>"},{"location":"API/_media/CONTRIBUTING/#preparing-your-development-environment","title":"Preparing your Development Environment","text":""},{"location":"API/_media/CONTRIBUTING/#codespaces","title":"CodeSpaces","text":"<p>By creating a code space you should be able to start working immediately after the post create script finishes running. This script basically installes everything written here in the linux part.</p>"},{"location":"API/_media/CONTRIBUTING/#macos","title":"macOS","text":"<p>Install the Xcode Command Line Tools Package <pre><code>xcode-select --install\n</code></pre></p> <p>Install node.js version in .nvmrc <pre><code>brew install node\n</code></pre></p> <p>Clone the repository <pre><code>git clone git@github.com:maplibre/maplibre-gl-js.git\n</code></pre></p> <p>Install dependencies for node_canvas (https://github.com/Automattic/node-canvas) <pre><code>brew install pkg-config cairo pango libpng jpeg giflib librsvg\n</code></pre></p> <p>Install node module dependencies <pre><code>cd maplibre-gl-js &amp;&amp;\nnpm install\n</code></pre></p>"},{"location":"API/_media/CONTRIBUTING/#apple-silicon","title":"Apple silicon","text":"<p>If you have one of the newer arm64 machines, you might find that canvas.node or webgl.node can't be found for your architecture. In that case go to <code>node_modules/canvas</code> and <code>node_modules/gl</code> and run:</p> <pre><code>npm install --build-from-source\n</code></pre> <p>If you have installed from non-M1 machine to an M1 machine using Migration Assistant and you had <code>brew</code> installed before, and you get this error when running tests:</p> <pre><code>dlopen(/Users/[...]/common/temp/node_modules/.pnpm/canvas@2.11.0/node_modules/canvas/build/Release/canvas.node, 0x0001): symbol not found in flat namespace '_cairo_fill'\n\n      at Object.&lt;anonymous&gt; (../../common/temp/node_modules/.pnpm/canvas@2.11.0/node_modules/canvas/lib/bindings.js:3:18)\n</code></pre> <p>Try - Uninstall then re-install <code>brew</code> brew - Run <code>arch -arm64 brew install pkg-config cairo pango libpng jpeg giflib librsvg</code> - delete <code>node_modules</code> folder and re-run <code>npm install</code></p>"},{"location":"API/_media/CONTRIBUTING/#linux-and-by-extension-github-codespaces","title":"Linux (and by extension GitHub codespaces)","text":"<p>Install git, GNU Make, and libglew-dev <pre><code>sudo apt-get update &amp;&amp;\nsudo apt-get install build-essential git libglew-dev libxi-dev default-jre default-jdk xvfb\n</code></pre></p> <p>If prebuilt binaries for canvas and gl aren\u2019t available, you will also need:</p> <pre><code>sudo apt-get install python-is-python3 pkg-config libpixman-1-dev libcairo2-dev libpango1.0-dev libgif-dev\n</code></pre> <p>Install nvm <pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash\n</code></pre></p> <p>Install Node.js from .nvmrc <pre><code>nvm install\n</code></pre></p> <p>Clone the repository <pre><code>git clone git@github.com:maplibre/maplibre-gl-js.git\n</code></pre></p> <p>Install node module dependencies <pre><code>cd maplibre-gl-js &amp;&amp;\nnpm install\n</code></pre></p> <p>Before you can run the docs, you need to ensure Docker is installed and you have permission to run <code>docker</code> commands without <code>sudo</code>, as explained here in the Docker docs.</p>"},{"location":"API/_media/CONTRIBUTING/#windows","title":"Windows","text":"<p>Consider using WSL and follow the above Linux guide or follow the next steps</p> <p>Install git, node.js (version in .nvmrc), npm and node-gyp.</p> <p>Clone the repository <pre><code>git clone git@github.com:maplibre/maplibre-gl-js.git\n</code></pre></p> <p>Install node module dependencies <pre><code>cd maplibre-gl-js\nnpm install\n</code></pre></p> <p>Install headless-gl dependencies https://github.com/stackgl/headless-gl#windows <pre><code>copy node_modules/headless-gl/deps/windows/dll/x64/*.dll c:\\windows\\system32\n</code></pre></p>"},{"location":"API/_media/CONTRIBUTING/#creating-a-standalone-build","title":"Creating a Standalone Build","text":"<p>A standalone build allows you to turn the contents of this repository into <code>maplibre-gl.js</code> and <code>maplibre-gl.css</code> files that can be included on an html page.</p> <p>To create a standalone build, run <pre><code>npm run build-prod\nnpm run build-css\n</code></pre> Once those commands finish, you will have a standalone build at <code>dist/maplibre-gl.js</code> and <code>dist/maplibre-gl.css</code></p>"},{"location":"API/_media/CONTRIBUTING/#analyze-your-standalone-build","title":"Analyze your Standalone Build","text":"<p>MapLibre seeks to keep production bundle sizes small. If your changes involve substantial additions or changes to dependencies, the effects on bundle size can be visualized by running <pre><code>npm run bundle-stats\n</code></pre></p>"},{"location":"API/_media/CONTRIBUTING/#testing-changes-and-writing-documentation","title":"Testing changes and Writing Documentation","text":"<p>See <code>docs/README.md</code></p>"},{"location":"API/_media/CONTRIBUTING/#writing-running-tests","title":"Writing &amp; Running Tests","text":"<p>See <code>test/README.md</code>.</p>"},{"location":"API/_media/CONTRIBUTING/#writing-running-benchmarks","title":"Writing &amp; Running Benchmarks","text":"<p>See <code>test/bench/README.md</code>.</p>"},{"location":"API/_media/CONTRIBUTING/#further-guides","title":"Further guides","text":"<p>See <code>developer-guides</code> directory for guides on the release process and tile lifecycle.</p>"},{"location":"API/_media/CONTRIBUTING/#code-conventions","title":"Code Conventions","text":"<ul> <li>We use <code>error</code> events to report user errors.</li> <li>We use the latest feature that the TypeScript language has to offer including, but not limited to:</li> <li><code>let</code>/<code>const</code></li> <li><code>for...of</code> loops (for arraylike iteration only, i.e. what is supported by Bubl\u00e9's <code>dangerousForOf</code> transform)</li> <li>Arrow functions</li> <li>Classes</li> <li>Template strings</li> <li>Computed and shorthand object properties</li> <li>Default parameters</li> <li>Rest parameters</li> <li>Destructuring</li> <li>Modules</li> </ul> <p>The conventions for module exports are:</p> <ul> <li>No exported \"namespace objects\" -- modules should export either classes or functions, with an occasional exception as needed for stubbing.</li> <li>If a module exports something with the same name as the file name (modulo case), it should be the default export.</li> <li>Anything else should be a named export.</li> </ul> <p>To keep code uniformly styled and avoid common mistakes, you can check some files with the following scripts:</p> <pre><code>npm run lint\nnpm run lint-css\n</code></pre> <p>Additionally, if you're using VSCode, the \"Format Document\" action or \"Editor: Format on Save\" should enforce the js, ts, and css formatting for this project by default.</p>"},{"location":"API/_media/CONTRIBUTING/#version-control-conventions","title":"Version Control Conventions","text":"<p>Here is a recommended way to get setup:</p> <ol> <li>Fork this project</li> <li>Clone your new fork, <code>git clone git@github.com:GithubUser/maplibre-gl-js.git</code></li> <li><code>cd maplibre-gl-js</code></li> <li>Add the MapLibre repository as an upstream repository: <code>git remote add upstream git@github.com:maplibre/maplibre-gl-js.git</code></li> <li>Create a new branch <code>git checkout -b your-branch</code> for your contribution</li> <li>Write code, open a PR from your branch when you're ready</li> <li>If you need to rebase your fork's PR branch onto main to resolve conflicts: <code>git fetch upstream</code>, <code>git rebase upstream/main</code> and force push to Github <code>git push --force origin your-branch</code></li> </ol>"},{"location":"API/_media/CONTRIBUTING/#changelog-conventions","title":"Changelog Conventions","text":"<p>What warrants a changelog entry?</p> <ul> <li>Any change that affects the public API, visual appearance or user security must have a changelog entry</li> <li>Any performance improvement or bugfix should have a changelog entry</li> <li>Any contribution from a community member may have a changelog entry, no matter how small</li> <li>Any documentation related changes should not have a changelog entry</li> <li>Any regression change introduced and fixed within the same release should not have a changelog entry</li> <li>Any internal refactoring, technical debt reduction, render test, unit test or benchmark related change should not have a changelog entry</li> </ul> <p>How to add your changelog?</p> <ul> <li>Edit the <code>CHANGELOG.md</code> file directly, inserting a new entry at the top of the appropriate list</li> <li>Any changelog entry should be descriptive and concise; it should explain the change to a reader without context</li> </ul>"},{"location":"API/_media/CONTRIBUTING/#recommended-reading","title":"Recommended Reading","text":""},{"location":"API/_media/CONTRIBUTING/#learning-webgl","title":"Learning WebGL","text":"<ul> <li>Greggman's WebGL articles</li> <li>WebGL reference card</li> </ul>"},{"location":"API/_media/CONTRIBUTING/#gl-performance","title":"GL Performance","text":"<ul> <li>Debugging and Optimizing WebGL applications</li> </ul>"},{"location":"API/_media/CONTRIBUTING/#misc","title":"Misc","text":"<ul> <li>drawing antialiased lines</li> <li>drawing text with signed distance fields</li> <li>label placement</li> <li>distance fields</li> </ul>"},{"location":"API/classes/AJAXError/","title":"AJAXError","text":"<p>Defined in: src/util/ajax.ts:87</p> <p>An error thrown when a HTTP request results in an error response.</p>"},{"location":"API/classes/AJAXError/#extends","title":"Extends","text":"<ul> <li><code>Error</code></li> </ul>"},{"location":"API/classes/AJAXError/#constructors","title":"Constructors","text":""},{"location":"API/classes/AJAXError/#constructor","title":"Constructor","text":"<p>new AJAXError(<code>status</code>: <code>number</code>, <code>statusText</code>: <code>string</code>, <code>url</code>: <code>string</code>, <code>body</code>: <code>Blob</code>): <code>AJAXError</code></p> <p>Defined in: src/util/ajax.ts:114</p>"},{"location":"API/classes/AJAXError/#parameters","title":"Parameters","text":"Parameter Type Description <code>status</code> <code>number</code> The response's HTTP status code. <code>statusText</code> <code>string</code> The response's HTTP status text. <code>url</code> <code>string</code> The request's URL. <code>body</code> <code>Blob</code> The response's body."},{"location":"API/classes/AJAXError/#returns","title":"Returns","text":"<p><code>AJAXError</code></p>"},{"location":"API/classes/AJAXError/#overrides","title":"Overrides","text":"<p><code>Error.constructor</code></p>"},{"location":"API/classes/AJAXError/#properties","title":"Properties","text":""},{"location":"API/classes/AJAXError/#body","title":"body","text":"<p>body: <code>Blob</code></p> <p>Defined in: src/util/ajax.ts:106</p> <p>The response's body.</p>"},{"location":"API/classes/AJAXError/#status","title":"status","text":"<p>status: <code>number</code></p> <p>Defined in: src/util/ajax.ts:91</p> <p>The response's HTTP status code.</p>"},{"location":"API/classes/AJAXError/#statustext","title":"statusText","text":"<p>statusText: <code>string</code></p> <p>Defined in: src/util/ajax.ts:96</p> <p>The response's HTTP status text.</p>"},{"location":"API/classes/AJAXError/#url","title":"url","text":"<p>url: <code>string</code></p> <p>Defined in: src/util/ajax.ts:101</p> <p>The request's URL.</p>"},{"location":"API/classes/AttributionControl/","title":"AttributionControl","text":"<p>Defined in: src/ui/control/attribution_control.ts:39</p> <p>An <code>AttributionControl</code> control presents the map's attribution information. By default, the attribution control is expanded (regardless of map width).</p>"},{"location":"API/classes/AttributionControl/#example","title":"Example","text":"<pre><code>let map = new Map({attributionControl: false})\n    .addControl(new AttributionControl({\n        compact: true\n    }));\n</code></pre>"},{"location":"API/classes/AttributionControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/AttributionControl/#constructors","title":"Constructors","text":""},{"location":"API/classes/AttributionControl/#constructor","title":"Constructor","text":"<p>new AttributionControl(<code>options</code>: <code>AttributionControlOptions</code>): <code>AttributionControl</code></p> <p>Defined in: src/ui/control/attribution_control.ts:54</p>"},{"location":"API/classes/AttributionControl/#parameters","title":"Parameters","text":"Parameter Type Default value Description <code>options</code> <code>AttributionControlOptions</code> <code>defaultAttributionControlOptions</code> the attribution options"},{"location":"API/classes/AttributionControl/#returns","title":"Returns","text":"<p><code>AttributionControl</code></p>"},{"location":"API/classes/AttributionControl/#methods","title":"Methods","text":""},{"location":"API/classes/AttributionControl/#getdefaultposition","title":"getDefaultPosition()","text":"<p>getDefaultPosition(): <code>ControlPosition</code></p> <p>Defined in: src/ui/control/attribution_control.ts:58</p> <p>Optionally provide a default position for this control. If this method is implemented and Map.addControl is called without the <code>position</code> parameter, the value returned by getDefaultPosition will be used as the control's position.</p>"},{"location":"API/classes/AttributionControl/#returns_1","title":"Returns","text":"<p><code>ControlPosition</code></p> <p>a control position, one of the values valid in addControl.</p>"},{"location":"API/classes/AttributionControl/#implementation-of","title":"Implementation of","text":"<p><code>IControl</code>.<code>getDefaultPosition</code></p>"},{"location":"API/classes/AttributionControl/#onadd","title":"onAdd()","text":"<p>onAdd(<code>map</code>: <code>Map</code>): <code>HTMLElement</code></p> <p>Defined in: src/ui/control/attribution_control.ts:63</p> <p>Register a control on the map and give it a chance to register event listeners and resources. This method is called by Map.addControl internally.</p>"},{"location":"API/classes/AttributionControl/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> the Map this control will be added to"},{"location":"API/classes/AttributionControl/#returns_2","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The control's container element. This should be created by the control and returned by onAdd without being attached to the DOM: the map will insert the control's element into the DOM as necessary.</p>"},{"location":"API/classes/AttributionControl/#implementation-of_1","title":"Implementation of","text":"<p><code>IControl</code>.<code>onAdd</code></p>"},{"location":"API/classes/AttributionControl/#onremove","title":"onRemove()","text":"<p>onRemove(): <code>void</code></p> <p>Defined in: src/ui/control/attribution_control.ts:85</p> <p>Unregister a control on the map and give it a chance to detach event listeners and resources. This method is called by Map.removeControl internally.</p>"},{"location":"API/classes/AttributionControl/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/AttributionControl/#implementation-of_2","title":"Implementation of","text":"<p><code>IControl</code>.<code>onRemove</code></p>"},{"location":"API/classes/BoxZoomHandler/","title":"BoxZoomHandler","text":"<p>Defined in: src/ui/handler/box_zoom.ts:16</p> <p>The <code>BoxZoomHandler</code> allows the user to zoom the map to fit within a bounding box. The bounding box is defined by clicking and holding <code>shift</code> while dragging the cursor.</p>"},{"location":"API/classes/BoxZoomHandler/#implements","title":"Implements","text":"<ul> <li><code>Handler</code></li> </ul>"},{"location":"API/classes/BoxZoomHandler/#methods","title":"Methods","text":""},{"location":"API/classes/BoxZoomHandler/#disable","title":"disable()","text":"<p>disable(): <code>void</code></p> <p>Defined in: src/ui/handler/box_zoom.ts:78</p> <p>Disables the \"box zoom\" interaction.</p>"},{"location":"API/classes/BoxZoomHandler/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/BoxZoomHandler/#example","title":"Example","text":"<pre><code>map.boxZoom.disable();\n</code></pre>"},{"location":"API/classes/BoxZoomHandler/#implementation-of","title":"Implementation of","text":"<p><code>Handler.disable</code></p>"},{"location":"API/classes/BoxZoomHandler/#enable","title":"enable()","text":"<p>enable(): <code>void</code></p> <p>Defined in: src/ui/handler/box_zoom.ts:65</p> <p>Enables the \"box zoom\" interaction.</p>"},{"location":"API/classes/BoxZoomHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/BoxZoomHandler/#example_1","title":"Example","text":"<pre><code>map.boxZoom.enable();\n</code></pre>"},{"location":"API/classes/BoxZoomHandler/#implementation-of_1","title":"Implementation of","text":"<p><code>Handler.enable</code></p>"},{"location":"API/classes/BoxZoomHandler/#isactive","title":"isActive()","text":"<p>isActive(): <code>boolean</code></p> <p>Defined in: src/ui/handler/box_zoom.ts:53</p> <p>Returns a Boolean indicating whether the \"box zoom\" interaction is active, i.e. currently being used.</p>"},{"location":"API/classes/BoxZoomHandler/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"box zoom\" interaction is active.</p>"},{"location":"API/classes/BoxZoomHandler/#implementation-of_2","title":"Implementation of","text":"<p><code>Handler</code>.<code>isActive</code></p>"},{"location":"API/classes/BoxZoomHandler/#isenabled","title":"isEnabled()","text":"<p>isEnabled(): <code>boolean</code></p> <p>Defined in: src/ui/handler/box_zoom.ts:44</p> <p>Returns a Boolean indicating whether the \"box zoom\" interaction is enabled.</p>"},{"location":"API/classes/BoxZoomHandler/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"box zoom\" interaction is enabled.</p>"},{"location":"API/classes/BoxZoomHandler/#implementation-of_3","title":"Implementation of","text":"<p><code>Handler.isEnabled</code></p>"},{"location":"API/classes/BoxZoomHandler/#reset","title":"reset()","text":"<p>reset(): <code>void</code></p> <p>Defined in: src/ui/handler/box_zoom.ts:152</p> <p><code>reset</code> can be called by the manager at any time and must reset everything to it's original state</p>"},{"location":"API/classes/BoxZoomHandler/#returns_4","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/BoxZoomHandler/#implementation-of_4","title":"Implementation of","text":"<p><code>Handler</code>.<code>reset</code></p>"},{"location":"API/classes/CanvasSource/","title":"CanvasSource","text":"<p>Defined in: src/source/canvas_source.ts:66</p> <p>A data source containing the contents of an HTML canvas. See CanvasSourceSpecification for detailed documentation of options.</p>"},{"location":"API/classes/CanvasSource/#example","title":"Example","text":"<pre><code>// add to map\nmap.addSource('some id', {\n   type: 'canvas',\n   canvas: 'idOfMyHTMLCanvas',\n   animate: true,\n   coordinates: [\n       [-76.54, 39.18],\n       [-76.52, 39.18],\n       [-76.52, 39.17],\n       [-76.54, 39.17]\n   ]\n});\n\n// update\nlet mySource = map.getSource('some id');\nmySource.setCoordinates([\n    [-76.54335737228394, 39.18579907229748],\n    [-76.52803659439087, 39.1838364847587],\n    [-76.5295386314392, 39.17683392507606],\n    [-76.54520273208618, 39.17876344106642]\n]);\n\nmap.removeSource('some id');  // remove\n</code></pre>"},{"location":"API/classes/CanvasSource/#extends","title":"Extends","text":"<ul> <li><code>ImageSource</code></li> </ul>"},{"location":"API/classes/CanvasSource/#methods","title":"Methods","text":""},{"location":"API/classes/CanvasSource/#getcanvas","title":"getCanvas()","text":"<p>getCanvas(): <code>HTMLCanvasElement</code></p> <p>Defined in: src/source/canvas_source.ts:145</p> <p>Returns the HTML <code>canvas</code> element.</p>"},{"location":"API/classes/CanvasSource/#returns","title":"Returns","text":"<p><code>HTMLCanvasElement</code></p> <p>The HTML <code>canvas</code> element.</p>"},{"location":"API/classes/CanvasSource/#listens","title":"listens()","text":"<p>listens(<code>type</code>: <code>string</code>): <code>boolean</code></p> <p>Defined in: src/util/evented.ts:165</p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/CanvasSource/#parameters","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/CanvasSource/#returns_1","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/CanvasSource/#inherited-from","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>listens</code></p>"},{"location":"API/classes/CanvasSource/#loaded","title":"loaded()","text":"<p>loaded(): <code>boolean</code></p> <p>Defined in: src/source/image_source.ts:164</p> <p>True if the source is loaded, false otherwise.</p>"},{"location":"API/classes/CanvasSource/#returns_2","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/CanvasSource/#inherited-from_1","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>loaded</code></p>"},{"location":"API/classes/CanvasSource/#loadtile","title":"loadTile()","text":"<p>loadTile(<code>tile</code>: <code>Tile</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Defined in: src/source/image_source.ts:276</p> <p>This method does the heavy lifting of loading a tile. In most cases it will defer the work to the relevant worker source.</p>"},{"location":"API/classes/CanvasSource/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>tile</code> <code>Tile</code> The tile to load"},{"location":"API/classes/CanvasSource/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"API/classes/CanvasSource/#inherited-from_2","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>loadTile</code></p>"},{"location":"API/classes/CanvasSource/#off","title":"off()","text":"<p>off(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>CanvasSource</code></p> <p>Defined in: src/util/evented.ts:90</p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/CanvasSource/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/CanvasSource/#returns_4","title":"Returns","text":"<p><code>CanvasSource</code></p>"},{"location":"API/classes/CanvasSource/#inherited-from_3","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>off</code></p>"},{"location":"API/classes/CanvasSource/#on","title":"on()","text":"<p>on(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>Subscription</code></p> <p>Defined in: src/util/evented.ts:73</p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/CanvasSource/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/CanvasSource/#returns_5","title":"Returns","text":"<p><code>Subscription</code></p>"},{"location":"API/classes/CanvasSource/#inherited-from_4","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>on</code></p>"},{"location":"API/classes/CanvasSource/#once","title":"once()","text":"<p>once(<code>type</code>: <code>string</code>, <code>listener?</code>: <code>Listener</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>CanvasSource</code></p> <p>Defined in: src/util/evented.ts:106</p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/CanvasSource/#parameters_4","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/CanvasSource/#returns_6","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>CanvasSource</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/CanvasSource/#inherited-from_5","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>once</code></p>"},{"location":"API/classes/CanvasSource/#setcoordinates","title":"setCoordinates()","text":"<p>setCoordinates(<code>coordinates</code>: <code>Coordinates</code>): <code>this</code></p> <p>Defined in: src/source/image_source.ts:216</p> <p>Sets the image's coordinates and re-renders the map.</p>"},{"location":"API/classes/CanvasSource/#parameters_5","title":"Parameters","text":"Parameter Type Description <code>coordinates</code> <code>Coordinates</code> Four geographical coordinates, represented as arrays of longitude and latitude numbers, which define the corners of the image. The coordinates start at the top left corner of the image and proceed in clockwise order. They do not have to represent a rectangle."},{"location":"API/classes/CanvasSource/#returns_7","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/CanvasSource/#inherited-from_6","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>setCoordinates</code></p>"},{"location":"API/classes/CanvasSource/#seteventedparent","title":"setEventedParent()","text":"<p>setEventedParent(<code>parent?</code>: <code>Evented</code>, <code>data?</code>: <code>any</code>): <code>CanvasSource</code></p> <p>Defined in: src/util/evented.ts:176</p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/CanvasSource/#parameters_6","title":"Parameters","text":"Parameter Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/CanvasSource/#returns_8","title":"Returns","text":"<p><code>CanvasSource</code></p>"},{"location":"API/classes/CanvasSource/#inherited-from_7","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>setEventedParent</code></p>"},{"location":"API/classes/CanvasSource/#updateimage","title":"updateImage()","text":"<p>updateImage(<code>options</code>: <code>UpdateImageOptions</code>): <code>this</code></p> <p>Defined in: src/source/image_source.ts:174</p> <p>Updates the image URL and, optionally, the coordinates. To avoid having the image flash after changing, set the <code>raster-fade-duration</code> paint property on the raster layer to 0.</p>"},{"location":"API/classes/CanvasSource/#parameters_7","title":"Parameters","text":"Parameter Type Description <code>options</code> <code>UpdateImageOptions</code> The options object."},{"location":"API/classes/CanvasSource/#returns_9","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/CanvasSource/#inherited-from_8","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>updateImage</code></p>"},{"location":"API/classes/CanvasSource/#properties","title":"Properties","text":""},{"location":"API/classes/CanvasSource/#id","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/source/image_source.ts:95</p> <p>The id for the source. Must not be used by any existing source.</p>"},{"location":"API/classes/CanvasSource/#inherited-from_9","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>id</code></p>"},{"location":"API/classes/CanvasSource/#maxzoom","title":"maxzoom","text":"<p>maxzoom: <code>number</code></p> <p>Defined in: src/source/image_source.ts:97</p> <p>The maximum zoom level for the source.</p>"},{"location":"API/classes/CanvasSource/#inherited-from_10","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>maxzoom</code></p>"},{"location":"API/classes/CanvasSource/#minzoom","title":"minzoom","text":"<p>minzoom: <code>number</code></p> <p>Defined in: src/source/image_source.ts:96</p> <p>The minimum zoom level for the source.</p>"},{"location":"API/classes/CanvasSource/#inherited-from_11","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>minzoom</code></p>"},{"location":"API/classes/CanvasSource/#pause","title":"pause()","text":"<p>pause: () =&gt; <code>void</code></p> <p>Defined in: src/source/canvas_source.ts:79</p> <p>Disables animation. The map will display a static copy of the canvas image.</p>"},{"location":"API/classes/CanvasSource/#returns_10","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/CanvasSource/#play","title":"play()","text":"<p>play: () =&gt; <code>void</code></p> <p>Defined in: src/source/canvas_source.ts:75</p> <p>Enables animation. The image will be copied from the canvas to the map on each frame.</p>"},{"location":"API/classes/CanvasSource/#returns_11","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/CanvasSource/#terraintileranges","title":"terrainTileRanges","text":"<p>terrainTileRanges: <code>object</code></p> <p>Defined in: src/source/image_source.ts:104</p> <p>This object is used to store the range of terrain tiles that overlap with this tile. It is relevant for image tiles, as the image exceeds single tile boundaries.</p>"},{"location":"API/classes/CanvasSource/#index-signature","title":"Index Signature","text":"<p>[<code>zoom</code>: <code>string</code>]: <code>CanonicalTileRange</code></p>"},{"location":"API/classes/CanvasSource/#inherited-from_12","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>terrainTileRanges</code></p>"},{"location":"API/classes/CanvasSource/#tilesize","title":"tileSize","text":"<p>tileSize: <code>number</code></p> <p>Defined in: src/source/image_source.ts:98</p> <p>The tile size for the source.</p>"},{"location":"API/classes/CanvasSource/#inherited-from_13","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>tileSize</code></p>"},{"location":"API/classes/CooperativeGesturesHandler/","title":"CooperativeGesturesHandler","text":"<p>Defined in: src/ui/handler/cooperative_gestures.ts:27</p> <p>A <code>CooperativeGestureHandler</code> is a control that adds cooperative gesture info when user tries to zoom in/out.</p> <p>When the CooperativeGestureHandler blocks a gesture, it will emit a <code>cooperativegestureprevented</code> event.</p>"},{"location":"API/classes/CooperativeGesturesHandler/#example","title":"Example","text":"<pre><code>const map = new Map({\n  cooperativeGestures: true\n});\n</code></pre>"},{"location":"API/classes/CooperativeGesturesHandler/#see","title":"See","text":"<p>Example: cooperative gestures</p>"},{"location":"API/classes/CooperativeGesturesHandler/#implements","title":"Implements","text":"<ul> <li><code>Handler</code></li> </ul>"},{"location":"API/classes/CooperativeGesturesHandler/#methods","title":"Methods","text":""},{"location":"API/classes/CooperativeGesturesHandler/#isactive","title":"isActive()","text":"<p>isActive(): <code>boolean</code></p> <p>Defined in: src/ui/handler/cooperative_gestures.ts:42</p> <p>This is used to indicate if the handler is currently active or not. In case a handler is active, it will block other handlers from getting the relevant events. There is an allow list of handlers that can be active at the same time, which is configured when adding a handler.</p>"},{"location":"API/classes/CooperativeGesturesHandler/#returns","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/CooperativeGesturesHandler/#implementation-of","title":"Implementation of","text":"<p><code>Handler</code>.<code>isActive</code></p>"},{"location":"API/classes/CooperativeGesturesHandler/#reset","title":"reset()","text":"<p>reset(): <code>void</code></p> <p>Defined in: src/ui/handler/cooperative_gestures.ts:45</p> <p><code>reset</code> can be called by the manager at any time and must reset everything to it's original state</p>"},{"location":"API/classes/CooperativeGesturesHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/CooperativeGesturesHandler/#implementation-of_1","title":"Implementation of","text":"<p><code>Handler</code>.<code>reset</code></p>"},{"location":"API/classes/CooperativeGesturesHandler/#properties","title":"Properties","text":""},{"location":"API/classes/CooperativeGesturesHandler/#_bypasskey","title":"_bypassKey","text":"<p>_bypassKey: <code>\"ctrlKey\"</code> | <code>\"metaKey\"</code></p> <p>Defined in: src/ui/handler/cooperative_gestures.ts:34</p> <p>This is the key that will allow to bypass the cooperative gesture protection</p>"},{"location":"API/classes/DoubleClickZoomHandler/","title":"DoubleClickZoomHandler","text":"<p>Defined in: src/ui/handler/shim/dblclick_zoom.ts:10</p> <p>The <code>DoubleClickZoomHandler</code> allows the user to zoom the map at a point by double clicking or double tapping.</p>"},{"location":"API/classes/DoubleClickZoomHandler/#methods","title":"Methods","text":""},{"location":"API/classes/DoubleClickZoomHandler/#disable","title":"disable()","text":"<p>disable(): <code>void</code></p> <p>Defined in: src/ui/handler/shim/dblclick_zoom.ts:42</p> <p>Disables the \"double click to zoom\" interaction.</p>"},{"location":"API/classes/DoubleClickZoomHandler/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/DoubleClickZoomHandler/#example","title":"Example","text":"<pre><code>map.doubleClickZoom.disable();\n</code></pre>"},{"location":"API/classes/DoubleClickZoomHandler/#enable","title":"enable()","text":"<p>enable(): <code>void</code></p> <p>Defined in: src/ui/handler/shim/dblclick_zoom.ts:29</p> <p>Enables the \"double click to zoom\" interaction.</p>"},{"location":"API/classes/DoubleClickZoomHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/DoubleClickZoomHandler/#example_1","title":"Example","text":"<pre><code>map.doubleClickZoom.enable();\n</code></pre>"},{"location":"API/classes/DoubleClickZoomHandler/#isactive","title":"isActive()","text":"<p>isActive(): <code>boolean</code></p> <p>Defined in: src/ui/handler/shim/dblclick_zoom.ts:61</p> <p>Returns a Boolean indicating whether the \"double click to zoom\" interaction is active, i.e. currently being used.</p>"},{"location":"API/classes/DoubleClickZoomHandler/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"double click to zoom\" interaction is active.</p>"},{"location":"API/classes/DoubleClickZoomHandler/#isenabled","title":"isEnabled()","text":"<p>isEnabled(): <code>boolean</code></p> <p>Defined in: src/ui/handler/shim/dblclick_zoom.ts:52</p> <p>Returns a Boolean indicating whether the \"double click to zoom\" interaction is enabled.</p>"},{"location":"API/classes/DoubleClickZoomHandler/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"double click to zoom\" interaction is enabled.</p>"},{"location":"API/classes/DragPanHandler/","title":"DragPanHandler","text":"<p>Defined in: src/ui/handler/shim/drag_pan.ts:37</p> <p>The <code>DragPanHandler</code> allows the user to pan the map by clicking and dragging the cursor.</p>"},{"location":"API/classes/DragPanHandler/#methods","title":"Methods","text":""},{"location":"API/classes/DragPanHandler/#disable","title":"disable()","text":"<p>disable(): <code>void</code></p> <p>Defined in: src/ui/handler/shim/drag_pan.ts:81</p> <p>Disables the \"drag to pan\" interaction.</p>"},{"location":"API/classes/DragPanHandler/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/DragPanHandler/#example","title":"Example","text":"<pre><code>map.dragPan.disable();\n</code></pre>"},{"location":"API/classes/DragPanHandler/#enable","title":"enable()","text":"<p>enable(<code>options?</code>: <code>boolean</code> | <code>DragPanOptions</code>): <code>void</code></p> <p>Defined in: src/ui/handler/shim/drag_pan.ts:66</p> <p>Enables the \"drag to pan\" interaction.</p>"},{"location":"API/classes/DragPanHandler/#parameters","title":"Parameters","text":"Parameter Type Description <code>options?</code> <code>boolean</code> | <code>DragPanOptions</code> Options object"},{"location":"API/classes/DragPanHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/DragPanHandler/#example_1","title":"Example","text":"<pre><code>  map.dragPan.enable();\n  map.dragPan.enable({\n     linearity: 0.3,\n     easing: bezier(0, 0, 0.3, 1),\n     maxSpeed: 1400,\n     deceleration: 2500,\n  });\n</code></pre>"},{"location":"API/classes/DragPanHandler/#isactive","title":"isActive()","text":"<p>isActive(): <code>boolean</code></p> <p>Defined in: src/ui/handler/shim/drag_pan.ts:101</p> <p>Returns a Boolean indicating whether the \"drag to pan\" interaction is active, i.e. currently being used.</p>"},{"location":"API/classes/DragPanHandler/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to pan\" interaction is active.</p>"},{"location":"API/classes/DragPanHandler/#isenabled","title":"isEnabled()","text":"<p>isEnabled(): <code>boolean</code></p> <p>Defined in: src/ui/handler/shim/drag_pan.ts:92</p> <p>Returns a Boolean indicating whether the \"drag to pan\" interaction is enabled.</p>"},{"location":"API/classes/DragPanHandler/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to pan\" interaction is enabled.</p>"},{"location":"API/classes/DragRotateHandler/","title":"DragRotateHandler","text":"<p>Defined in: src/ui/handler/shim/drag_rotate.ts:25</p> <p>The <code>DragRotateHandler</code> allows the user to rotate the map by clicking and dragging the cursor while holding the right mouse button or <code>ctrl</code> key.</p>"},{"location":"API/classes/DragRotateHandler/#methods","title":"Methods","text":""},{"location":"API/classes/DragRotateHandler/#disable","title":"disable()","text":"<p>disable(): <code>void</code></p> <p>Defined in: src/ui/handler/shim/drag_rotate.ts:64</p> <p>Disables the \"drag to rotate\" interaction.</p>"},{"location":"API/classes/DragRotateHandler/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/DragRotateHandler/#example","title":"Example","text":"<pre><code>map.dragRotate.disable();\n</code></pre>"},{"location":"API/classes/DragRotateHandler/#enable","title":"enable()","text":"<p>enable(): <code>void</code></p> <p>Defined in: src/ui/handler/shim/drag_rotate.ts:50</p> <p>Enables the \"drag to rotate\" interaction.</p>"},{"location":"API/classes/DragRotateHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/DragRotateHandler/#example_1","title":"Example","text":"<pre><code>map.dragRotate.enable();\n</code></pre>"},{"location":"API/classes/DragRotateHandler/#isactive","title":"isActive()","text":"<p>isActive(): <code>boolean</code></p> <p>Defined in: src/ui/handler/shim/drag_rotate.ts:84</p> <p>Returns a Boolean indicating whether the \"drag to rotate\" interaction is active, i.e. currently being used.</p>"},{"location":"API/classes/DragRotateHandler/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to rotate\" interaction is active.</p>"},{"location":"API/classes/DragRotateHandler/#isenabled","title":"isEnabled()","text":"<p>isEnabled(): <code>boolean</code></p> <p>Defined in: src/ui/handler/shim/drag_rotate.ts:75</p> <p>Returns a Boolean indicating whether the \"drag to rotate\" interaction is enabled.</p>"},{"location":"API/classes/DragRotateHandler/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to rotate\" interaction is enabled.</p>"},{"location":"API/classes/EdgeInsets/","title":"EdgeInsets","text":"<p>Defined in: src/geo/edge_insets.ts:12</p> <p>An <code>EdgeInset</code> object represents screen space padding applied to the edges of the viewport. This shifts the apparent center or the vanishing point of the map. This is useful for adding floating UI elements on top of the map and having the vanishing point shift as UI elements resize.</p>"},{"location":"API/classes/EdgeInsets/#methods","title":"Methods","text":""},{"location":"API/classes/EdgeInsets/#getcenter","title":"getCenter()","text":"<p>getCenter(<code>width</code>: <code>number</code>, <code>height</code>: <code>number</code>): <code>Point</code></p> <p>Defined in: src/geo/edge_insets.ts:70</p> <p>Utility method that computes the new apprent center or vanishing point after applying insets. This is in pixels and with the top left being (0.0) and +y being downwards.</p>"},{"location":"API/classes/EdgeInsets/#parameters","title":"Parameters","text":"Parameter Type Description <code>width</code> <code>number</code> the width <code>height</code> <code>number</code> the height"},{"location":"API/classes/EdgeInsets/#returns","title":"Returns","text":"<p><code>Point</code></p> <p>the point</p>"},{"location":"API/classes/EdgeInsets/#interpolate","title":"interpolate()","text":"<p>interpolate(<code>start</code>: <code>EdgeInsets</code> | <code>PaddingOptions</code>, <code>target</code>: <code>PaddingOptions</code>, <code>t</code>: <code>number</code>): <code>EdgeInsets</code></p> <p>Defined in: src/geo/edge_insets.ts:53</p> <p>Interpolates the inset in-place. This maintains the current inset value for any inset not present in <code>target</code>.</p>"},{"location":"API/classes/EdgeInsets/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>start</code> <code>EdgeInsets</code> | <code>PaddingOptions</code> interpolation start <code>target</code> <code>PaddingOptions</code> interpolation target <code>t</code> <code>number</code> interpolation step/weight"},{"location":"API/classes/EdgeInsets/#returns_1","title":"Returns","text":"<p><code>EdgeInsets</code></p> <p>the insets</p>"},{"location":"API/classes/EdgeInsets/#tojson","title":"toJSON()","text":"<p>toJSON(): <code>Complete</code>&lt;<code>PaddingOptions</code>&gt;</p> <p>Defined in: src/geo/edge_insets.ts:95</p> <p>Returns the current state as json, useful when you want to have a read-only representation of the inset.</p>"},{"location":"API/classes/EdgeInsets/#returns_2","title":"Returns","text":"<p><code>Complete</code>&lt;<code>PaddingOptions</code>&gt;</p> <p>state as json</p>"},{"location":"API/classes/EdgeInsets/#properties","title":"Properties","text":""},{"location":"API/classes/EdgeInsets/#bottom","title":"bottom","text":"<p>bottom: <code>number</code></p> <p>Defined in: src/geo/edge_insets.ts:20</p>"},{"location":"API/classes/EdgeInsets/#default-value","title":"Default Value","text":"<pre><code>0\n</code></pre>"},{"location":"API/classes/EdgeInsets/#left","title":"left","text":"<p>left: <code>number</code></p> <p>Defined in: src/geo/edge_insets.ts:24</p>"},{"location":"API/classes/EdgeInsets/#default-value_1","title":"Default Value","text":"<pre><code>0\n</code></pre>"},{"location":"API/classes/EdgeInsets/#right","title":"right","text":"<p>right: <code>number</code></p> <p>Defined in: src/geo/edge_insets.ts:28</p>"},{"location":"API/classes/EdgeInsets/#default-value_2","title":"Default Value","text":"<pre><code>0\n</code></pre>"},{"location":"API/classes/EdgeInsets/#top","title":"top","text":"<p>top: <code>number</code></p> <p>Defined in: src/geo/edge_insets.ts:16</p>"},{"location":"API/classes/EdgeInsets/#default-value_3","title":"Default Value","text":"<pre><code>0\n</code></pre>"},{"location":"API/classes/Event/","title":"Event","text":"<p>Defined in: src/util/evented.ts:30</p> <p>The event class</p>"},{"location":"API/classes/Event/#extended-by","title":"Extended by","text":"<ul> <li><code>MapWheelEvent</code></li> <li><code>MapTouchEvent</code></li> <li><code>MapMouseEvent</code></li> <li><code>ErrorEvent</code></li> </ul>"},{"location":"API/classes/Evented/","title":"Evented","text":"<p>Defined in: src/util/evented.ts:59</p> <p>Methods mixed in to other classes for event capabilities.</p>"},{"location":"API/classes/Evented/#extended-by","title":"Extended by","text":"<ul> <li><code>GeolocateControl</code></li> <li><code>FullscreenControl</code></li> <li><code>Popup</code></li> <li><code>Marker</code></li> <li><code>Style</code></li> <li><code>GeoJSONSource</code></li> <li><code>ImageSource</code></li> <li><code>RasterTileSource</code></li> <li><code>VectorTileSource</code></li> <li><code>StyleLayer</code></li> </ul>"},{"location":"API/classes/Evented/#methods","title":"Methods","text":""},{"location":"API/classes/Evented/#listens","title":"listens()","text":"<p>listens(<code>type</code>: <code>string</code>): <code>boolean</code></p> <p>Defined in: src/util/evented.ts:165</p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/Evented/#parameters","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/Evented/#returns","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/Evented/#off","title":"off()","text":"<p>off(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>Evented</code></p> <p>Defined in: src/util/evented.ts:90</p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/Evented/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/Evented/#returns_1","title":"Returns","text":"<p><code>Evented</code></p>"},{"location":"API/classes/Evented/#on","title":"on()","text":"<p>on(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>Subscription</code></p> <p>Defined in: src/util/evented.ts:73</p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/Evented/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/Evented/#returns_2","title":"Returns","text":"<p><code>Subscription</code></p>"},{"location":"API/classes/Evented/#once","title":"once()","text":"<p>once(<code>type</code>: <code>string</code>, <code>listener?</code>: <code>Listener</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>Evented</code></p> <p>Defined in: src/util/evented.ts:106</p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/Evented/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/Evented/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>Evented</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/Evented/#seteventedparent","title":"setEventedParent()","text":"<p>setEventedParent(<code>parent?</code>: <code>Evented</code>, <code>data?</code>: <code>any</code>): <code>Evented</code></p> <p>Defined in: src/util/evented.ts:176</p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/Evented/#parameters_4","title":"Parameters","text":"Parameter Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/Evented/#returns_4","title":"Returns","text":"<p><code>Evented</code></p>"},{"location":"API/classes/FullscreenControl/","title":"FullscreenControl","text":"<p>Defined in: src/ui/control/fullscreen_control.ts:40</p> <p>A <code>FullscreenControl</code> control contains a button for toggling the map in and out of fullscreen mode. When requestFullscreen is not supported, fullscreen is handled via CSS properties. The map's <code>cooperativeGestures</code> option is temporarily disabled while the map is in fullscreen mode, and is restored when the map exist fullscreen mode.</p>"},{"location":"API/classes/FullscreenControl/#param","title":"Param","text":"<p>the full screen control options</p>"},{"location":"API/classes/FullscreenControl/#example","title":"Example","text":"<pre><code>map.addControl(new FullscreenControl({container: document.querySelector('body')}));\n</code></pre>"},{"location":"API/classes/FullscreenControl/#see","title":"See","text":"<p>View a fullscreen map</p>"},{"location":"API/classes/FullscreenControl/#events","title":"Events","text":"<p>Event <code>fullscreenstart</code> of type Event will be fired when fullscreen mode has started.</p> <p>Event <code>fullscreenend</code> of type Event will be fired when fullscreen mode has ended.</p>"},{"location":"API/classes/FullscreenControl/#extends","title":"Extends","text":"<ul> <li><code>Evented</code></li> </ul>"},{"location":"API/classes/FullscreenControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/FullscreenControl/#constructors","title":"Constructors","text":""},{"location":"API/classes/FullscreenControl/#constructor","title":"Constructor","text":"<p>new FullscreenControl(<code>options</code>: <code>FullscreenControlOptions</code>): <code>FullscreenControl</code></p> <p>Defined in: src/ui/control/fullscreen_control.ts:52</p>"},{"location":"API/classes/FullscreenControl/#parameters","title":"Parameters","text":"Parameter Type Description <code>options</code> <code>FullscreenControlOptions</code> the control's options"},{"location":"API/classes/FullscreenControl/#returns","title":"Returns","text":"<p><code>FullscreenControl</code></p>"},{"location":"API/classes/FullscreenControl/#overrides","title":"Overrides","text":"<p><code>Evented.constructor</code></p>"},{"location":"API/classes/FullscreenControl/#methods","title":"Methods","text":""},{"location":"API/classes/FullscreenControl/#listens","title":"listens()","text":"<p>listens(<code>type</code>: <code>string</code>): <code>boolean</code></p> <p>Defined in: src/util/evented.ts:165</p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/FullscreenControl/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/FullscreenControl/#returns_1","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/FullscreenControl/#inherited-from","title":"Inherited from","text":"<p><code>Evented</code>.<code>listens</code></p>"},{"location":"API/classes/FullscreenControl/#off","title":"off()","text":"<p>off(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>FullscreenControl</code></p> <p>Defined in: src/util/evented.ts:90</p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/FullscreenControl/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/FullscreenControl/#returns_2","title":"Returns","text":"<p><code>FullscreenControl</code></p>"},{"location":"API/classes/FullscreenControl/#inherited-from_1","title":"Inherited from","text":"<p><code>Evented</code>.<code>off</code></p>"},{"location":"API/classes/FullscreenControl/#on","title":"on()","text":"<p>on(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>Subscription</code></p> <p>Defined in: src/util/evented.ts:73</p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/FullscreenControl/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/FullscreenControl/#returns_3","title":"Returns","text":"<p><code>Subscription</code></p>"},{"location":"API/classes/FullscreenControl/#inherited-from_2","title":"Inherited from","text":"<p><code>Evented</code>.<code>on</code></p>"},{"location":"API/classes/FullscreenControl/#onadd","title":"onAdd()","text":"<p>onAdd(<code>map</code>: <code>Map</code>): <code>HTMLElement</code></p> <p>Defined in: src/ui/control/fullscreen_control.ts:76</p> <p>Register a control on the map and give it a chance to register event listeners and resources. This method is called by Map.addControl internally.</p>"},{"location":"API/classes/FullscreenControl/#parameters_4","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> the Map this control will be added to"},{"location":"API/classes/FullscreenControl/#returns_4","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The control's container element. This should be created by the control and returned by onAdd without being attached to the DOM: the map will insert the control's element into the DOM as necessary.</p>"},{"location":"API/classes/FullscreenControl/#implementation-of","title":"Implementation of","text":"<p><code>IControl</code>.<code>onAdd</code></p>"},{"location":"API/classes/FullscreenControl/#once","title":"once()","text":"<p>once(<code>type</code>: <code>string</code>, <code>listener?</code>: <code>Listener</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>FullscreenControl</code></p> <p>Defined in: src/util/evented.ts:106</p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/FullscreenControl/#parameters_5","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/FullscreenControl/#returns_5","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>FullscreenControl</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/FullscreenControl/#inherited-from_3","title":"Inherited from","text":"<p><code>Evented</code>.<code>once</code></p>"},{"location":"API/classes/FullscreenControl/#onremove","title":"onRemove()","text":"<p>onRemove(): <code>void</code></p> <p>Defined in: src/ui/control/fullscreen_control.ts:85</p> <p>Unregister a control on the map and give it a chance to detach event listeners and resources. This method is called by Map.removeControl internally.</p>"},{"location":"API/classes/FullscreenControl/#returns_6","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/FullscreenControl/#implementation-of_1","title":"Implementation of","text":"<p><code>IControl</code>.<code>onRemove</code></p>"},{"location":"API/classes/FullscreenControl/#seteventedparent","title":"setEventedParent()","text":"<p>setEventedParent(<code>parent?</code>: <code>Evented</code>, <code>data?</code>: <code>any</code>): <code>FullscreenControl</code></p> <p>Defined in: src/util/evented.ts:176</p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/FullscreenControl/#parameters_6","title":"Parameters","text":"Parameter Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/FullscreenControl/#returns_7","title":"Returns","text":"<p><code>FullscreenControl</code></p>"},{"location":"API/classes/FullscreenControl/#inherited-from_4","title":"Inherited from","text":"<p><code>Evented</code>.<code>setEventedParent</code></p>"},{"location":"API/classes/GeoJSONSource/","title":"GeoJSONSource","text":"<p>Defined in: src/source/geojson_source.ts:112</p> <p>A source containing GeoJSON. (See the Style Specification for detailed documentation of options.)</p>"},{"location":"API/classes/GeoJSONSource/#examples","title":"Examples","text":"<pre><code>map.addSource('some id', {\n    type: 'geojson',\n    data: 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_10m_ports.geojson'\n});\n</code></pre> <pre><code>map.addSource('some id', {\n   type: 'geojson',\n   data: {\n       \"type\": \"FeatureCollection\",\n       \"features\": [{\n           \"type\": \"Feature\",\n           \"properties\": {},\n           \"geometry\": {\n               \"type\": \"Point\",\n               \"coordinates\": [\n                   -76.53063297271729,\n                   39.18174077994108\n               ]\n           }\n       }]\n   }\n});\n</code></pre> <pre><code>map.getSource('some id').setData({\n  \"type\": \"FeatureCollection\",\n  \"features\": [{\n      \"type\": \"Feature\",\n      \"properties\": { \"name\": \"Null Island\" },\n      \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [ 0, 0 ]\n      }\n  }]\n});\n</code></pre>"},{"location":"API/classes/GeoJSONSource/#see","title":"See","text":"<ul> <li>Draw GeoJSON points</li> <li>Add a GeoJSON line</li> <li>Create a heatmap from points</li> <li>Create and style clusters</li> </ul>"},{"location":"API/classes/GeoJSONSource/#extends","title":"Extends","text":"<ul> <li><code>Evented</code></li> </ul>"},{"location":"API/classes/GeoJSONSource/#implements","title":"Implements","text":"<ul> <li><code>Source</code></li> </ul>"},{"location":"API/classes/GeoJSONSource/#methods","title":"Methods","text":""},{"location":"API/classes/GeoJSONSource/#_updateworkerdata","title":"_updateWorkerData()","text":"<p>_updateWorkerData(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Defined in: src/source/geojson_source.ts:387</p> <p>Responsible for invoking WorkerSource's geojson.loadData target, which handles loading the geojson data and preparing to serve it up as tiles, using geojson-vt or supercluster as appropriate.</p>"},{"location":"API/classes/GeoJSONSource/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"API/classes/GeoJSONSource/#aborttile","title":"abortTile()","text":"<p>abortTile(<code>tile</code>: <code>Tile</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Defined in: src/source/geojson_source.ts:487</p> <p>Allows to abort a tile loading.</p>"},{"location":"API/classes/GeoJSONSource/#parameters","title":"Parameters","text":"Parameter Type Description <code>tile</code> <code>Tile</code> The tile to abort"},{"location":"API/classes/GeoJSONSource/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"API/classes/GeoJSONSource/#implementation-of","title":"Implementation of","text":"<p><code>Source</code>.<code>abortTile</code></p>"},{"location":"API/classes/GeoJSONSource/#getbounds","title":"getBounds()","text":"<p>getBounds(): <code>Promise</code>&lt;<code>LngLatBounds</code>&gt;</p> <p>Defined in: src/source/geojson_source.ts:281</p> <p>Allows getting the source's boundaries. If there's a problem with the source's data, it will return an empty LngLatBounds.</p>"},{"location":"API/classes/GeoJSONSource/#returns_2","title":"Returns","text":"<p><code>Promise</code>&lt;<code>LngLatBounds</code>&gt;</p> <p>a promise which resolves to the source's boundaries</p>"},{"location":"API/classes/GeoJSONSource/#getclusterchildren","title":"getClusterChildren()","text":"<p>getClusterChildren(<code>clusterId</code>: <code>number</code>): <code>Promise</code>&lt;<code>Feature</code>&lt;<code>Geometry</code>, {[<code>name</code>: <code>string</code>]: <code>any</code>; }&gt;[]&gt;</p> <p>Defined in: src/source/geojson_source.ts:343</p> <p>For clustered sources, fetches the children of the given cluster on the next zoom level (as an array of GeoJSON features).</p>"},{"location":"API/classes/GeoJSONSource/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>clusterId</code> <code>number</code> The value of the cluster's <code>cluster_id</code> property."},{"location":"API/classes/GeoJSONSource/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Feature</code>&lt;<code>Geometry</code>, {[<code>name</code>: <code>string</code>]: <code>any</code>; }&gt;[]&gt;</p> <p>a promise that is resolved when the features are retrieved</p>"},{"location":"API/classes/GeoJSONSource/#getclusterexpansionzoom","title":"getClusterExpansionZoom()","text":"<p>getClusterExpansionZoom(<code>clusterId</code>: <code>number</code>): <code>Promise</code>&lt;<code>number</code>&gt;</p> <p>Defined in: src/source/geojson_source.ts:333</p> <p>For clustered sources, fetches the zoom at which the given cluster expands.</p>"},{"location":"API/classes/GeoJSONSource/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>clusterId</code> <code>number</code> The value of the cluster's <code>cluster_id</code> property."},{"location":"API/classes/GeoJSONSource/#returns_4","title":"Returns","text":"<p><code>Promise</code>&lt;<code>number</code>&gt;</p> <p>a promise that is resolved with the zoom number</p>"},{"location":"API/classes/GeoJSONSource/#getclusterleaves","title":"getClusterLeaves()","text":"<p>getClusterLeaves(<code>clusterId</code>: <code>number</code>, <code>limit</code>: <code>number</code>, <code>offset</code>: <code>number</code>): <code>Promise</code>&lt;<code>Feature</code>&lt;<code>Geometry</code>, {[<code>name</code>: <code>string</code>]: <code>any</code>; }&gt;[]&gt;</p> <p>Defined in: src/source/geojson_source.ts:372</p> <p>For clustered sources, fetches the original points that belong to the cluster (as an array of GeoJSON features).</p>"},{"location":"API/classes/GeoJSONSource/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>clusterId</code> <code>number</code> The value of the cluster's <code>cluster_id</code> property. <code>limit</code> <code>number</code> The maximum number of features to return. <code>offset</code> <code>number</code> The number of features to skip (e.g. for pagination)."},{"location":"API/classes/GeoJSONSource/#returns_5","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Feature</code>&lt;<code>Geometry</code>, {[<code>name</code>: <code>string</code>]: <code>any</code>; }&gt;[]&gt;</p> <p>a promise that is resolved when the features are retrieved</p>"},{"location":"API/classes/GeoJSONSource/#example","title":"Example","text":"<p>Retrieve cluster leaves on click <pre><code>map.on('click', 'clusters', (e) =&gt; {\n  let features = map.queryRenderedFeatures(e.point, {\n    layers: ['clusters']\n  });\n\n  let clusterId = features[0].properties.cluster_id;\n  let pointCount = features[0].properties.point_count;\n  let clusterSource = map.getSource('clusters');\n\n  const features = await clusterSource.getClusterLeaves(clusterId, pointCount);\n  // Print cluster leaves in the console\n  console.log('Cluster leaves:', features);\n});\n</code></pre></p>"},{"location":"API/classes/GeoJSONSource/#getdata","title":"getData()","text":"<p>getData(): <code>Promise</code>&lt;<code>GeoJSON</code>&lt;<code>Geometry</code>, {[<code>name</code>: <code>string</code>]: <code>any</code>; }&gt;&gt;</p> <p>Defined in: src/source/geojson_source.ts:264</p> <p>Allows to get the source's actual GeoJSON data.</p>"},{"location":"API/classes/GeoJSONSource/#returns_6","title":"Returns","text":"<p><code>Promise</code>&lt;<code>GeoJSON</code>&lt;<code>Geometry</code>, {[<code>name</code>: <code>string</code>]: <code>any</code>; }&gt;&gt;</p> <p>a promise which resolves to the source's actual GeoJSON data</p>"},{"location":"API/classes/GeoJSONSource/#hastransition","title":"hasTransition()","text":"<p>hasTransition(): <code>boolean</code></p> <p>Defined in: src/source/geojson_source.ts:512</p> <p>True if the source has transition, false otherwise.</p>"},{"location":"API/classes/GeoJSONSource/#returns_7","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/GeoJSONSource/#implementation-of_1","title":"Implementation of","text":"<p><code>Source</code>.<code>hasTransition</code></p>"},{"location":"API/classes/GeoJSONSource/#listens","title":"listens()","text":"<p>listens(<code>type</code>: <code>string</code>): <code>boolean</code></p> <p>Defined in: src/util/evented.ts:165</p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/GeoJSONSource/#parameters_4","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/GeoJSONSource/#returns_8","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/GeoJSONSource/#inherited-from","title":"Inherited from","text":"<p><code>Evented</code>.<code>listens</code></p>"},{"location":"API/classes/GeoJSONSource/#loaded","title":"loaded()","text":"<p>loaded(): <code>boolean</code></p> <p>Defined in: src/source/geojson_source.ts:456</p> <p>True if the source is loaded, false otherwise.</p>"},{"location":"API/classes/GeoJSONSource/#returns_9","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/GeoJSONSource/#implementation-of_2","title":"Implementation of","text":"<p><code>Source</code>.<code>loaded</code></p>"},{"location":"API/classes/GeoJSONSource/#loadtile","title":"loadTile()","text":"<p>loadTile(<code>tile</code>: <code>Tile</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Defined in: src/source/geojson_source.ts:460</p> <p>This method does the heavy lifting of loading a tile. In most cases it will defer the work to the relevant worker source.</p>"},{"location":"API/classes/GeoJSONSource/#parameters_5","title":"Parameters","text":"Parameter Type Description <code>tile</code> <code>Tile</code> The tile to load"},{"location":"API/classes/GeoJSONSource/#returns_10","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"API/classes/GeoJSONSource/#implementation-of_3","title":"Implementation of","text":"<p><code>Source</code>.<code>loadTile</code></p>"},{"location":"API/classes/GeoJSONSource/#off","title":"off()","text":"<p>off(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>GeoJSONSource</code></p> <p>Defined in: src/util/evented.ts:90</p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/GeoJSONSource/#parameters_6","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/GeoJSONSource/#returns_11","title":"Returns","text":"<p><code>GeoJSONSource</code></p>"},{"location":"API/classes/GeoJSONSource/#inherited-from_1","title":"Inherited from","text":"<p><code>Evented</code>.<code>off</code></p>"},{"location":"API/classes/GeoJSONSource/#on","title":"on()","text":"<p>on(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>Subscription</code></p> <p>Defined in: src/util/evented.ts:73</p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/GeoJSONSource/#parameters_7","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/GeoJSONSource/#returns_12","title":"Returns","text":"<p><code>Subscription</code></p>"},{"location":"API/classes/GeoJSONSource/#inherited-from_2","title":"Inherited from","text":"<p><code>Evented</code>.<code>on</code></p>"},{"location":"API/classes/GeoJSONSource/#onadd","title":"onAdd()","text":"<p>onAdd(<code>map</code>: <code>Map</code>): <code>void</code></p> <p>Defined in: src/source/geojson_source.ts:222</p> <p>This method is called when the source is added to the map.</p>"},{"location":"API/classes/GeoJSONSource/#parameters_8","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> The map instance"},{"location":"API/classes/GeoJSONSource/#returns_13","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/GeoJSONSource/#implementation-of_4","title":"Implementation of","text":"<p><code>Source</code>.<code>onAdd</code></p>"},{"location":"API/classes/GeoJSONSource/#once","title":"once()","text":"<p>once(<code>type</code>: <code>string</code>, <code>listener?</code>: <code>Listener</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>GeoJSONSource</code></p> <p>Defined in: src/util/evented.ts:106</p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/GeoJSONSource/#parameters_9","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/GeoJSONSource/#returns_14","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>GeoJSONSource</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/GeoJSONSource/#inherited-from_3","title":"Inherited from","text":"<p><code>Evented</code>.<code>once</code></p>"},{"location":"API/classes/GeoJSONSource/#onremove","title":"onRemove()","text":"<p>onRemove(): <code>void</code></p> <p>Defined in: src/source/geojson_source.ts:500</p> <p>This method is called when the source is removed from the map.</p>"},{"location":"API/classes/GeoJSONSource/#returns_15","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/GeoJSONSource/#implementation-of_5","title":"Implementation of","text":"<p><code>Source</code>.<code>onRemove</code></p>"},{"location":"API/classes/GeoJSONSource/#serialize","title":"serialize()","text":"<p>serialize(): <code>GeoJSONSourceSpecification</code></p> <p>Defined in: src/source/geojson_source.ts:505</p>"},{"location":"API/classes/GeoJSONSource/#returns_16","title":"Returns","text":"<p><code>GeoJSONSourceSpecification</code></p> <p>A plain (stringifiable) JS object representing the current state of the source. Creating a source using the returned object as the <code>options</code> should result in a Source that is equivalent to this one.</p>"},{"location":"API/classes/GeoJSONSource/#implementation-of_6","title":"Implementation of","text":"<p><code>Source</code>.<code>serialize</code></p>"},{"location":"API/classes/GeoJSONSource/#setclusteroptions","title":"setClusterOptions()","text":"<p>setClusterOptions(<code>options</code>: <code>SetClusterOptions</code>): <code>this</code></p> <p>Defined in: src/source/geojson_source.ts:314</p> <p>To disable/enable clustering on the source options</p>"},{"location":"API/classes/GeoJSONSource/#parameters_10","title":"Parameters","text":"Parameter Type Description <code>options</code> <code>SetClusterOptions</code> The options to set"},{"location":"API/classes/GeoJSONSource/#returns_17","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/GeoJSONSource/#example_1","title":"Example","text":"<pre><code>map.getSource('some id').setClusterOptions({cluster: false});\nmap.getSource('some id').setClusterOptions({cluster: false, clusterRadius: 50, clusterMaxZoom: 14});\n</code></pre>"},{"location":"API/classes/GeoJSONSource/#setdata","title":"setData()","text":"<p>setData(<code>data</code>: <code>string</code> | <code>GeoJSON</code>&lt;<code>Geometry</code>, {[<code>name</code>: <code>string</code>]: <code>any</code>; }&gt;): <code>this</code></p> <p>Defined in: src/source/geojson_source.ts:232</p> <p>Sets the GeoJSON data and re-renders the map.</p>"},{"location":"API/classes/GeoJSONSource/#parameters_11","title":"Parameters","text":"Parameter Type Description <code>data</code> <code>string</code> | <code>GeoJSON</code>&lt;<code>Geometry</code>, {[<code>name</code>: <code>string</code>]: <code>any</code>; }&gt; A GeoJSON data object or a URL to one. The latter is preferable in the case of large GeoJSON files."},{"location":"API/classes/GeoJSONSource/#returns_18","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/GeoJSONSource/#seteventedparent","title":"setEventedParent()","text":"<p>setEventedParent(<code>parent?</code>: <code>Evented</code>, <code>data?</code>: <code>any</code>): <code>GeoJSONSource</code></p> <p>Defined in: src/util/evented.ts:176</p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/GeoJSONSource/#parameters_12","title":"Parameters","text":"Parameter Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/GeoJSONSource/#returns_19","title":"Returns","text":"<p><code>GeoJSONSource</code></p>"},{"location":"API/classes/GeoJSONSource/#inherited-from_4","title":"Inherited from","text":"<p><code>Evented</code>.<code>setEventedParent</code></p>"},{"location":"API/classes/GeoJSONSource/#unloadtile","title":"unloadTile()","text":"<p>unloadTile(<code>tile</code>: <code>Tile</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Defined in: src/source/geojson_source.ts:495</p> <p>Allows to unload a tile.</p>"},{"location":"API/classes/GeoJSONSource/#parameters_13","title":"Parameters","text":"Parameter Type Description <code>tile</code> <code>Tile</code> The tile to unload"},{"location":"API/classes/GeoJSONSource/#returns_20","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"API/classes/GeoJSONSource/#implementation-of_7","title":"Implementation of","text":"<p><code>Source</code>.<code>unloadTile</code></p>"},{"location":"API/classes/GeoJSONSource/#updatedata","title":"updateData()","text":"<p>updateData(<code>diff</code>: <code>GeoJSONSourceDiff</code>): <code>this</code></p> <p>Defined in: src/source/geojson_source.ts:253</p> <p>Updates the source's GeoJSON, and re-renders the map.</p> <p>For sources with lots of features, this method can be used to make updates more quickly.</p> <p>This approach requires unique IDs for every feature in the source. The IDs can either be specified on the feature, or by using the promoteId option to specify which property should be used as the ID.</p> <p>It is an error to call updateData on a source that did not have unique IDs for each of its features already.</p> <p>Updates are applied on a best-effort basis, updating an ID that does not exist will not result in an error.</p>"},{"location":"API/classes/GeoJSONSource/#parameters_14","title":"Parameters","text":"Parameter Type Description <code>diff</code> <code>GeoJSONSourceDiff</code> The changes that need to be applied."},{"location":"API/classes/GeoJSONSource/#returns_21","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/GeoJSONSource/#properties","title":"Properties","text":""},{"location":"API/classes/GeoJSONSource/#attribution","title":"attribution","text":"<p>attribution: <code>string</code></p> <p>Defined in: src/source/geojson_source.ts:118</p> <p>The attribution for the source.</p>"},{"location":"API/classes/GeoJSONSource/#implementation-of_8","title":"Implementation of","text":"<p><code>Source</code>.<code>attribution</code></p>"},{"location":"API/classes/GeoJSONSource/#id","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/source/geojson_source.ts:114</p> <p>The id for the source. Must not be used by any existing source.</p>"},{"location":"API/classes/GeoJSONSource/#implementation-of_9","title":"Implementation of","text":"<p><code>Source</code>.<code>id</code></p>"},{"location":"API/classes/GeoJSONSource/#istileclipped","title":"isTileClipped","text":"<p>isTileClipped: <code>boolean</code></p> <p>Defined in: src/source/geojson_source.ts:121</p> <p><code>false</code> if tiles can be drawn outside their boundaries, <code>true</code> if they cannot.</p>"},{"location":"API/classes/GeoJSONSource/#implementation-of_10","title":"Implementation of","text":"<p><code>Source</code>.<code>isTileClipped</code></p>"},{"location":"API/classes/GeoJSONSource/#maxzoom","title":"maxzoom","text":"<p>maxzoom: <code>number</code></p> <p>Defined in: src/source/geojson_source.ts:116</p> <p>The maximum zoom level for the source.</p>"},{"location":"API/classes/GeoJSONSource/#implementation-of_11","title":"Implementation of","text":"<p><code>Source</code>.<code>maxzoom</code></p>"},{"location":"API/classes/GeoJSONSource/#minzoom","title":"minzoom","text":"<p>minzoom: <code>number</code></p> <p>Defined in: src/source/geojson_source.ts:115</p> <p>The minimum zoom level for the source.</p>"},{"location":"API/classes/GeoJSONSource/#implementation-of_12","title":"Implementation of","text":"<p><code>Source</code>.<code>minzoom</code></p>"},{"location":"API/classes/GeoJSONSource/#reparseoverscaled","title":"reparseOverscaled","text":"<p>reparseOverscaled: <code>boolean</code></p> <p>Defined in: src/source/geojson_source.ts:122</p> <p><code>true</code> if tiles should be sent back to the worker for each overzoomed zoom level, <code>false</code> if not.</p>"},{"location":"API/classes/GeoJSONSource/#implementation-of_13","title":"Implementation of","text":"<p><code>Source</code>.<code>reparseOverscaled</code></p>"},{"location":"API/classes/GeoJSONSource/#tilesize","title":"tileSize","text":"<p>tileSize: <code>number</code></p> <p>Defined in: src/source/geojson_source.ts:117</p> <p>The tile size for the source.</p>"},{"location":"API/classes/GeoJSONSource/#implementation-of_14","title":"Implementation of","text":"<p><code>Source</code>.<code>tileSize</code></p>"},{"location":"API/classes/GeolocateControl/","title":"GeolocateControl","text":"<p>Defined in: src/ui/control/geolocate_control.ts:240</p> <p>A <code>GeolocateControl</code> control provides a button that uses the browser's geolocation API to locate the user on the map.</p> <p>Not all browsers support geolocation, and some users may disable the feature. Geolocation support for modern browsers including Chrome requires sites to be served over HTTPS. If geolocation support is not available, the <code>GeolocateControl</code> will show as disabled.</p> <p>The zoom level applied will depend on the accuracy of the geolocation provided by the device.</p> <p>The <code>GeolocateControl</code> has two modes. If <code>trackUserLocation</code> is <code>false</code> (default) the control acts as a button, which when pressed will set the map's camera to target the user location. If the user moves, the map won't update. This is most suited for the desktop. If <code>trackUserLocation</code> is <code>true</code> the control acts as a toggle button that when active the user's location is actively monitored for changes. In this mode the <code>GeolocateControl</code> has three interaction states: * active - the map's camera automatically updates as the user's location changes, keeping the location dot in the center. Initial state and upon clicking the <code>GeolocateControl</code> button. * passive - the user's location dot automatically updates, but the map's camera does not. Occurs upon the user initiating a map movement. * disabled - occurs if Geolocation is not available, disabled or denied.</p> <p>These interaction states can't be controlled programmatically, rather they are set based on user interactions.</p>"},{"location":"API/classes/GeolocateControl/#state-diagram","title":"State Diagram","text":""},{"location":"API/classes/GeolocateControl/#examples","title":"Examples","text":"<pre><code>map.addControl(new GeolocateControl({\n    positionOptions: {\n        enableHighAccuracy: true\n    },\n    trackUserLocation: true\n}));\n</code></pre> <pre><code>// Initialize the geolocate control.\nlet geolocate = new GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when a trackuserlocationend event occurs.\ngeolocate.on('trackuserlocationend', () =&gt; {\n  console.log('A trackuserlocationend event has occurred.')\n});\n</code></pre> <pre><code>// Initialize the geolocate control.\nlet geolocate = new GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when a trackuserlocationstart event occurs.\ngeolocate.on('trackuserlocationstart', () =&gt; {\n  console.log('A trackuserlocationstart event has occurred.')\n});\n</code></pre> <pre><code>// Initialize the geolocate control.\nlet geolocate = new GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when an userlocationlostfocus event occurs.\ngeolocate.on('userlocationlostfocus', function() {\n  console.log('An userlocationlostfocus event has occurred.')\n});\n</code></pre> <pre><code>// Initialize the geolocate control.\nlet geolocate = new GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when an userlocationfocus event occurs.\ngeolocate.on('userlocationfocus', function() {\n  console.log('An userlocationfocus event has occurred.')\n});\n</code></pre> <pre><code>// Initialize the geolocate control.\nlet geolocate = new GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when a geolocate event occurs.\ngeolocate.on('geolocate', () =&gt; {\n  console.log('A geolocate event has occurred.')\n});\n</code></pre> <pre><code>// Initialize the geolocate control.\nlet geolocate = new GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when an error event occurs.\ngeolocate.on('error', () =&gt; {\n  console.log('An error event has occurred.')\n});\n</code></pre> <pre><code>// Initialize the geolocate control.\nlet geolocate = new GeolocateControl({\n  positionOptions: {\n      enableHighAccuracy: true\n  },\n  trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\n// Set an event listener that fires\n// when an outofmaxbounds event occurs.\ngeolocate.on('outofmaxbounds', () =&gt; {\n  console.log('An outofmaxbounds event has occurred.')\n});\n</code></pre>"},{"location":"API/classes/GeolocateControl/#see","title":"See","text":"<p>Locate the user</p>"},{"location":"API/classes/GeolocateControl/#events","title":"Events","text":"<p>Event <code>trackuserlocationend</code> of type Event will be fired when the <code>GeolocateControl</code> changes to the background state, which happens when a user changes the camera during an active position lock. This only applies when <code>trackUserLocation</code> is <code>true</code>. In the background state, the dot on the map will update with location updates but the camera will not.</p> <p>Event <code>trackuserlocationstart</code> of type Event will be fired when the <code>GeolocateControl</code> changes to the active lock state, which happens either upon first obtaining a successful Geolocation API position for the user (a <code>geolocate</code> event will follow), or the user clicks the geolocate button when in the background state which uses the last known position to recenter the map and enter active lock state (no <code>geolocate</code> event will follow unless the users's location changes).</p> <p>Event <code>userlocationlostfocus</code> of type Event will be fired when the <code>GeolocateControl</code> changes to the background state, which happens when a user changes the camera during an active position lock. This only applies when <code>trackUserLocation</code> is <code>true</code>. In the background state, the dot on the map will update with location updates but the camera will not.</p> <p>Event <code>userlocationfocus</code> of type Event will be fired when the <code>GeolocateControl</code> changes to the active lock state, which happens upon the user clicks the geolocate button when in the background state which uses the last known position to recenter the map and enter active lock state.</p> <p>Event <code>geolocate</code> of type Event will be fired on each Geolocation API position update which returned as success. <code>data</code> - The returned Position object from the callback in Geolocation.getCurrentPosition() or Geolocation.watchPosition().</p> <p>Event <code>error</code> of type Event will be fired on each Geolocation API position update which returned as an error. <code>data</code> - The returned PositionError object from the callback in Geolocation.getCurrentPosition() or Geolocation.watchPosition().</p> <p>Event <code>outofmaxbounds</code> of type Event will be fired on each Geolocation API position update which returned as success but user position is out of map <code>maxBounds</code>. <code>data</code> - The returned Position object from the callback in Geolocation.getCurrentPosition() or Geolocation.watchPosition().</p>"},{"location":"API/classes/GeolocateControl/#extends","title":"Extends","text":"<ul> <li><code>Evented</code></li> </ul>"},{"location":"API/classes/GeolocateControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/GeolocateControl/#constructors","title":"Constructors","text":""},{"location":"API/classes/GeolocateControl/#constructor","title":"Constructor","text":"<p>new GeolocateControl(<code>options</code>: <code>GeolocateControlOptions</code>): <code>GeolocateControl</code></p> <p>Defined in: src/ui/control/geolocate_control.ts:275</p>"},{"location":"API/classes/GeolocateControl/#parameters","title":"Parameters","text":"Parameter Type Description <code>options</code> <code>GeolocateControlOptions</code> the control's options"},{"location":"API/classes/GeolocateControl/#returns","title":"Returns","text":"<p><code>GeolocateControl</code></p>"},{"location":"API/classes/GeolocateControl/#overrides","title":"Overrides","text":"<p><code>Evented.constructor</code></p>"},{"location":"API/classes/GeolocateControl/#methods","title":"Methods","text":""},{"location":"API/classes/GeolocateControl/#_isoutofmapmaxbounds","title":"_isOutOfMapMaxBounds()","text":"<p>_isOutOfMapMaxBounds(<code>position</code>: <code>GeolocationPosition</code>): <code>boolean</code></p> <p>Defined in: src/ui/control/geolocate_control.ts:321</p> <p>Check if the Geolocation API Position is outside the map's <code>maxBounds</code>.</p>"},{"location":"API/classes/GeolocateControl/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>position</code> <code>GeolocationPosition</code> the Geolocation API Position"},{"location":"API/classes/GeolocateControl/#returns_1","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if position is outside the map's <code>maxBounds</code>, otherwise returns <code>false</code>.</p>"},{"location":"API/classes/GeolocateControl/#_onsuccess","title":"_onSuccess()","text":"<p>_onSuccess(<code>position</code>: <code>GeolocationPosition</code>): <code>void</code></p> <p>Defined in: src/ui/control/geolocate_control.ts:374</p> <p>When the Geolocation API returns a new location, update the <code>GeolocateControl</code>.</p>"},{"location":"API/classes/GeolocateControl/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>position</code> <code>GeolocationPosition</code> the Geolocation API Position"},{"location":"API/classes/GeolocateControl/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/GeolocateControl/#_updatecamera","title":"_updateCamera()","text":"<p>_updateCamera(<code>position</code>: <code>GeolocationPosition</code>): <code>void</code></p> <p>Defined in: src/ui/control/geolocate_control.ts:441</p> <p>Update the camera location to center on the current position</p>"},{"location":"API/classes/GeolocateControl/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>position</code> <code>GeolocationPosition</code> the Geolocation API Position"},{"location":"API/classes/GeolocateControl/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/GeolocateControl/#_updatemarker","title":"_updateMarker()","text":"<p>_updateMarker(<code>position?</code>: <code>GeolocationPosition</code>): <code>void</code></p> <p>Defined in: src/ui/control/geolocate_control.ts:458</p> <p>Update the user location dot Marker to the current position</p>"},{"location":"API/classes/GeolocateControl/#parameters_4","title":"Parameters","text":"Parameter Type Description <code>position?</code> <code>GeolocationPosition</code> the Geolocation API Position"},{"location":"API/classes/GeolocateControl/#returns_4","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/GeolocateControl/#listens","title":"listens()","text":"<p>listens(<code>type</code>: <code>string</code>): <code>boolean</code></p> <p>Defined in: src/util/evented.ts:165</p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/GeolocateControl/#parameters_5","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/GeolocateControl/#returns_5","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/GeolocateControl/#inherited-from","title":"Inherited from","text":"<p><code>Evented</code>.<code>listens</code></p>"},{"location":"API/classes/GeolocateControl/#off","title":"off()","text":"<p>off(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>GeolocateControl</code></p> <p>Defined in: src/util/evented.ts:90</p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/GeolocateControl/#parameters_6","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/GeolocateControl/#returns_6","title":"Returns","text":"<p><code>GeolocateControl</code></p>"},{"location":"API/classes/GeolocateControl/#inherited-from_1","title":"Inherited from","text":"<p><code>Evented</code>.<code>off</code></p>"},{"location":"API/classes/GeolocateControl/#on","title":"on()","text":"<p>on(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>Subscription</code></p> <p>Defined in: src/util/evented.ts:73</p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/GeolocateControl/#parameters_7","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/GeolocateControl/#returns_7","title":"Returns","text":"<p><code>Subscription</code></p>"},{"location":"API/classes/GeolocateControl/#inherited-from_2","title":"Inherited from","text":"<p><code>Evented</code>.<code>on</code></p>"},{"location":"API/classes/GeolocateControl/#onadd","title":"onAdd()","text":"<p>onAdd(<code>map</code>: <code>Map</code>): <code>HTMLElement</code></p> <p>Defined in: src/ui/control/geolocate_control.ts:281</p> <p>Register a control on the map and give it a chance to register event listeners and resources. This method is called by Map.addControl internally.</p>"},{"location":"API/classes/GeolocateControl/#parameters_8","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> the Map this control will be added to"},{"location":"API/classes/GeolocateControl/#returns_8","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The control's container element. This should be created by the control and returned by onAdd without being attached to the DOM: the map will insert the control's element into the DOM as necessary.</p>"},{"location":"API/classes/GeolocateControl/#implementation-of","title":"Implementation of","text":"<p><code>IControl</code>.<code>onAdd</code></p>"},{"location":"API/classes/GeolocateControl/#once","title":"once()","text":"<p>once(<code>type</code>: <code>string</code>, <code>listener?</code>: <code>Listener</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>GeolocateControl</code></p> <p>Defined in: src/util/evented.ts:106</p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/GeolocateControl/#parameters_9","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/GeolocateControl/#returns_9","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>GeolocateControl</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/GeolocateControl/#inherited-from_3","title":"Inherited from","text":"<p><code>Evented</code>.<code>once</code></p>"},{"location":"API/classes/GeolocateControl/#onremove","title":"onRemove()","text":"<p>onRemove(): <code>void</code></p> <p>Defined in: src/ui/control/geolocate_control.ts:290</p> <p>Unregister a control on the map and give it a chance to detach event listeners and resources. This method is called by Map.removeControl internally.</p>"},{"location":"API/classes/GeolocateControl/#returns_10","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/GeolocateControl/#implementation-of_1","title":"Implementation of","text":"<p><code>IControl</code>.<code>onRemove</code></p>"},{"location":"API/classes/GeolocateControl/#seteventedparent","title":"setEventedParent()","text":"<p>setEventedParent(<code>parent?</code>: <code>Evented</code>, <code>data?</code>: <code>any</code>): <code>GeolocateControl</code></p> <p>Defined in: src/util/evented.ts:176</p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/GeolocateControl/#parameters_10","title":"Parameters","text":"Parameter Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/GeolocateControl/#returns_11","title":"Returns","text":"<p><code>GeolocateControl</code></p>"},{"location":"API/classes/GeolocateControl/#inherited-from_4","title":"Inherited from","text":"<p><code>Evented</code>.<code>setEventedParent</code></p>"},{"location":"API/classes/GeolocateControl/#trigger","title":"trigger()","text":"<p>trigger(): <code>boolean</code></p> <p>Defined in: src/ui/control/geolocate_control.ts:630</p> <p>Programmatically request and move the map to the user's location.</p>"},{"location":"API/classes/GeolocateControl/#returns_12","title":"Returns","text":"<p><code>boolean</code></p> <p><code>false</code> if called before control was added to a map, otherwise returns <code>true</code>.</p>"},{"location":"API/classes/GeolocateControl/#example","title":"Example","text":"<pre><code>// Initialize the geolocate control.\nlet geolocate = new GeolocateControl({\n positionOptions: {\n   enableHighAccuracy: true\n },\n trackUserLocation: true\n});\n// Add the control to the map.\nmap.addControl(geolocate);\nmap.on('load', () =&gt; {\n  geolocate.trigger();\n});\n</code></pre>"},{"location":"API/classes/GlobeControl/","title":"GlobeControl","text":"<p>Defined in: src/ui/control/globe_control.ts:19</p> <p>A <code>GlobeControl</code> control contains a button for toggling the map projection between \"mercator\" and \"globe\".</p>"},{"location":"API/classes/GlobeControl/#example","title":"Example","text":"<pre><code>let map = new Map()\n    .addControl(new GlobeControl());\n</code></pre>"},{"location":"API/classes/GlobeControl/#see","title":"See","text":"<p>Display a globe with a fill extrusion layer</p>"},{"location":"API/classes/GlobeControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/GlobeControl/#methods","title":"Methods","text":""},{"location":"API/classes/GlobeControl/#onadd","title":"onAdd()","text":"<p>onAdd(<code>map</code>: <code>Map</code>): <code>HTMLElement</code></p> <p>Defined in: src/ui/control/globe_control.ts:25</p> <p>Register a control on the map and give it a chance to register event listeners and resources. This method is called by Map.addControl internally.</p>"},{"location":"API/classes/GlobeControl/#parameters","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> the Map this control will be added to"},{"location":"API/classes/GlobeControl/#returns","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The control's container element. This should be created by the control and returned by onAdd without being attached to the DOM: the map will insert the control's element into the DOM as necessary.</p>"},{"location":"API/classes/GlobeControl/#implementation-of","title":"Implementation of","text":"<p><code>IControl</code>.<code>onAdd</code></p>"},{"location":"API/classes/GlobeControl/#onremove","title":"onRemove()","text":"<p>onRemove(): <code>void</code></p> <p>Defined in: src/ui/control/globe_control.ts:39</p> <p>Unregister a control on the map and give it a chance to detach event listeners and resources. This method is called by Map.removeControl internally.</p>"},{"location":"API/classes/GlobeControl/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/GlobeControl/#implementation-of_1","title":"Implementation of","text":"<p><code>IControl</code>.<code>onRemove</code></p>"},{"location":"API/classes/Hash/","title":"Hash","text":"<p>Defined in: src/ui/hash.ts:12</p> <p>Adds the map's position to its page's location hash. Passed as an option to the map object.</p>"},{"location":"API/classes/Hash/#methods","title":"Methods","text":""},{"location":"API/classes/Hash/#addto","title":"addTo()","text":"<p>addTo(<code>map</code>: <code>Map</code>): <code>Hash</code></p> <p>Defined in: src/ui/hash.ts:25</p> <p>Map element to listen for coordinate changes</p>"},{"location":"API/classes/Hash/#parameters","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> The map object"},{"location":"API/classes/Hash/#returns","title":"Returns","text":"<p><code>Hash</code></p>"},{"location":"API/classes/Hash/#remove","title":"remove()","text":"<p>remove(): <code>Hash</code></p> <p>Defined in: src/ui/hash.ts:35</p> <p>Removes hash</p>"},{"location":"API/classes/Hash/#returns_1","title":"Returns","text":"<p><code>Hash</code></p>"},{"location":"API/classes/Hash/#properties","title":"Properties","text":""},{"location":"API/classes/Hash/#_updatehash","title":"_updateHash()","text":"<p>_updateHash: () =&gt; <code>Timeout</code></p> <p>Defined in: src/ui/hash.ts:156</p> <p>Mobile Safari doesn't allow updating the hash more than 100 times per 30 seconds.</p>"},{"location":"API/classes/Hash/#returns_2","title":"Returns","text":"<p><code>Timeout</code></p>"},{"location":"API/classes/ImageSource/","title":"ImageSource","text":"<p>Defined in: src/source/image_source.ts:93</p> <p>A data source containing an image. (See the Style Specification for detailed documentation of options.)</p>"},{"location":"API/classes/ImageSource/#example","title":"Example","text":"<pre><code>// add to map\nmap.addSource('some id', {\n   type: 'image',\n   url: 'https://www.maplibre.org/images/foo.png',\n   coordinates: [\n       [-76.54, 39.18],\n       [-76.52, 39.18],\n       [-76.52, 39.17],\n       [-76.54, 39.17]\n   ]\n});\n\n// update coordinates\nlet mySource = map.getSource('some id');\nmySource.setCoordinates([\n    [-76.54335737228394, 39.18579907229748],\n    [-76.52803659439087, 39.1838364847587],\n    [-76.5295386314392, 39.17683392507606],\n    [-76.54520273208618, 39.17876344106642]\n]);\n\n// update url and coordinates simultaneously\nmySource.updateImage({\n   url: 'https://www.maplibre.org/images/bar.png',\n   coordinates: [\n       [-76.54335737228394, 39.18579907229748],\n       [-76.52803659439087, 39.1838364847587],\n       [-76.5295386314392, 39.17683392507606],\n       [-76.54520273208618, 39.17876344106642]\n   ]\n})\n\nmap.removeSource('some id');  // remove\n</code></pre>"},{"location":"API/classes/ImageSource/#extends","title":"Extends","text":"<ul> <li><code>Evented</code></li> </ul>"},{"location":"API/classes/ImageSource/#extended-by","title":"Extended by","text":"<ul> <li><code>CanvasSource</code></li> <li><code>VideoSource</code></li> </ul>"},{"location":"API/classes/ImageSource/#implements","title":"Implements","text":"<ul> <li><code>Source</code></li> </ul>"},{"location":"API/classes/ImageSource/#methods","title":"Methods","text":""},{"location":"API/classes/ImageSource/#hastransition","title":"hasTransition()","text":"<p>hasTransition(): <code>boolean</code></p> <p>Defined in: src/source/image_source.ts:299</p> <p>True if the source has transition, false otherwise.</p>"},{"location":"API/classes/ImageSource/#returns","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/ImageSource/#implementation-of","title":"Implementation of","text":"<p><code>Source</code>.<code>hasTransition</code></p>"},{"location":"API/classes/ImageSource/#listens","title":"listens()","text":"<p>listens(<code>type</code>: <code>string</code>): <code>boolean</code></p> <p>Defined in: src/util/evented.ts:165</p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/ImageSource/#parameters","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/ImageSource/#returns_1","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/ImageSource/#inherited-from","title":"Inherited from","text":"<p><code>Evented</code>.<code>listens</code></p>"},{"location":"API/classes/ImageSource/#loaded","title":"loaded()","text":"<p>loaded(): <code>boolean</code></p> <p>Defined in: src/source/image_source.ts:164</p> <p>True if the source is loaded, false otherwise.</p>"},{"location":"API/classes/ImageSource/#returns_2","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/ImageSource/#implementation-of_1","title":"Implementation of","text":"<p><code>Source</code>.<code>loaded</code></p>"},{"location":"API/classes/ImageSource/#loadtile","title":"loadTile()","text":"<p>loadTile(<code>tile</code>: <code>Tile</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Defined in: src/source/image_source.ts:276</p> <p>This method does the heavy lifting of loading a tile. In most cases it will defer the work to the relevant worker source.</p>"},{"location":"API/classes/ImageSource/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>tile</code> <code>Tile</code> The tile to load"},{"location":"API/classes/ImageSource/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"API/classes/ImageSource/#implementation-of_2","title":"Implementation of","text":"<p><code>Source</code>.<code>loadTile</code></p>"},{"location":"API/classes/ImageSource/#off","title":"off()","text":"<p>off(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>ImageSource</code></p> <p>Defined in: src/util/evented.ts:90</p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/ImageSource/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/ImageSource/#returns_4","title":"Returns","text":"<p><code>ImageSource</code></p>"},{"location":"API/classes/ImageSource/#inherited-from_1","title":"Inherited from","text":"<p><code>Evented</code>.<code>off</code></p>"},{"location":"API/classes/ImageSource/#on","title":"on()","text":"<p>on(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>Subscription</code></p> <p>Defined in: src/util/evented.ts:73</p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/ImageSource/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/ImageSource/#returns_5","title":"Returns","text":"<p><code>Subscription</code></p>"},{"location":"API/classes/ImageSource/#inherited-from_2","title":"Inherited from","text":"<p><code>Evented</code>.<code>on</code></p>"},{"location":"API/classes/ImageSource/#onadd","title":"onAdd()","text":"<p>onAdd(<code>map</code>: <code>Map</code>): <code>void</code></p> <p>Defined in: src/source/image_source.ts:196</p> <p>This method is called when the source is added to the map.</p>"},{"location":"API/classes/ImageSource/#parameters_4","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> The map instance"},{"location":"API/classes/ImageSource/#returns_6","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/ImageSource/#implementation-of_3","title":"Implementation of","text":"<p><code>Source</code>.<code>onAdd</code></p>"},{"location":"API/classes/ImageSource/#once","title":"once()","text":"<p>once(<code>type</code>: <code>string</code>, <code>listener?</code>: <code>Listener</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>ImageSource</code></p> <p>Defined in: src/util/evented.ts:106</p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/ImageSource/#parameters_5","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/ImageSource/#returns_7","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>ImageSource</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/ImageSource/#inherited-from_3","title":"Inherited from","text":"<p><code>Evented</code>.<code>once</code></p>"},{"location":"API/classes/ImageSource/#onremove","title":"onRemove()","text":"<p>onRemove(): <code>void</code></p> <p>Defined in: src/source/image_source.ts:201</p> <p>This method is called when the source is removed from the map.</p>"},{"location":"API/classes/ImageSource/#returns_8","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/ImageSource/#implementation-of_4","title":"Implementation of","text":"<p><code>Source</code>.<code>onRemove</code></p>"},{"location":"API/classes/ImageSource/#prepare","title":"prepare()","text":"<p>prepare(): <code>void</code></p> <p>Defined in: src/source/image_source.ts:248</p> <p>Allows to execute a prepare step before the source is used.</p>"},{"location":"API/classes/ImageSource/#returns_9","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/ImageSource/#implementation-of_5","title":"Implementation of","text":"<p><code>Source</code>.<code>prepare</code></p>"},{"location":"API/classes/ImageSource/#serialize","title":"serialize()","text":"<p>serialize(): <code>VideoSourceSpecification</code> | <code>ImageSourceSpecification</code> | <code>CanvasSourceSpecification</code></p> <p>Defined in: src/source/image_source.ts:291</p>"},{"location":"API/classes/ImageSource/#returns_10","title":"Returns","text":"<p><code>VideoSourceSpecification</code> | <code>ImageSourceSpecification</code> | <code>CanvasSourceSpecification</code></p> <p>A plain (stringifiable) JS object representing the current state of the source. Creating a source using the returned object as the <code>options</code> should result in a Source that is equivalent to this one.</p>"},{"location":"API/classes/ImageSource/#implementation-of_6","title":"Implementation of","text":"<p><code>Source</code>.<code>serialize</code></p>"},{"location":"API/classes/ImageSource/#setcoordinates","title":"setCoordinates()","text":"<p>setCoordinates(<code>coordinates</code>: <code>Coordinates</code>): <code>this</code></p> <p>Defined in: src/source/image_source.ts:216</p> <p>Sets the image's coordinates and re-renders the map.</p>"},{"location":"API/classes/ImageSource/#parameters_6","title":"Parameters","text":"Parameter Type Description <code>coordinates</code> <code>Coordinates</code> Four geographical coordinates, represented as arrays of longitude and latitude numbers, which define the corners of the image. The coordinates start at the top left corner of the image and proceed in clockwise order. They do not have to represent a rectangle."},{"location":"API/classes/ImageSource/#returns_11","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/ImageSource/#seteventedparent","title":"setEventedParent()","text":"<p>setEventedParent(<code>parent?</code>: <code>Evented</code>, <code>data?</code>: <code>any</code>): <code>ImageSource</code></p> <p>Defined in: src/util/evented.ts:176</p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/ImageSource/#parameters_7","title":"Parameters","text":"Parameter Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/ImageSource/#returns_12","title":"Returns","text":"<p><code>ImageSource</code></p>"},{"location":"API/classes/ImageSource/#inherited-from_4","title":"Inherited from","text":"<p><code>Evented</code>.<code>setEventedParent</code></p>"},{"location":"API/classes/ImageSource/#updateimage","title":"updateImage()","text":"<p>updateImage(<code>options</code>: <code>UpdateImageOptions</code>): <code>this</code></p> <p>Defined in: src/source/image_source.ts:174</p> <p>Updates the image URL and, optionally, the coordinates. To avoid having the image flash after changing, set the <code>raster-fade-duration</code> paint property on the raster layer to 0.</p>"},{"location":"API/classes/ImageSource/#parameters_8","title":"Parameters","text":"Parameter Type Description <code>options</code> <code>UpdateImageOptions</code> The options object."},{"location":"API/classes/ImageSource/#returns_13","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/ImageSource/#properties","title":"Properties","text":""},{"location":"API/classes/ImageSource/#id","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/source/image_source.ts:95</p> <p>The id for the source. Must not be used by any existing source.</p>"},{"location":"API/classes/ImageSource/#implementation-of_7","title":"Implementation of","text":"<p><code>Source</code>.<code>id</code></p>"},{"location":"API/classes/ImageSource/#maxzoom","title":"maxzoom","text":"<p>maxzoom: <code>number</code></p> <p>Defined in: src/source/image_source.ts:97</p> <p>The maximum zoom level for the source.</p>"},{"location":"API/classes/ImageSource/#implementation-of_8","title":"Implementation of","text":"<p><code>Source</code>.<code>maxzoom</code></p>"},{"location":"API/classes/ImageSource/#minzoom","title":"minzoom","text":"<p>minzoom: <code>number</code></p> <p>Defined in: src/source/image_source.ts:96</p> <p>The minimum zoom level for the source.</p>"},{"location":"API/classes/ImageSource/#implementation-of_9","title":"Implementation of","text":"<p><code>Source</code>.<code>minzoom</code></p>"},{"location":"API/classes/ImageSource/#terraintileranges","title":"terrainTileRanges","text":"<p>terrainTileRanges: <code>object</code></p> <p>Defined in: src/source/image_source.ts:104</p> <p>This object is used to store the range of terrain tiles that overlap with this tile. It is relevant for image tiles, as the image exceeds single tile boundaries.</p>"},{"location":"API/classes/ImageSource/#index-signature","title":"Index Signature","text":"<p>[<code>zoom</code>: <code>string</code>]: <code>CanonicalTileRange</code></p>"},{"location":"API/classes/ImageSource/#tilesize","title":"tileSize","text":"<p>tileSize: <code>number</code></p> <p>Defined in: src/source/image_source.ts:98</p> <p>The tile size for the source.</p>"},{"location":"API/classes/ImageSource/#implementation-of_10","title":"Implementation of","text":"<p><code>Source</code>.<code>tileSize</code></p>"},{"location":"API/classes/KeyboardHandler/","title":"KeyboardHandler","text":"<p>Defined in: src/ui/handler/keyboard.ts:27</p> <p>The <code>KeyboardHandler</code> allows the user to zoom, rotate, and pan the map using the following keyboard shortcuts:</p> <ul> <li><code>=</code> / <code>+</code>: Increase the zoom level by 1.</li> <li><code>Shift-=</code> / <code>Shift-+</code>: Increase the zoom level by 2.</li> <li><code>-</code>: Decrease the zoom level by 1.</li> <li><code>Shift--</code>: Decrease the zoom level by 2.</li> <li>Arrow keys: Pan by 100 pixels.</li> <li><code>Shift+\u21e2</code>: Increase the rotation by 15 degrees.</li> <li><code>Shift+\u21e0</code>: Decrease the rotation by 15 degrees.</li> <li><code>Shift+\u21e1</code>: Increase the pitch by 10 degrees.</li> <li><code>Shift+\u21e3</code>: Decrease the pitch by 10 degrees.</li> </ul>"},{"location":"API/classes/KeyboardHandler/#implements","title":"Implements","text":"<ul> <li><code>Handler</code></li> </ul>"},{"location":"API/classes/KeyboardHandler/#methods","title":"Methods","text":""},{"location":"API/classes/KeyboardHandler/#disable","title":"disable()","text":"<p>disable(): <code>void</code></p> <p>Defined in: src/ui/handler/keyboard.ts:156</p> <p>Disables the \"keyboard rotate and zoom\" interaction.</p>"},{"location":"API/classes/KeyboardHandler/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/KeyboardHandler/#example","title":"Example","text":"<pre><code>map.keyboard.disable();\n</code></pre>"},{"location":"API/classes/KeyboardHandler/#implementation-of","title":"Implementation of","text":"<p><code>Handler.disable</code></p>"},{"location":"API/classes/KeyboardHandler/#disablerotation","title":"disableRotation()","text":"<p>disableRotation(): <code>void</code></p> <p>Defined in: src/ui/handler/keyboard.ts:192</p> <p>Disables the \"keyboard pan/rotate\" interaction, leaving the \"keyboard zoom\" interaction enabled.</p>"},{"location":"API/classes/KeyboardHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/KeyboardHandler/#example_1","title":"Example","text":"<pre><code>map.keyboard.disableRotation();\n</code></pre>"},{"location":"API/classes/KeyboardHandler/#enable","title":"enable()","text":"<p>enable(): <code>void</code></p> <p>Defined in: src/ui/handler/keyboard.ts:144</p> <p>Enables the \"keyboard rotate and zoom\" interaction.</p>"},{"location":"API/classes/KeyboardHandler/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/KeyboardHandler/#example_2","title":"Example","text":"<pre><code>map.keyboard.enable();\n</code></pre>"},{"location":"API/classes/KeyboardHandler/#implementation-of_1","title":"Implementation of","text":"<p><code>Handler.enable</code></p>"},{"location":"API/classes/KeyboardHandler/#enablerotation","title":"enableRotation()","text":"<p>enableRotation(): <code>void</code></p> <p>Defined in: src/ui/handler/keyboard.ts:205</p> <p>Enables the \"keyboard pan/rotate\" interaction.</p>"},{"location":"API/classes/KeyboardHandler/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/KeyboardHandler/#example_3","title":"Example","text":"<pre><code>map.keyboard.enable();\nmap.keyboard.enableRotation();\n</code></pre>"},{"location":"API/classes/KeyboardHandler/#isactive","title":"isActive()","text":"<p>isActive(): <code>boolean</code></p> <p>Defined in: src/ui/handler/keyboard.ts:179</p> <p>Returns true if the handler is enabled and has detected the start of a zoom/rotate gesture.</p>"},{"location":"API/classes/KeyboardHandler/#returns_4","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the handler is enabled and has detected the start of a zoom/rotate gesture.</p>"},{"location":"API/classes/KeyboardHandler/#implementation-of_2","title":"Implementation of","text":"<p><code>Handler</code>.<code>isActive</code></p>"},{"location":"API/classes/KeyboardHandler/#isenabled","title":"isEnabled()","text":"<p>isEnabled(): <code>boolean</code></p> <p>Defined in: src/ui/handler/keyboard.ts:168</p> <p>Returns a Boolean indicating whether the \"keyboard rotate and zoom\" interaction is enabled.</p>"},{"location":"API/classes/KeyboardHandler/#returns_5","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"keyboard rotate and zoom\" interaction is enabled.</p>"},{"location":"API/classes/KeyboardHandler/#implementation-of_3","title":"Implementation of","text":"<p><code>Handler.isEnabled</code></p>"},{"location":"API/classes/KeyboardHandler/#reset","title":"reset()","text":"<p>reset(): <code>void</code></p> <p>Defined in: src/ui/handler/keyboard.ts:46</p> <p><code>reset</code> can be called by the manager at any time and must reset everything to it's original state</p>"},{"location":"API/classes/KeyboardHandler/#returns_6","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/KeyboardHandler/#implementation-of_4","title":"Implementation of","text":"<p><code>Handler</code>.<code>reset</code></p>"},{"location":"API/classes/LngLat/","title":"LngLat","text":"<p>Defined in: src/geo/lng_lat.ts:53</p> <p>A <code>LngLat</code> object represents a given longitude and latitude coordinate, measured in degrees. These coordinates are based on the WGS84 (EPSG:4326) standard.</p> <p>MapLibre GL JS uses longitude, latitude coordinate order (as opposed to latitude, longitude) to match the GeoJSON specification.</p> <p>Note that any MapLibre GL JS method that accepts a <code>LngLat</code> object as an argument or option can also accept an <code>Array</code> of two numbers and will perform an implicit conversion. This flexible type is documented as LngLatLike.</p>"},{"location":"API/classes/LngLat/#example","title":"Example","text":"<pre><code>let ll = new LngLat(-123.9749, 40.7736);\nll.lng; // = -123.9749\n</code></pre>"},{"location":"API/classes/LngLat/#see","title":"See","text":"<ul> <li>Get coordinates of the mouse pointer</li> <li>Display a popup</li> <li>Create a timeline animation</li> </ul>"},{"location":"API/classes/LngLat/#constructors","title":"Constructors","text":""},{"location":"API/classes/LngLat/#constructor","title":"Constructor","text":"<p>new LngLat(<code>lng</code>: <code>number</code>, <code>lat</code>: <code>number</code>): <code>LngLat</code></p> <p>Defined in: src/geo/lng_lat.ts:68</p>"},{"location":"API/classes/LngLat/#parameters","title":"Parameters","text":"Parameter Type Description <code>lng</code> <code>number</code> Longitude, measured in degrees. <code>lat</code> <code>number</code> Latitude, measured in degrees."},{"location":"API/classes/LngLat/#returns","title":"Returns","text":"<p><code>LngLat</code></p>"},{"location":"API/classes/LngLat/#methods","title":"Methods","text":""},{"location":"API/classes/LngLat/#distanceto","title":"distanceTo()","text":"<p>distanceTo(<code>lngLat</code>: <code>LngLat</code>): <code>number</code></p> <p>Defined in: src/geo/lng_lat.ts:135</p> <p>Returns the approximate distance between a pair of coordinates in meters Uses the Haversine Formula (from R.W. Sinnott, \"Virtues of the Haversine\", Sky and Telescope, vol. 68, no. 2, 1984, p. 159)</p>"},{"location":"API/classes/LngLat/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>lngLat</code> <code>LngLat</code> coordinates to compute the distance to"},{"location":"API/classes/LngLat/#returns_1","title":"Returns","text":"<p><code>number</code></p> <p>Distance in meters between the two coordinates.</p>"},{"location":"API/classes/LngLat/#example_1","title":"Example","text":"<pre><code>let new_york = new LngLat(-74.0060, 40.7128);\nlet los_angeles = new LngLat(-118.2437, 34.0522);\nnew_york.distanceTo(los_angeles); // = 3935751.690893987, \"true distance\" using a non-spherical approximation is ~3966km\n</code></pre>"},{"location":"API/classes/LngLat/#toarray","title":"toArray()","text":"<p>toArray(): [<code>number</code>, <code>number</code>]</p> <p>Defined in: src/geo/lng_lat.ts:104</p> <p>Returns the coordinates represented as an array of two numbers.</p>"},{"location":"API/classes/LngLat/#returns_2","title":"Returns","text":"<p>[<code>number</code>, <code>number</code>]</p> <p>The coordinates represented as an array of longitude and latitude.</p>"},{"location":"API/classes/LngLat/#example_2","title":"Example","text":"<pre><code>let ll = new LngLat(-73.9749, 40.7736);\nll.toArray(); // = [-73.9749, 40.7736]\n</code></pre>"},{"location":"API/classes/LngLat/#tostring","title":"toString()","text":"<p>toString(): <code>string</code></p> <p>Defined in: src/geo/lng_lat.ts:118</p> <p>Returns the coordinates represent as a string.</p>"},{"location":"API/classes/LngLat/#returns_3","title":"Returns","text":"<p><code>string</code></p> <p>The coordinates represented as a string of the format <code>'LngLat(lng, lat)'</code>.</p>"},{"location":"API/classes/LngLat/#example_3","title":"Example","text":"<pre><code>let ll = new LngLat(-73.9749, 40.7736);\nll.toString(); // = \"LngLat(-73.9749, 40.7736)\"\n</code></pre>"},{"location":"API/classes/LngLat/#wrap","title":"wrap()","text":"<p>wrap(): <code>LngLat</code></p> <p>Defined in: src/geo/lng_lat.ts:90</p> <p>Returns a new <code>LngLat</code> object whose longitude is wrapped to the range (-180, 180).</p>"},{"location":"API/classes/LngLat/#returns_4","title":"Returns","text":"<p><code>LngLat</code></p> <p>The wrapped <code>LngLat</code> object.</p>"},{"location":"API/classes/LngLat/#example_4","title":"Example","text":"<pre><code>let ll = new LngLat(286.0251, 40.7736);\nlet wrapped = ll.wrap();\nwrapped.lng; // = -73.9749\n</code></pre>"},{"location":"API/classes/LngLat/#convert","title":"convert()","text":"<p><code>static</code> convert(<code>input</code>: <code>LngLatLike</code>): <code>LngLat</code></p> <p>Defined in: src/geo/lng_lat.ts:160</p> <p>Converts an array of two numbers or an object with <code>lng</code> and <code>lat</code> or <code>lon</code> and <code>lat</code> properties to a <code>LngLat</code> object.</p> <p>If a <code>LngLat</code> object is passed in, the function returns it unchanged.</p>"},{"location":"API/classes/LngLat/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>input</code> <code>LngLatLike</code> An array of two numbers or object to convert, or a <code>LngLat</code> object to return."},{"location":"API/classes/LngLat/#returns_5","title":"Returns","text":"<p><code>LngLat</code></p> <p>A new <code>LngLat</code> object, if a conversion occurred, or the original <code>LngLat</code> object.</p>"},{"location":"API/classes/LngLat/#example_5","title":"Example","text":"<pre><code>let arr = [-73.9749, 40.7736];\nlet ll = LngLat.convert(arr);\nll;   // = LngLat {lng: -73.9749, lat: 40.7736}\n</code></pre>"},{"location":"API/classes/LngLat/#properties","title":"Properties","text":""},{"location":"API/classes/LngLat/#lat","title":"lat","text":"<p>lat: <code>number</code></p> <p>Defined in: src/geo/lng_lat.ts:62</p> <p>Latitude, measured in degrees.</p>"},{"location":"API/classes/LngLat/#lng","title":"lng","text":"<p>lng: <code>number</code></p> <p>Defined in: src/geo/lng_lat.ts:57</p> <p>Longitude, measured in degrees.</p>"},{"location":"API/classes/LngLatBounds/","title":"LngLatBounds","text":"<p>Defined in: src/geo/lng_lat_bounds.ts:41</p> <p>A <code>LngLatBounds</code> object represents a geographical bounding box, defined by its southwest and northeast points in longitude and latitude.</p> <p>If no arguments are provided to the constructor, a <code>null</code> bounding box is created.</p> <p>Note that any Mapbox GL method that accepts a <code>LngLatBounds</code> object as an argument or option can also accept an <code>Array</code> of two LngLatLike constructs and will perform an implicit conversion. This flexible type is documented as LngLatBoundsLike.</p>"},{"location":"API/classes/LngLatBounds/#example","title":"Example","text":"<pre><code>let sw = new LngLat(-73.9876, 40.7661);\nlet ne = new LngLat(-73.9397, 40.8002);\nlet llb = new LngLatBounds(sw, ne);\n</code></pre>"},{"location":"API/classes/LngLatBounds/#constructors","title":"Constructors","text":""},{"location":"API/classes/LngLatBounds/#constructor","title":"Constructor","text":"<p>new LngLatBounds(<code>sw?</code>: [<code>number</code>, <code>number</code>, <code>number</code>, <code>number</code>] | <code>LngLatLike</code> | [<code>LngLatLike</code>, <code>LngLatLike</code>], <code>ne?</code>: <code>LngLatLike</code>): <code>LngLatBounds</code></p> <p>Defined in: src/geo/lng_lat_bounds.ts:65</p>"},{"location":"API/classes/LngLatBounds/#parameters","title":"Parameters","text":"Parameter Type Description <code>sw?</code> [<code>number</code>, <code>number</code>, <code>number</code>, <code>number</code>] | <code>LngLatLike</code> | [<code>LngLatLike</code>, <code>LngLatLike</code>] The southwest corner of the bounding box. OR array of 4 numbers in the order of west, south, east, north OR array of 2 LngLatLike: [sw,ne] <code>ne?</code> <code>LngLatLike</code> The northeast corner of the bounding box."},{"location":"API/classes/LngLatBounds/#returns","title":"Returns","text":"<p><code>LngLatBounds</code></p>"},{"location":"API/classes/LngLatBounds/#example_1","title":"Example","text":"<p><pre><code>let sw = new LngLat(-73.9876, 40.7661);\nlet ne = new LngLat(-73.9397, 40.8002);\nlet llb = new LngLatBounds(sw, ne);\n</code></pre> OR <pre><code>let llb = new LngLatBounds([-73.9876, 40.7661, -73.9397, 40.8002]);\n</code></pre> OR <pre><code>let llb = new LngLatBounds([sw, ne]);\n</code></pre></p>"},{"location":"API/classes/LngLatBounds/#methods","title":"Methods","text":""},{"location":"API/classes/LngLatBounds/#adjustantimeridian","title":"adjustAntiMeridian()","text":"<p>adjustAntiMeridian(): <code>LngLatBounds</code></p> <p>Defined in: src/geo/lng_lat_bounds.ts:342</p> <p>Adjusts the given bounds to handle the case where the bounds cross the 180th meridian (antimeridian).</p>"},{"location":"API/classes/LngLatBounds/#returns_1","title":"Returns","text":"<p><code>LngLatBounds</code></p> <p>The adjusted LngLatBounds</p>"},{"location":"API/classes/LngLatBounds/#example_2","title":"Example","text":"<pre><code>let bounds = new LngLatBounds([175.813127, -20.157768], [-178. 340903, -15.449124]);\nlet adjustedBounds = bounds.adjustAntiMeridian();\n// adjustedBounds will be: [[175.813127, -20.157768], [181.659097, -15.449124]]\n</code></pre>"},{"location":"API/classes/LngLatBounds/#contains","title":"contains()","text":"<p>contains(<code>lnglat</code>: <code>LngLatLike</code>): <code>boolean</code></p> <p>Defined in: src/geo/lng_lat_bounds.ts:277</p> <p>Check if the point is within the bounding box.</p>"},{"location":"API/classes/LngLatBounds/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>lnglat</code> <code>LngLatLike</code> geographic point to check against."},{"location":"API/classes/LngLatBounds/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the point is within the bounding box.</p>"},{"location":"API/classes/LngLatBounds/#example_3","title":"Example","text":"<pre><code>let llb = new LngLatBounds(\n  new LngLat(-73.9876, 40.7661),\n  new LngLat(-73.9397, 40.8002)\n);\n\nlet ll = new LngLat(-73.9567, 40.7789);\n\nconsole.log(llb.contains(ll)); // = true\n</code></pre>"},{"location":"API/classes/LngLatBounds/#extend","title":"extend()","text":"<p>extend(<code>obj</code>: <code>LngLatLike</code> | <code>LngLatBoundsLike</code>): <code>this</code></p> <p>Defined in: src/geo/lng_lat_bounds.ts:105</p> <p>Extend the bounds to include a given LngLatLike or LngLatBoundsLike.</p>"},{"location":"API/classes/LngLatBounds/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>obj</code> <code>LngLatLike</code> | <code>LngLatBoundsLike</code> object to extend to"},{"location":"API/classes/LngLatBounds/#returns_3","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/LngLatBounds/#getcenter","title":"getCenter()","text":"<p>getCenter(): <code>LngLat</code></p> <p>Defined in: src/geo/lng_lat_bounds.ts:161</p> <p>Returns the geographical coordinate equidistant from the bounding box's corners.</p>"},{"location":"API/classes/LngLatBounds/#returns_4","title":"Returns","text":"<p><code>LngLat</code></p> <p>The bounding box's center.</p>"},{"location":"API/classes/LngLatBounds/#example_4","title":"Example","text":"<pre><code>let llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\nllb.getCenter(); // = LngLat {lng: -73.96365, lat: 40.78315}\n</code></pre>"},{"location":"API/classes/LngLatBounds/#geteast","title":"getEast()","text":"<p>getEast(): <code>number</code></p> <p>Defined in: src/geo/lng_lat_bounds.ts:212</p> <p>Returns the east edge of the bounding box.</p>"},{"location":"API/classes/LngLatBounds/#returns_5","title":"Returns","text":"<p><code>number</code></p> <p>The east edge of the bounding box.</p>"},{"location":"API/classes/LngLatBounds/#getnorth","title":"getNorth()","text":"<p>getNorth(): <code>number</code></p> <p>Defined in: src/geo/lng_lat_bounds.ts:219</p> <p>Returns the north edge of the bounding box.</p>"},{"location":"API/classes/LngLatBounds/#returns_6","title":"Returns","text":"<p><code>number</code></p> <p>The north edge of the bounding box.</p>"},{"location":"API/classes/LngLatBounds/#getnortheast","title":"getNorthEast()","text":"<p>getNorthEast(): <code>LngLat</code></p> <p>Defined in: src/geo/lng_lat_bounds.ts:177</p> <p>Returns the northeast corner of the bounding box.</p>"},{"location":"API/classes/LngLatBounds/#returns_7","title":"Returns","text":"<p><code>LngLat</code></p> <p>The northeast corner of the bounding box.</p>"},{"location":"API/classes/LngLatBounds/#getnorthwest","title":"getNorthWest()","text":"<p>getNorthWest(): <code>LngLat</code></p> <p>Defined in: src/geo/lng_lat_bounds.ts:184</p> <p>Returns the northwest corner of the bounding box.</p>"},{"location":"API/classes/LngLatBounds/#returns_8","title":"Returns","text":"<p><code>LngLat</code></p> <p>The northwest corner of the bounding box.</p>"},{"location":"API/classes/LngLatBounds/#getsouth","title":"getSouth()","text":"<p>getSouth(): <code>number</code></p> <p>Defined in: src/geo/lng_lat_bounds.ts:205</p> <p>Returns the south edge of the bounding box.</p>"},{"location":"API/classes/LngLatBounds/#returns_9","title":"Returns","text":"<p><code>number</code></p> <p>The south edge of the bounding box.</p>"},{"location":"API/classes/LngLatBounds/#getsoutheast","title":"getSouthEast()","text":"<p>getSouthEast(): <code>LngLat</code></p> <p>Defined in: src/geo/lng_lat_bounds.ts:191</p> <p>Returns the southeast corner of the bounding box.</p>"},{"location":"API/classes/LngLatBounds/#returns_10","title":"Returns","text":"<p><code>LngLat</code></p> <p>The southeast corner of the bounding box.</p>"},{"location":"API/classes/LngLatBounds/#getsouthwest","title":"getSouthWest()","text":"<p>getSouthWest(): <code>LngLat</code></p> <p>Defined in: src/geo/lng_lat_bounds.ts:170</p> <p>Returns the southwest corner of the bounding box.</p>"},{"location":"API/classes/LngLatBounds/#returns_11","title":"Returns","text":"<p><code>LngLat</code></p> <p>The southwest corner of the bounding box.</p>"},{"location":"API/classes/LngLatBounds/#getwest","title":"getWest()","text":"<p>getWest(): <code>number</code></p> <p>Defined in: src/geo/lng_lat_bounds.ts:198</p> <p>Returns the west edge of the bounding box.</p>"},{"location":"API/classes/LngLatBounds/#returns_12","title":"Returns","text":"<p><code>number</code></p> <p>The west edge of the bounding box.</p>"},{"location":"API/classes/LngLatBounds/#isempty","title":"isEmpty()","text":"<p>isEmpty(): <code>boolean</code></p> <p>Defined in: src/geo/lng_lat_bounds.ts:256</p> <p>Check if the bounding box is an empty/<code>null</code>-type box.</p>"},{"location":"API/classes/LngLatBounds/#returns_13","title":"Returns","text":"<p><code>boolean</code></p> <p>True if bounds have been defined, otherwise false.</p>"},{"location":"API/classes/LngLatBounds/#setnortheast","title":"setNorthEast()","text":"<p>setNorthEast(<code>ne</code>: <code>LngLatLike</code>): <code>this</code></p> <p>Defined in: src/geo/lng_lat_bounds.ts:85</p> <p>Set the northeast corner of the bounding box</p>"},{"location":"API/classes/LngLatBounds/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>ne</code> <code>LngLatLike</code> a LngLatLike object describing the northeast corner of the bounding box."},{"location":"API/classes/LngLatBounds/#returns_14","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/LngLatBounds/#setsouthwest","title":"setSouthWest()","text":"<p>setSouthWest(<code>sw</code>: <code>LngLatLike</code>): <code>this</code></p> <p>Defined in: src/geo/lng_lat_bounds.ts:95</p> <p>Set the southwest corner of the bounding box</p>"},{"location":"API/classes/LngLatBounds/#parameters_4","title":"Parameters","text":"Parameter Type Description <code>sw</code> <code>LngLatLike</code> a LngLatLike object describing the southwest corner of the bounding box."},{"location":"API/classes/LngLatBounds/#returns_15","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/LngLatBounds/#toarray","title":"toArray()","text":"<p>toArray(): [<code>number</code>, <code>number</code>][]</p> <p>Defined in: src/geo/lng_lat_bounds.ts:232</p> <p>Returns the bounding box represented as an array.</p>"},{"location":"API/classes/LngLatBounds/#returns_16","title":"Returns","text":"<p>[<code>number</code>, <code>number</code>][]</p> <p>The bounding box represented as an array, consisting of the southwest and northeast coordinates of the bounding represented as arrays of numbers.</p>"},{"location":"API/classes/LngLatBounds/#example_5","title":"Example","text":"<pre><code>let llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\nllb.toArray(); // = [[-73.9876, 40.7661], [-73.9397, 40.8002]]\n</code></pre>"},{"location":"API/classes/LngLatBounds/#tostring","title":"toString()","text":"<p>toString(): <code>string</code></p> <p>Defined in: src/geo/lng_lat_bounds.ts:247</p> <p>Return the bounding box represented as a string.</p>"},{"location":"API/classes/LngLatBounds/#returns_17","title":"Returns","text":"<p><code>string</code></p> <p>The bounding box represents as a string of the format <code>'LngLatBounds(LngLat(lng, lat), LngLat(lng, lat))'</code>.</p>"},{"location":"API/classes/LngLatBounds/#example_6","title":"Example","text":"<pre><code>let llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\nllb.toString(); // = \"LngLatBounds(LngLat(-73.9876, 40.7661), LngLat(-73.9397, 40.8002))\"\n</code></pre>"},{"location":"API/classes/LngLatBounds/#convert","title":"convert()","text":"<p><code>static</code> convert(<code>input</code>: <code>LngLatBoundsLike</code>): <code>LngLatBounds</code></p> <p>Defined in: src/geo/lng_lat_bounds.ts:304</p> <p>Converts an array to a <code>LngLatBounds</code> object.</p> <p>If a <code>LngLatBounds</code> object is passed in, the function returns it unchanged.</p> <p>Internally, the function calls LngLat.convert to convert arrays to <code>LngLat</code> values.</p>"},{"location":"API/classes/LngLatBounds/#parameters_5","title":"Parameters","text":"Parameter Type Description <code>input</code> <code>LngLatBoundsLike</code> An array of two coordinates to convert, or a <code>LngLatBounds</code> object to return."},{"location":"API/classes/LngLatBounds/#returns_18","title":"Returns","text":"<p><code>LngLatBounds</code></p> <p>A new <code>LngLatBounds</code> object, if a conversion occurred, or the original <code>LngLatBounds</code> object.</p>"},{"location":"API/classes/LngLatBounds/#example_7","title":"Example","text":"<pre><code>let arr = [[-73.9876, 40.7661], [-73.9397, 40.8002]];\nlet llb = LngLatBounds.convert(arr); // = LngLatBounds {_sw: LngLat {lng: -73.9876, lat: 40.7661}, _ne: LngLat {lng: -73.9397, lat: 40.8002}}\n</code></pre>"},{"location":"API/classes/LngLatBounds/#fromlnglat","title":"fromLngLat()","text":"<p><code>static</code> fromLngLat(<code>center</code>: <code>LngLat</code>, <code>radius</code>: <code>number</code>): <code>LngLatBounds</code></p> <p>Defined in: src/geo/lng_lat_bounds.ts:322</p> <p>Returns a <code>LngLatBounds</code> from the coordinates extended by a given <code>radius</code>. The returned <code>LngLatBounds</code> completely contains the <code>radius</code>.</p>"},{"location":"API/classes/LngLatBounds/#parameters_6","title":"Parameters","text":"Parameter Type Default value Description <code>center</code> <code>LngLat</code> <code>undefined</code> center coordinates of the new bounds. <code>radius</code> <code>number</code> <code>0</code> Distance in meters from the coordinates to extend the bounds."},{"location":"API/classes/LngLatBounds/#returns_19","title":"Returns","text":"<p><code>LngLatBounds</code></p> <p>A new <code>LngLatBounds</code> object representing the coordinates extended by the <code>radius</code>.</p>"},{"location":"API/classes/LngLatBounds/#example_8","title":"Example","text":"<pre><code>let center = new LngLat(-73.9749, 40.7736);\nLngLatBounds.fromLngLat(100).toArray(); // = [[-73.97501862141328, 40.77351016847229], [-73.97478137858673, 40.77368983152771]]\n</code></pre>"},{"location":"API/classes/LogoControl/","title":"LogoControl","text":"<p>Defined in: src/ui/control/logo_control.ts:27</p> <p>A <code>LogoControl</code> is a control that adds the watermark.</p>"},{"location":"API/classes/LogoControl/#example","title":"Example","text":"<pre><code>map.addControl(new LogoControl({compact: false}));\n</code></pre>"},{"location":"API/classes/LogoControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/LogoControl/#constructors","title":"Constructors","text":""},{"location":"API/classes/LogoControl/#constructor","title":"Constructor","text":"<p>new LogoControl(<code>options</code>: <code>LogoControlOptions</code>): <code>LogoControl</code></p> <p>Defined in: src/ui/control/logo_control.ts:36</p>"},{"location":"API/classes/LogoControl/#parameters","title":"Parameters","text":"Parameter Type Description <code>options</code> <code>LogoControlOptions</code> the control's options"},{"location":"API/classes/LogoControl/#returns","title":"Returns","text":"<p><code>LogoControl</code></p>"},{"location":"API/classes/LogoControl/#methods","title":"Methods","text":""},{"location":"API/classes/LogoControl/#getdefaultposition","title":"getDefaultPosition()","text":"<p>getDefaultPosition(): <code>ControlPosition</code></p> <p>Defined in: src/ui/control/logo_control.ts:40</p> <p>Optionally provide a default position for this control. If this method is implemented and Map.addControl is called without the <code>position</code> parameter, the value returned by getDefaultPosition will be used as the control's position.</p>"},{"location":"API/classes/LogoControl/#returns_1","title":"Returns","text":"<p><code>ControlPosition</code></p> <p>a control position, one of the values valid in addControl.</p>"},{"location":"API/classes/LogoControl/#implementation-of","title":"Implementation of","text":"<p><code>IControl</code>.<code>getDefaultPosition</code></p>"},{"location":"API/classes/LogoControl/#onadd","title":"onAdd()","text":"<p>onAdd(<code>map</code>: <code>Map</code>): <code>HTMLElement</code></p> <p>Defined in: src/ui/control/logo_control.ts:45</p> <p>Register a control on the map and give it a chance to register event listeners and resources. This method is called by Map.addControl internally.</p>"},{"location":"API/classes/LogoControl/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> the Map this control will be added to"},{"location":"API/classes/LogoControl/#returns_2","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The control's container element. This should be created by the control and returned by onAdd without being attached to the DOM: the map will insert the control's element into the DOM as necessary.</p>"},{"location":"API/classes/LogoControl/#implementation-of_1","title":"Implementation of","text":"<p><code>IControl</code>.<code>onAdd</code></p>"},{"location":"API/classes/LogoControl/#onremove","title":"onRemove()","text":"<p>onRemove(): <code>void</code></p> <p>Defined in: src/ui/control/logo_control.ts:65</p> <p>Unregister a control on the map and give it a chance to detach event listeners and resources. This method is called by Map.removeControl internally.</p>"},{"location":"API/classes/LogoControl/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/LogoControl/#implementation-of_2","title":"Implementation of","text":"<p><code>IControl</code>.<code>onRemove</code></p>"},{"location":"API/classes/Map/","title":"Map","text":"<p>Defined in: src/ui/map.ts:491</p> <p>The <code>Map</code> object represents the map on your page. It exposes methods and properties that enable you to programmatically change the map, and fires events as users interact with it.</p> <p>You create a <code>Map</code> by specifying a <code>container</code> and other options, see MapOptions for the full list. Then MapLibre GL JS initializes the map on the page and returns your <code>Map</code> object.</p>"},{"location":"API/classes/Map/#example","title":"Example","text":"<pre><code>let map = new Map({\n  container: 'map',\n  center: [-122.420679, 37.772537],\n  zoom: 13,\n  style: style_object,\n  hash: true,\n  transformRequest: (url, resourceType)=&gt; {\n    if(resourceType === 'Source' &amp;&amp; url.startsWith('http://myHost')) {\n      return {\n       url: url.replace('http', 'https'),\n       headers: { 'my-custom-header': true},\n       credentials: 'include'  // Include cookies for cross-origin requests\n     }\n    }\n  }\n});\n</code></pre>"},{"location":"API/classes/Map/#see","title":"See","text":"<p>Display a map</p>"},{"location":"API/classes/Map/#extends","title":"Extends","text":"<ul> <li><code>Camera</code></li> </ul>"},{"location":"API/classes/Map/#accessors","title":"Accessors","text":""},{"location":"API/classes/Map/#repaint","title":"repaint","text":""},{"location":"API/classes/Map/#get-signature","title":"Get Signature","text":"<p>get repaint(): <code>boolean</code></p> <p>Defined in: src/ui/map.ts:3625</p> <p>Gets and sets a Boolean indicating whether the map will continuously repaint. This information is useful for analyzing performance.</p>"},{"location":"API/classes/Map/#returns","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/Map/#showcollisionboxes","title":"showCollisionBoxes","text":""},{"location":"API/classes/Map/#get-signature_1","title":"Get Signature","text":"<p>get showCollisionBoxes(): <code>boolean</code></p> <p>Defined in: src/ui/map.ts:3593</p> <p>Gets and sets a Boolean indicating whether the map will render boxes around all symbols in the data source, revealing which symbols were rendered or which were hidden due to collisions. This information is useful for debugging.</p>"},{"location":"API/classes/Map/#returns_1","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/Map/#showoverdrawinspector","title":"showOverdrawInspector","text":""},{"location":"API/classes/Map/#get-signature_2","title":"Get Signature","text":"<p>get showOverdrawInspector(): <code>boolean</code></p> <p>Defined in: src/ui/map.ts:3614</p> <p>Gets and sets a Boolean indicating whether the map should color-code each fragment to show how many times it has been shaded. White fragments have been shaded 8 or more times. Black fragments have been shaded 0 times. This information is useful for debugging.</p>"},{"location":"API/classes/Map/#returns_2","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/Map/#showpadding","title":"showPadding","text":""},{"location":"API/classes/Map/#get-signature_3","title":"Get Signature","text":"<p>get showPadding(): <code>boolean</code></p> <p>Defined in: src/ui/map.ts:3580</p> <p>Gets and sets a Boolean indicating whether the map will visualize the padding offsets.</p>"},{"location":"API/classes/Map/#returns_3","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/Map/#showtileboundaries","title":"showTileBoundaries","text":""},{"location":"API/classes/Map/#get-signature_4","title":"Get Signature","text":"<p>get showTileBoundaries(): <code>boolean</code></p> <p>Defined in: src/ui/map.ts:3569</p> <p>Gets and sets a Boolean indicating whether the map will render an outline around each tile and the tile ID. These tile boundaries are useful for debugging.</p> <p>The uncompressed file size of the first vector source is drawn in the top left corner of each tile, next to the tile ID.</p>"},{"location":"API/classes/Map/#example_1","title":"Example","text":"<pre><code>map.showTileBoundaries = true;\n</code></pre>"},{"location":"API/classes/Map/#returns_4","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/Map/#version","title":"version","text":""},{"location":"API/classes/Map/#get-signature_5","title":"Get Signature","text":"<p>get version(): <code>string</code></p> <p>Defined in: src/ui/map.ts:3640</p> <p>Returns the package version of the library</p>"},{"location":"API/classes/Map/#returns_5","title":"Returns","text":"<p><code>string</code></p> <p>Package version of the library</p>"},{"location":"API/classes/Map/#events","title":"Events","text":""},{"location":"API/classes/Map/#off","title":"off()","text":""},{"location":"API/classes/Map/#call-signature","title":"Call Signature","text":"<p>off&lt;<code>T</code>&gt;(<code>type</code>: <code>T</code>, <code>layer</code>: <code>string</code>, <code>listener</code>: (<code>ev</code>: <code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code>): <code>this</code></p> <p>Defined in: src/ui/map.ts:1686</p> <p>Removes an event listener for events previously added with <code>{@link Map.on}</code>.</p>"},{"location":"API/classes/Map/#type-parameters","title":"Type Parameters","text":"Type Parameter <code>T</code> extends keyof <code>MapLayerEventType</code>"},{"location":"API/classes/Map/#parameters","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>T</code> The event type previously used to install the listener. <code>layer</code> <code>string</code> The layer ID or listener previously used to install the listener. <code>listener</code> (<code>ev</code>: <code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code> The function previously installed as a listener."},{"location":"API/classes/Map/#returns_6","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#overrides","title":"Overrides","text":"<p><code>Camera.off</code></p>"},{"location":"API/classes/Map/#call-signature_1","title":"Call Signature","text":"<p>off&lt;<code>T</code>&gt;(<code>type</code>: <code>T</code>, <code>layers</code>: <code>string</code>[], <code>listener</code>: (<code>ev</code>: <code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code>): <code>this</code></p> <p>Defined in: src/ui/map.ts:1699</p> <p>Overload of the <code>off</code> method that allows to remove an event created with multiple layers. Provide the same layer IDs as to <code>on</code> or <code>once</code>, when the listener was registered.</p>"},{"location":"API/classes/Map/#type-parameters_1","title":"Type Parameters","text":"Type Parameter <code>T</code> extends keyof <code>MapLayerEventType</code>"},{"location":"API/classes/Map/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>T</code> The type of the event. <code>layers</code> <code>string</code>[] The layer IDs previously used to install the listener. <code>listener</code> (<code>ev</code>: <code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code> The function previously installed as a listener."},{"location":"API/classes/Map/#returns_7","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#overrides_1","title":"Overrides","text":"<p><code>Camera.off</code></p>"},{"location":"API/classes/Map/#call-signature_2","title":"Call Signature","text":"<p>off&lt;<code>T</code>&gt;(<code>type</code>: <code>T</code>, <code>listener</code>: (<code>ev</code>: <code>MapEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code>): <code>this</code></p> <p>Defined in: src/ui/map.ts:1710</p> <p>Overload of the <code>off</code> method that allows to remove an event created without specifying a layer.</p>"},{"location":"API/classes/Map/#type-parameters_2","title":"Type Parameters","text":"Type Parameter <code>T</code> extends keyof <code>MapEventType</code>"},{"location":"API/classes/Map/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>T</code> The type of the event. <code>listener</code> (<code>ev</code>: <code>MapEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code> The function previously installed as a listener."},{"location":"API/classes/Map/#returns_8","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#overrides_2","title":"Overrides","text":"<p><code>Camera.off</code></p>"},{"location":"API/classes/Map/#call-signature_3","title":"Call Signature","text":"<p>off(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>this</code></p> <p>Defined in: src/ui/map.ts:1717</p> <p>Overload of the <code>off</code> method that allows to remove an event created without specifying a layer.</p>"},{"location":"API/classes/Map/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The type of the event. <code>listener</code> <code>Listener</code> The function previously installed as a listener."},{"location":"API/classes/Map/#returns_9","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#overrides_3","title":"Overrides","text":"<p><code>Camera.off</code></p>"},{"location":"API/classes/Map/#on","title":"on()","text":""},{"location":"API/classes/Map/#call-signature_4","title":"Call Signature","text":"<p>on&lt;<code>T</code>&gt;(<code>type</code>: <code>T</code>, <code>layer</code>: <code>string</code>, <code>listener</code>: (<code>ev</code>: <code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code>): <code>Subscription</code></p> <p>Defined in: src/ui/map.ts:1552</p> <p>Adds a listener for events of a specified type, optionally limited to features in a specified style layer(s). See MapEventType and MapLayerEventType for a full list of events and their description.</p> Event Compatible with <code>layerId</code> <code>mousedown</code> yes <code>mouseup</code> yes <code>mouseover</code> yes <code>mouseout</code> yes <code>mousemove</code> yes <code>mouseenter</code> yes (required) <code>mouseleave</code> yes (required) <code>click</code> yes <code>dblclick</code> yes <code>contextmenu</code> yes <code>touchstart</code> yes <code>touchend</code> yes <code>touchcancel</code> yes <code>wheel</code> <code>resize</code> <code>remove</code> <code>touchmove</code> <code>movestart</code> <code>move</code> <code>moveend</code> <code>dragstart</code> <code>drag</code> <code>dragend</code> <code>zoomstart</code> <code>zoom</code> <code>zoomend</code> <code>rotatestart</code> <code>rotate</code> <code>rotateend</code> <code>pitchstart</code> <code>pitch</code> <code>pitchend</code> <code>boxzoomstart</code> <code>boxzoomend</code> <code>boxzoomcancel</code> <code>webglcontextlost</code> <code>webglcontextrestored</code> <code>load</code> <code>render</code> <code>idle</code> <code>error</code> <code>data</code> <code>styledata</code> <code>sourcedata</code> <code>dataloading</code> <code>styledataloading</code> <code>sourcedataloading</code> <code>styleimagemissing</code> <code>dataabort</code> <code>sourcedataabort</code>"},{"location":"API/classes/Map/#type-parameters_3","title":"Type Parameters","text":"Type Parameter <code>T</code> extends keyof <code>MapLayerEventType</code>"},{"location":"API/classes/Map/#parameters_4","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>T</code> The event type to listen for. Events compatible with the optional <code>layerId</code> parameter are triggered when the cursor enters a visible portion of the specified layer from outside that layer or outside the map canvas. <code>layer</code> <code>string</code> The ID of a style layer or a listener if no ID is provided. Event will only be triggered if its location is within a visible feature in this layer. The event will have a <code>features</code> property containing an array of the matching features. If <code>layer</code> is not supplied, the event will not have a <code>features</code> property. Please note that many event types are not compatible with the optional <code>layer</code> parameter. <code>listener</code> (<code>ev</code>: <code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code> The function to be called when the event is fired."},{"location":"API/classes/Map/#returns_10","title":"Returns","text":"<p><code>Subscription</code></p>"},{"location":"API/classes/Map/#examples","title":"Examples","text":"<pre><code>// Set an event listener that will fire\n// when the map has finished loading\nmap.on('load', () =&gt; {\n  // Once the map has finished loading,\n  // add a new layer\n  map.addLayer({\n    id: 'points-of-interest',\n    source: {\n      type: 'vector',\n      url: 'https://maplibre.org/maplibre-style-spec/'\n    },\n    'source-layer': 'poi_label',\n    type: 'circle',\n    paint: {\n      // MapLibre Style Specification paint properties\n    },\n    layout: {\n      // MapLibre Style Specification layout properties\n    }\n  });\n});\n</code></pre> <pre><code>// Set an event listener that will fire\n// when a feature on the countries layer of the map is clicked\nmap.on('click', 'countries', (e) =&gt; {\n  new Popup()\n    .setLngLat(e.lngLat)\n    .setHTML(`Country name: ${e.features[0].properties.name}`)\n    .addTo(map);\n});\n</code></pre>"},{"location":"API/classes/Map/#see_1","title":"See","text":"<ul> <li>Display popup on click</li> <li>Center the map on a clicked symbol</li> <li>Create a hover effect</li> <li>Create a draggable marker</li> </ul>"},{"location":"API/classes/Map/#overrides_4","title":"Overrides","text":"<p><code>Camera.on</code></p>"},{"location":"API/classes/Map/#call-signature_5","title":"Call Signature","text":"<p>on&lt;<code>T</code>&gt;(<code>type</code>: <code>T</code>, <code>layerIds</code>: <code>string</code>[], <code>listener</code>: (<code>ev</code>: <code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code>): <code>Subscription</code></p> <p>Defined in: src/ui/map.ts:1564</p> <p>Overload of the <code>on</code> method that allows to listen to events specifying multiple layers.</p>"},{"location":"API/classes/Map/#type-parameters_4","title":"Type Parameters","text":"Type Parameter <code>T</code> extends keyof <code>MapLayerEventType</code>"},{"location":"API/classes/Map/#parameters_5","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>T</code> The type of the event. <code>layerIds</code> <code>string</code>[] The array of style layer IDs. <code>listener</code> (<code>ev</code>: <code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code> The listener callback."},{"location":"API/classes/Map/#returns_11","title":"Returns","text":"<p><code>Subscription</code></p>"},{"location":"API/classes/Map/#overrides_5","title":"Overrides","text":"<p><code>Camera.on</code></p>"},{"location":"API/classes/Map/#call-signature_6","title":"Call Signature","text":"<p>on&lt;<code>T</code>&gt;(<code>type</code>: <code>T</code>, <code>listener</code>: (<code>ev</code>: <code>MapEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code>): <code>Subscription</code></p> <p>Defined in: src/ui/map.ts:1575</p> <p>Overload of the <code>on</code> method that allows to listen to events without specifying a layer.</p>"},{"location":"API/classes/Map/#type-parameters_5","title":"Type Parameters","text":"Type Parameter <code>T</code> extends keyof <code>MapEventType</code>"},{"location":"API/classes/Map/#parameters_6","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>T</code> The type of the event. <code>listener</code> (<code>ev</code>: <code>MapEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code> The listener callback."},{"location":"API/classes/Map/#returns_12","title":"Returns","text":"<p><code>Subscription</code></p>"},{"location":"API/classes/Map/#overrides_6","title":"Overrides","text":"<p><code>Camera.on</code></p>"},{"location":"API/classes/Map/#call-signature_7","title":"Call Signature","text":"<p>on(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>Subscription</code></p> <p>Defined in: src/ui/map.ts:1582</p> <p>Overload of the <code>on</code> method that allows to listen to events without specifying a layer.</p>"},{"location":"API/classes/Map/#parameters_7","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The type of the event. <code>listener</code> <code>Listener</code> The listener callback."},{"location":"API/classes/Map/#returns_13","title":"Returns","text":"<p><code>Subscription</code></p>"},{"location":"API/classes/Map/#overrides_7","title":"Overrides","text":"<p><code>Camera.on</code></p>"},{"location":"API/classes/Map/#once","title":"once()","text":""},{"location":"API/classes/Map/#call-signature_8","title":"Call Signature","text":"<p>once&lt;<code>T</code>&gt;(<code>type</code>: <code>T</code>, <code>layer</code>: <code>string</code>, <code>listener?</code>: (<code>ev</code>: <code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code>): <code>Map</code> | <code>Promise</code>&lt;<code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>&gt;</p> <p>Defined in: src/ui/map.ts:1621</p> <p>Adds a listener that will be called only once to a specified event type, optionally limited to features in a specified style layer.</p>"},{"location":"API/classes/Map/#type-parameters_6","title":"Type Parameters","text":"Type Parameter <code>T</code> extends keyof <code>MapLayerEventType</code>"},{"location":"API/classes/Map/#parameters_8","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>T</code> The event type to listen for; one of <code>'mousedown'</code>, <code>'mouseup'</code>, <code>'click'</code>, <code>'dblclick'</code>, <code>'mousemove'</code>, <code>'mouseenter'</code>, <code>'mouseleave'</code>, <code>'mouseover'</code>, <code>'mouseout'</code>, <code>'contextmenu'</code>, <code>'touchstart'</code>, <code>'touchend'</code>, or <code>'touchcancel'</code>. <code>mouseenter</code> and <code>mouseover</code> events are triggered when the cursor enters a visible portion of the specified layer from outside that layer or outside the map canvas. <code>mouseleave</code> and <code>mouseout</code> events are triggered when the cursor leaves a visible portion of the specified layer, or leaves the map canvas. <code>layer</code> <code>string</code> The ID of a style layer or a listener if no ID is provided. Only events whose location is within a visible feature in this layer will trigger the listener. The event will have a <code>features</code> property containing an array of the matching features. <code>listener?</code> (<code>ev</code>: <code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code> The function to be called when the event is fired."},{"location":"API/classes/Map/#returns_14","title":"Returns","text":"<p><code>Map</code> | <code>Promise</code>&lt;<code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>&gt;</p> <p><code>this</code> if listener is provided, promise otherwise to allow easier usage of async/await</p>"},{"location":"API/classes/Map/#overrides_8","title":"Overrides","text":"<p><code>Camera.once</code></p>"},{"location":"API/classes/Map/#call-signature_9","title":"Call Signature","text":"<p>once&lt;<code>T</code>&gt;(<code>type</code>: <code>T</code>, <code>layerIds</code>: <code>string</code>[], <code>listener?</code>: (<code>ev</code>: <code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>Map</code></p> <p>Defined in: src/ui/map.ts:1633</p> <p>Overload of the <code>once</code> method that allows to listen to events specifying multiple layers.</p>"},{"location":"API/classes/Map/#type-parameters_7","title":"Type Parameters","text":"Type Parameter <code>T</code> extends keyof <code>MapLayerEventType</code>"},{"location":"API/classes/Map/#parameters_9","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>T</code> The type of the event. <code>layerIds</code> <code>string</code>[] The array of style layer IDs. <code>listener?</code> (<code>ev</code>: <code>MapLayerEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code> The listener callback."},{"location":"API/classes/Map/#returns_15","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>Map</code></p>"},{"location":"API/classes/Map/#overrides_9","title":"Overrides","text":"<p><code>Camera.once</code></p>"},{"location":"API/classes/Map/#call-signature_10","title":"Call Signature","text":"<p>once&lt;<code>T</code>&gt;(<code>type</code>: <code>T</code>, <code>listener?</code>: (<code>ev</code>: <code>MapEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>Map</code></p> <p>Defined in: src/ui/map.ts:1644</p> <p>Overload of the <code>once</code> method that allows to listen to events without specifying a layer.</p>"},{"location":"API/classes/Map/#type-parameters_8","title":"Type Parameters","text":"Type Parameter <code>T</code> extends keyof <code>MapEventType</code>"},{"location":"API/classes/Map/#parameters_10","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>T</code> The type of the event. <code>listener?</code> (<code>ev</code>: <code>MapEventType</code>[<code>T</code>] &amp; <code>Object</code>) =&gt; <code>void</code> The listener callback."},{"location":"API/classes/Map/#returns_16","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>Map</code></p>"},{"location":"API/classes/Map/#overrides_10","title":"Overrides","text":"<p><code>Camera.once</code></p>"},{"location":"API/classes/Map/#call-signature_11","title":"Call Signature","text":"<p>once(<code>type</code>: <code>string</code>, <code>listener?</code>: <code>Listener</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>Map</code></p> <p>Defined in: src/ui/map.ts:1651</p> <p>Overload of the <code>once</code> method that allows to listen to events without specifying a layer.</p>"},{"location":"API/classes/Map/#parameters_11","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The type of the event. <code>listener?</code> <code>Listener</code> The listener callback."},{"location":"API/classes/Map/#returns_17","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>Map</code></p>"},{"location":"API/classes/Map/#overrides_11","title":"Overrides","text":"<p><code>Camera.once</code></p>"},{"location":"API/classes/Map/#methods","title":"Methods","text":""},{"location":"API/classes/Map/#addcontrol","title":"addControl()","text":"<p>addControl(<code>control</code>: <code>IControl</code>, <code>position?</code>: <code>ControlPosition</code>): <code>Map</code></p> <p>Defined in: src/ui/map.ts:840</p> <p>Adds an IControl to the map, calling <code>control.onAdd(this)</code>.</p> <p>An ErrorEvent will be fired if the image parameter is invalid.</p>"},{"location":"API/classes/Map/#parameters_12","title":"Parameters","text":"Parameter Type Description <code>control</code> <code>IControl</code> The IControl to add. <code>position?</code> <code>ControlPosition</code> position on the map to which the control will be added. Valid values are <code>'top-left'</code>, <code>'top-right'</code>, <code>'bottom-left'</code>, and <code>'bottom-right'</code>. Defaults to <code>'top-right'</code>."},{"location":"API/classes/Map/#returns_18","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/Map/#example_2","title":"Example","text":"<p>Add zoom and rotation controls to the map. <pre><code>map.addControl(new NavigationControl());\n</code></pre></p>"},{"location":"API/classes/Map/#see_2","title":"See","text":"<p>Display map navigation controls</p>"},{"location":"API/classes/Map/#addimage","title":"addImage()","text":"<p>addImage(<code>id</code>: <code>string</code>, <code>image</code>: <code>ImageBitmap</code> | <code>HTMLImageElement</code> | <code>ImageData</code> | <code>StyleImageInterface</code> | { <code>data</code>: <code>Uint8Array</code>&lt;<code>ArrayBufferLike</code>&gt; | <code>Uint8ClampedArray</code>&lt;<code>ArrayBufferLike</code>&gt;; <code>height</code>: <code>number</code>; <code>width</code>: <code>number</code>; }, <code>options</code>: <code>Partial</code>&lt;<code>StyleImageMetadata</code>&gt;): <code>this</code></p> <p>Defined in: src/ui/map.ts:2357</p> <p>Add an image to the style. This image can be displayed on the map like any other icon in the style's sprite using the image's ID with <code>icon-image</code>, <code>background-pattern</code>, <code>fill-pattern</code>, or <code>line-pattern</code>.</p> <p>A ErrorEvent event will be fired if the image parameter is invalid or there is not enough space in the sprite to add this image.</p>"},{"location":"API/classes/Map/#parameters_13","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> The ID of the image. <code>image</code> <code>ImageBitmap</code> | <code>HTMLImageElement</code> | <code>ImageData</code> | <code>StyleImageInterface</code> | { <code>data</code>: <code>Uint8Array</code>&lt;<code>ArrayBufferLike</code>&gt; | <code>Uint8ClampedArray</code>&lt;<code>ArrayBufferLike</code>&gt;; <code>height</code>: <code>number</code>; <code>width</code>: <code>number</code>; } The image as an <code>HTMLImageElement</code>, <code>ImageData</code>, <code>ImageBitmap</code> or object with <code>width</code>, <code>height</code>, and <code>data</code> properties with the same format as <code>ImageData</code>. <code>options</code> <code>Partial</code>&lt;<code>StyleImageMetadata</code>&gt; Options object."},{"location":"API/classes/Map/#returns_19","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_3","title":"Example","text":"<pre><code>// If the style's sprite does not already contain an image with ID 'cat',\n// add the image 'cat-icon.png' to the style's sprite with the ID 'cat'.\nconst image = await map.loadImage('https://upload.wikimedia.org/wikipedia/commons/thumb/6/60/Cat_silhouette.svg/400px-Cat_silhouette.svg.png');\nif (!map.hasImage('cat')) map.addImage('cat', image.data);\n\n// Add a stretchable image that can be used with `icon-text-fit`\n// In this example, the image is 600px wide by 400px high.\nconst image = await map.loadImage('https://upload.wikimedia.org/wikipedia/commons/8/89/Black_and_White_Boxed_%28bordered%29.png');\nif (map.hasImage('border-image')) return;\nmap.addImage('border-image', image.data, {\n    content: [16, 16, 300, 384], // place text over left half of image, avoiding the 16px border\n    stretchX: [[16, 584]], // stretch everything horizontally except the 16px border\n    stretchY: [[16, 384]], // stretch everything vertically except the 16px border\n});\n</code></pre>"},{"location":"API/classes/Map/#see_3","title":"See","text":"<ul> <li>Use <code>HTMLImageElement</code>: Add an icon to the map</li> <li>Use <code>ImageData</code>: Add a generated icon to the map</li> </ul>"},{"location":"API/classes/Map/#addlayer","title":"addLayer()","text":"<p>addLayer(<code>layer</code>: <code>AddLayerObject</code>, <code>beforeId?</code>: <code>string</code>): <code>Map</code></p> <p>Defined in: src/ui/map.ts:2637</p> <p>Adds a MapLibre style layer to the map's style.</p> <p>A layer defines how data from a specified source will be styled. Read more about layer types and available paint and layout properties in the MapLibre Style Specification.</p>"},{"location":"API/classes/Map/#parameters_14","title":"Parameters","text":"Parameter Type Description <code>layer</code> <code>AddLayerObject</code> The layer to add, conforming to either the MapLibre Style Specification's layer definition or, less commonly, the CustomLayerInterface specification. Can also be a layer definition with an embedded source definition. The MapLibre Style Specification's layer definition is appropriate for most layers. <code>beforeId?</code> <code>string</code> The ID of an existing layer to insert the new layer before, resulting in the new layer appearing visually beneath the existing layer. If this argument is not specified, the layer will be appended to the end of the layers array and appear visually above all other layers."},{"location":"API/classes/Map/#returns_20","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/Map/#examples_1","title":"Examples","text":"<p>Add a circle layer with a vector source <pre><code>map.addLayer({\n  id: 'points-of-interest',\n  source: {\n    type: 'vector',\n    url: 'https://demotiles.maplibre.org/tiles/tiles.json'\n  },\n  'source-layer': 'poi_label',\n  type: 'circle',\n  paint: {\n    // MapLibre Style Specification paint properties\n  },\n  layout: {\n    // MapLibre Style Specification layout properties\n  }\n});\n</code></pre></p> <p>Define a source before using it to create a new layer <pre><code>map.addSource('state-data', {\n  type: 'geojson',\n  data: 'path/to/data.geojson'\n});\n\nmap.addLayer({\n  id: 'states',\n  // References the GeoJSON source defined above\n  // and does not require a `source-layer`\n  source: 'state-data',\n  type: 'symbol',\n  layout: {\n    // Set the label content to the\n    // feature's `name` property\n    text-field: ['get', 'name']\n  }\n});\n</code></pre></p> <p>Add a new symbol layer before an existing layer <pre><code>map.addLayer({\n  id: 'states',\n  // References a source that's already been defined\n  source: 'state-data',\n  type: 'symbol',\n  layout: {\n    // Set the label content to the\n    // feature's `name` property\n    text-field: ['get', 'name']\n  }\n// Add the layer before the existing `cities` layer\n}, 'cities');\n</code></pre></p>"},{"location":"API/classes/Map/#see_4","title":"See","text":"<ul> <li>Create and style clusters</li> <li>Add a vector tile source</li> <li>Add a WMS source</li> </ul>"},{"location":"API/classes/Map/#addsource","title":"addSource()","text":"<p>addSource(<code>id</code>: <code>string</code>, <code>source</code>: <code>SourceSpecification</code> | <code>CanvasSourceSpecification</code>): <code>this</code></p> <p>Defined in: src/ui/map.ts:2090</p> <p>Adds a source to the map's style.</p> <p>Events triggered:</p> <p>Triggers the <code>source.add</code> event.</p>"},{"location":"API/classes/Map/#parameters_15","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> The ID of the source to add. Must not conflict with existing sources. <code>source</code> <code>SourceSpecification</code> | <code>CanvasSourceSpecification</code> The source object, conforming to the MapLibre Style Specification's source definition or CanvasSourceSpecification."},{"location":"API/classes/Map/#returns_21","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#examples_2","title":"Examples","text":"<pre><code>map.addSource('my-data', {\n  type: 'vector',\n  url: 'https://demotiles.maplibre.org/tiles/tiles.json'\n});\n</code></pre> <pre><code>map.addSource('my-data', {\n  \"type\": \"geojson\",\n  \"data\": {\n    \"type\": \"Feature\",\n    \"geometry\": {\n      \"type\": \"Point\",\n      \"coordinates\": [-77.0323, 38.9131]\n    },\n    \"properties\": {\n      \"title\": \"Mapbox DC\",\n      \"marker-symbol\": \"monument\"\n    }\n  }\n});\n</code></pre>"},{"location":"API/classes/Map/#see_5","title":"See","text":"<p>GeoJSON source: Add live realtime data</p>"},{"location":"API/classes/Map/#addsprite","title":"addSprite()","text":"<p>addSprite(<code>id</code>: <code>string</code>, <code>url</code>: <code>string</code>, <code>options</code>: <code>StyleSetterOptions</code>): <code>this</code></p> <p>Defined in: src/ui/map.ts:2880</p> <p>Adds a sprite to the map's style. Fires the <code>style</code> event.</p>"},{"location":"API/classes/Map/#parameters_16","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> The ID of the sprite to add. Must not conflict with existing sprites. <code>url</code> <code>string</code> The URL to load the sprite from <code>options</code> <code>StyleSetterOptions</code> Options object."},{"location":"API/classes/Map/#returns_22","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_4","title":"Example","text":"<pre><code>map.addSprite('sprite-two', 'http://example.com/sprite-two');\n</code></pre>"},{"location":"API/classes/Map/#aretilesloaded","title":"areTilesLoaded()","text":"<p>areTilesLoaded(): <code>boolean</code></p> <p>Defined in: src/ui/map.ts:2212</p> <p>Returns a Boolean indicating whether all tiles in the viewport from all sources on the style are loaded.</p>"},{"location":"API/classes/Map/#returns_23","title":"Returns","text":"<p><code>boolean</code></p> <p>A Boolean indicating whether all tiles are loaded.</p>"},{"location":"API/classes/Map/#example_5","title":"Example","text":"<pre><code>let tilesLoaded = map.areTilesLoaded();\n</code></pre>"},{"location":"API/classes/Map/#calculatecameraoptionsfromcameralnglataltrotation","title":"calculateCameraOptionsFromCameraLngLatAltRotation()","text":"<p>calculateCameraOptionsFromCameraLngLatAltRotation(<code>cameraLngLat</code>: <code>LngLatLike</code>, <code>cameraAlt</code>: <code>number</code>, <code>bearing</code>: <code>number</code>, <code>pitch</code>: <code>number</code>, <code>roll?</code>: <code>number</code>): <code>CameraOptions</code></p> <p>Defined in: src/ui/camera.ts:1056</p> <p>Given a camera position and rotation, calculates zoom and center point and returns them as CameraOptions.</p>"},{"location":"API/classes/Map/#parameters_17","title":"Parameters","text":"Parameter Type Description <code>cameraLngLat</code> <code>LngLatLike</code> The lng, lat of the camera to look from <code>cameraAlt</code> <code>number</code> The altitude of the camera to look from, in meters above sea level <code>bearing</code> <code>number</code> Bearing of the camera, in degrees <code>pitch</code> <code>number</code> Pitch of the camera, in degrees <code>roll?</code> <code>number</code> Roll of the camera, in degrees"},{"location":"API/classes/Map/#returns_24","title":"Returns","text":"<p><code>CameraOptions</code></p> <p>the calculated camera options</p>"},{"location":"API/classes/Map/#example_6","title":"Example","text":"<pre><code>// Calculate options to look from camera position(1\u00b0, 0\u00b0, 1000m) with bearing = 90\u00b0, pitch = 30\u00b0, and roll = 45\u00b0\nconst cameraLngLat = new LngLat(1, 0);\nconst cameraAltitude = 1000;\nconst bearing = 90;\nconst pitch = 30;\nconst roll = 45;\nconst cameraOptions = map.calculateCameraOptionsFromCameraLngLatAltRotation(cameraLngLat, cameraAltitude, bearing, pitch, roll);\n// Apply calculated options\nmap.jumpTo(cameraOptions);\n</code></pre>"},{"location":"API/classes/Map/#inherited-from","title":"Inherited from","text":"<p><code>Camera.calculateCameraOptionsFromCameraLngLatAltRotation</code></p>"},{"location":"API/classes/Map/#calculatecameraoptionsfromto","title":"calculateCameraOptionsFromTo()","text":"<p>calculateCameraOptionsFromTo(<code>from</code>: <code>LngLat</code>, <code>altitudeFrom</code>: <code>number</code>, <code>to</code>: <code>LngLat</code>, <code>altitudeTo?</code>: <code>number</code>): <code>CameraOptions</code></p> <p>Defined in: src/ui/map.ts:926</p> <p>Given a camera 'from' position and a position to look at (<code>to</code>), calculates zoom and camera rotation and returns them as CameraOptions.</p>"},{"location":"API/classes/Map/#parameters_18","title":"Parameters","text":"Parameter Type Description <code>from</code> <code>LngLat</code> The camera to look from <code>altitudeFrom</code> <code>number</code> The altitude of the camera to look from <code>to</code> <code>LngLat</code> The center to look at <code>altitudeTo?</code> <code>number</code> Optional altitude of the center to look at. If none given the ground height will be used."},{"location":"API/classes/Map/#returns_25","title":"Returns","text":"<p><code>CameraOptions</code></p> <p>the calculated camera options</p>"},{"location":"API/classes/Map/#example_7","title":"Example","text":"<pre><code>// Calculate options to look from (1\u00b0, 0\u00b0, 1000m) to (1\u00b0, 1\u00b0, 0m)\nconst cameraLngLat = new LngLat(1, 0);\nconst cameraAltitude = 1000;\nconst targetLngLat = new LngLat(1, 1);\nconst targetAltitude = 0;\nconst cameraOptions = map.calculateCameraOptionsFromTo(cameraLngLat, cameraAltitude, targetLngLat, targetAltitude);\n// Apply calculated options\nmap.jumpTo(cameraOptions);\n</code></pre>"},{"location":"API/classes/Map/#overrides_12","title":"Overrides","text":"<p><code>Camera.calculateCameraOptionsFromTo</code></p>"},{"location":"API/classes/Map/#cameraforbounds","title":"cameraForBounds()","text":"<p>cameraForBounds(<code>bounds</code>: <code>LngLatBoundsLike</code>, <code>options?</code>: <code>CameraForBoundsOptions</code>): <code>CenterZoomBearing</code></p> <p>Defined in: src/ui/camera.ts:765</p>"},{"location":"API/classes/Map/#parameters_19","title":"Parameters","text":"Parameter Type Description <code>bounds</code> <code>LngLatBoundsLike</code> Calculate the center for these bounds in the viewport and use the highest zoom level up to and including Map.getMaxZoom that fits in the viewport. LngLatBounds represent a box that is always axis-aligned with bearing 0. Bounds will be taken in [sw, ne] order. Southwest point will always be to the left of the northeast point. <code>options?</code> <code>CameraForBoundsOptions</code> Options object"},{"location":"API/classes/Map/#returns_26","title":"Returns","text":"<p><code>CenterZoomBearing</code></p> <p>If map is able to fit to provided bounds, returns <code>center</code>, <code>zoom</code>, and <code>bearing</code>. If map is unable to fit, method will warn and return undefined.</p>"},{"location":"API/classes/Map/#example_8","title":"Example","text":"<pre><code>let bbox = [[-79, 43], [-73, 45]];\nlet newCameraTransform = map.cameraForBounds(bbox, {\n  padding: {top: 10, bottom:25, left: 15, right: 5}\n});\n</code></pre>"},{"location":"API/classes/Map/#inherited-from_1","title":"Inherited from","text":"<p><code>Camera.cameraForBounds</code></p>"},{"location":"API/classes/Map/#coveringtiles","title":"coveringTiles()","text":"<p>coveringTiles(<code>options</code>: <code>CoveringTilesOptions</code>): <code>OverscaledTileID</code>[]</p> <p>Defined in: src/ui/map.ts:922</p> <p>Returns an array of <code>OverscaledTileID</code> objects that cover the current viewport for a given tile size. This method is useful for determining which tiles are visible in the current viewport.</p>"},{"location":"API/classes/Map/#parameters_20","title":"Parameters","text":"Parameter Type Description <code>options</code> <code>CoveringTilesOptions</code> Options for calculating the covering tiles."},{"location":"API/classes/Map/#returns_27","title":"Returns","text":"<p><code>OverscaledTileID</code>[]</p> <p>An array of <code>OverscaledTileID</code> objects.</p>"},{"location":"API/classes/Map/#example_9","title":"Example","text":"<pre><code>// Get the tiles to cover the view for a 512x512px tile source\nconst tiles = map.coveringTiles({tileSize: 512});\n</code></pre>"},{"location":"API/classes/Map/#easeto","title":"easeTo()","text":"<p>easeTo(<code>options</code>: <code>EaseToOptions</code>, <code>eventData?</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/camera.ts:1086</p> <p>Changes any combination of <code>center</code>, <code>zoom</code>, <code>bearing</code>, <code>pitch</code>, <code>roll</code>, and <code>padding</code> with an animated transition between old and new values. The map will retain its current values for any details not specified in <code>options</code>.</p> <p>Reduced Motion</p> <p>The transition will happen instantly if the user has enabled the <code>reduced motion</code> accessibility feature enabled in their operating system, unless <code>options</code> includes <code>essential: true</code>.</p> <p>Triggers the following events: <code>movestart</code>, <code>move</code>, <code>moveend</code>, <code>zoomstart</code>, <code>zoom</code>, <code>zoomend</code>, <code>pitchstart</code>, <code>pitch</code>, <code>pitchend</code>, <code>rollstart</code>, <code>roll</code>, <code>rollend</code>, and <code>rotate</code>.</p>"},{"location":"API/classes/Map/#parameters_21","title":"Parameters","text":"Parameter Type Description <code>options</code> <code>EaseToOptions</code> Options describing the destination and animation of the transition. Accepts CameraOptions and AnimationOptions. <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_28","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#see_6","title":"See","text":"<p>Navigate the map with game-like controls</p>"},{"location":"API/classes/Map/#inherited-from_2","title":"Inherited from","text":"<p><code>Camera.easeTo</code></p>"},{"location":"API/classes/Map/#fitbounds","title":"fitBounds()","text":"<p>fitBounds(<code>bounds</code>: <code>LngLatBoundsLike</code>, <code>options?</code>: <code>FitBoundsOptions</code>, <code>eventData?</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/camera.ts:844</p> <p>Pans and zooms the map to contain its visible area within the specified geographical bounds. This function will also reset the map's bearing to 0 if bearing is nonzero.</p> <p>Triggers the following events: <code>movestart</code> and <code>moveend</code>.</p>"},{"location":"API/classes/Map/#parameters_22","title":"Parameters","text":"Parameter Type Description <code>bounds</code> <code>LngLatBoundsLike</code> Center these bounds in the viewport and use the highest zoom level up to and including Map.getMaxZoom that fits them in the viewport. Bounds will be taken in [sw, ne] order. Southwest point will always be to the left of the northeast point. <code>options?</code> <code>FitBoundsOptions</code> Options supports all properties from AnimationOptions and CameraOptions in addition to the fields below. <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_29","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_10","title":"Example","text":"<pre><code>let bbox = [[-79, 43], [-73, 45]];\nmap.fitBounds(bbox, {\n  padding: {top: 10, bottom:25, left: 15, right: 5}\n});\n</code></pre>"},{"location":"API/classes/Map/#see_7","title":"See","text":"<p>Fit a map to a bounding box</p>"},{"location":"API/classes/Map/#inherited-from_3","title":"Inherited from","text":"<p><code>Camera.fitBounds</code></p>"},{"location":"API/classes/Map/#fitscreencoordinates","title":"fitScreenCoordinates()","text":"<p>fitScreenCoordinates(<code>p0</code>: <code>PointLike</code>, <code>p1</code>: <code>PointLike</code>, <code>bearing</code>: <code>number</code>, <code>options?</code>: <code>FitBoundsOptions</code>, <code>eventData?</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/camera.ts:873</p> <p>Pans, rotates and zooms the map to to fit the box made by points p0 and p1 once the map is rotated to the specified bearing. To zoom without rotating, pass in the current map bearing.</p> <p>Triggers the following events: <code>movestart</code>, <code>move</code>, <code>moveend</code>, <code>zoomstart</code>, <code>zoom</code>, <code>zoomend</code> and <code>rotate</code>.</p>"},{"location":"API/classes/Map/#parameters_23","title":"Parameters","text":"Parameter Type Description <code>p0</code> <code>PointLike</code> First point on screen, in pixel coordinates <code>p1</code> <code>PointLike</code> Second point on screen, in pixel coordinates <code>bearing</code> <code>number</code> Desired map bearing at end of animation, in degrees <code>options?</code> <code>FitBoundsOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_30","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_11","title":"Example","text":"<pre><code>let p0 = [220, 400];\nlet p1 = [500, 900];\nmap.fitScreenCoordinates(p0, p1, map.getBearing(), {\n  padding: {top: 10, bottom:25, left: 15, right: 5}\n});\n</code></pre>"},{"location":"API/classes/Map/#see_8","title":"See","text":"<p>Used by BoxZoomHandler</p>"},{"location":"API/classes/Map/#inherited-from_4","title":"Inherited from","text":"<p><code>Camera.fitScreenCoordinates</code></p>"},{"location":"API/classes/Map/#flyto","title":"flyTo()","text":"<p>flyTo(<code>options</code>: <code>FlyToOptions</code>, <code>eventData?</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/camera.ts:1387</p> <p>Changes any combination of center, zoom, bearing, pitch, and roll, animating the transition along a curve that evokes flight. The animation seamlessly incorporates zooming and panning to help the user maintain her bearings even after traversing a great distance.</p> <p>Reduced Motion</p> <p>The animation will be skipped, and this will behave equivalently to <code>jumpTo</code> if the user has the <code>reduced motion</code> accessibility feature enabled in their operating system, unless 'options' includes <code>essential: true</code>.</p> <p>Triggers the following events: <code>movestart</code>, <code>move</code>, <code>moveend</code>, <code>zoomstart</code>, <code>zoom</code>, <code>zoomend</code>, <code>pitchstart</code>, <code>pitch</code>, <code>pitchend</code>, <code>rollstart</code>, <code>roll</code>, <code>rollend</code>, and <code>rotate</code>.</p>"},{"location":"API/classes/Map/#parameters_24","title":"Parameters","text":"Parameter Type Description <code>options</code> <code>FlyToOptions</code> Options describing the destination and animation of the transition. Accepts CameraOptions, AnimationOptions, and the following additional options. <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_31","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_12","title":"Example","text":"<pre><code>// fly with default options to null island\nmap.flyTo({center: [0, 0], zoom: 9});\n// using flyTo options\nmap.flyTo({\n  center: [0, 0],\n  zoom: 9,\n  speed: 0.2,\n  curve: 1,\n  easing(t) {\n    return t;\n  }\n});\n</code></pre>"},{"location":"API/classes/Map/#see_9","title":"See","text":"<ul> <li>Fly to a location</li> <li>Slowly fly to a location</li> <li>Fly to a location based on scroll position</li> </ul>"},{"location":"API/classes/Map/#inherited-from_5","title":"Inherited from","text":"<p><code>Camera.flyTo</code></p>"},{"location":"API/classes/Map/#getbearing","title":"getBearing()","text":"<p>getBearing(): <code>number</code></p> <p>Defined in: src/ui/camera.ts:596</p> <p>Returns the map's current bearing. The bearing is the compass direction that is \"up\"; for example, a bearing of 90\u00b0 orients the map so that east is up.</p>"},{"location":"API/classes/Map/#returns_32","title":"Returns","text":"<p><code>number</code></p> <p>The map's current bearing.</p>"},{"location":"API/classes/Map/#see_10","title":"See","text":"<p>Navigate the map with game-like controls</p>"},{"location":"API/classes/Map/#inherited-from_6","title":"Inherited from","text":"<p><code>Camera.getBearing</code></p>"},{"location":"API/classes/Map/#getbounds","title":"getBounds()","text":"<p>getBounds(): <code>LngLatBounds</code></p> <p>Defined in: src/ui/map.ts:1042</p> <p>Returns the map's geographical bounds. When the bearing or pitch is non-zero, the visible region is not an axis-aligned rectangle, and the result is the smallest bounds that encompasses the visible region.</p>"},{"location":"API/classes/Map/#returns_33","title":"Returns","text":"<p><code>LngLatBounds</code></p> <p>The geographical bounds of the map as LngLatBounds.</p>"},{"location":"API/classes/Map/#example_13","title":"Example","text":"<pre><code>let bounds = map.getBounds();\n</code></pre>"},{"location":"API/classes/Map/#getcameratargetelevation","title":"getCameraTargetElevation()","text":"<p>getCameraTargetElevation(): <code>number</code></p> <p>Defined in: src/ui/map.ts:3650</p> <p>Returns the elevation for the point where the camera is looking. This value corresponds to: \"meters above sea level\" * \"exaggeration\"</p>"},{"location":"API/classes/Map/#returns_34","title":"Returns","text":"<p><code>number</code></p> <p>The elevation.</p>"},{"location":"API/classes/Map/#getcanvas","title":"getCanvas()","text":"<p>getCanvas(): <code>HTMLCanvasElement</code></p> <p>Defined in: src/ui/map.ts:3148</p> <p>Returns the map's <code>&lt;canvas&gt;</code> element.</p>"},{"location":"API/classes/Map/#returns_35","title":"Returns","text":"<p><code>HTMLCanvasElement</code></p> <p>The map's <code>&lt;canvas&gt;</code> element.</p>"},{"location":"API/classes/Map/#see_11","title":"See","text":"<ul> <li>Measure distances</li> <li>Display a popup on hover</li> <li>Center the map on a clicked symbol</li> </ul>"},{"location":"API/classes/Map/#getcanvascontainer","title":"getCanvasContainer()","text":"<p>getCanvasContainer(): <code>HTMLElement</code></p> <p>Defined in: src/ui/map.ts:3136</p> <p>Returns the HTML element containing the map's <code>&lt;canvas&gt;</code> element.</p> <p>If you want to add non-GL overlays to the map, you should append them to this element.</p> <p>This is the element to which event bindings for map interactivity (such as panning and zooming) are attached. It will receive bubbled events from child elements such as the <code>&lt;canvas&gt;</code>, but not from map controls.</p>"},{"location":"API/classes/Map/#returns_36","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The container of the map's <code>&lt;canvas&gt;</code>.</p>"},{"location":"API/classes/Map/#see_12","title":"See","text":"<p>Create a draggable point</p>"},{"location":"API/classes/Map/#getcenter","title":"getCenter()","text":"<p>getCenter(): <code>LngLat</code></p> <p>Defined in: src/ui/camera.ts:366</p> <p>Returns the map's geographical centerpoint.</p>"},{"location":"API/classes/Map/#returns_37","title":"Returns","text":"<p><code>LngLat</code></p> <p>The map's geographical centerpoint.</p>"},{"location":"API/classes/Map/#example_14","title":"Example","text":"<p>Return a LngLat object such as <code>{lng: 0, lat: 0}</code> <pre><code>let center = map.getCenter();\n// access longitude and latitude values directly\nlet {lng, lat} = map.getCenter();\n</code></pre></p>"},{"location":"API/classes/Map/#inherited-from_7","title":"Inherited from","text":"<p><code>Camera.getCenter</code></p>"},{"location":"API/classes/Map/#getcenterclampedtoground","title":"getCenterClampedToGround()","text":"<p>getCenterClampedToGround(): <code>boolean</code></p> <p>Defined in: src/ui/camera.ts:412</p> <p>Returns the value of <code>centerClampedToGround</code>.</p> <p>If true, the elevation of the center point will automatically be set to the terrain elevation (or zero if terrain is not enabled). If false, the elevation of the center point will default to sea level and will not automatically update. Defaults to true. Needs to be set to false to keep the camera above ground when pitch &gt; 90 degrees.</p>"},{"location":"API/classes/Map/#returns_38","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/Map/#inherited-from_8","title":"Inherited from","text":"<p><code>Camera.getCenterClampedToGround</code></p>"},{"location":"API/classes/Map/#getcenterelevation","title":"getCenterElevation()","text":"<p>getCenterElevation(): <code>number</code></p> <p>Defined in: src/ui/camera.ts:389</p> <p>Returns the elevation of the map's center point.</p>"},{"location":"API/classes/Map/#returns_39","title":"Returns","text":"<p><code>number</code></p> <p>The elevation of the map's center point, in meters above sea level.</p>"},{"location":"API/classes/Map/#inherited-from_9","title":"Inherited from","text":"<p><code>Camera.getCenterElevation</code></p>"},{"location":"API/classes/Map/#getcontainer","title":"getContainer()","text":"<p>getContainer(): <code>HTMLElement</code></p> <p>Defined in: src/ui/map.ts:3120</p> <p>Returns the map's containing HTML element.</p>"},{"location":"API/classes/Map/#returns_40","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The map's container.</p>"},{"location":"API/classes/Map/#getfeaturestate","title":"getFeatureState()","text":"<p>getFeatureState(<code>feature</code>: <code>FeatureIdentifier</code>): <code>any</code></p> <p>Defined in: src/ui/map.ts:3111</p> <p>Gets the <code>state</code> of a feature. A feature's <code>state</code> is a set of user-defined key-value pairs that are assigned to a feature at runtime. Features are identified by their <code>feature.id</code> attribute, which can be any number or string.</p> <p>Note</p> <p>To access the values in a feature's state object for the purposes of styling the feature, use the <code>feature-state</code> expression.</p>"},{"location":"API/classes/Map/#parameters_25","title":"Parameters","text":"Parameter Type Description <code>feature</code> <code>FeatureIdentifier</code> Feature identifier. Feature objects returned from Map.queryRenderedFeatures or event handlers can be used as feature identifiers."},{"location":"API/classes/Map/#returns_41","title":"Returns","text":"<p><code>any</code></p> <p>The state of the feature: a set of key-value pairs that was assigned to the feature at runtime.</p>"},{"location":"API/classes/Map/#example_15","title":"Example","text":"<p>When the mouse moves over the <code>my-layer</code> layer, get the feature state for the feature under the mouse <pre><code>map.on('mousemove', 'my-layer', (e) =&gt; {\n  if (e.features.length &gt; 0) {\n    map.getFeatureState({\n      source: 'my-source',\n      sourceLayer: 'my-source-layer',\n      id: e.features[0].id\n    });\n  }\n});\n</code></pre></p>"},{"location":"API/classes/Map/#getfilter","title":"getFilter()","text":"<p>getFilter(<code>layerId</code>: <code>string</code>): <code>void</code> | <code>FilterSpecification</code></p> <p>Defined in: src/ui/map.ts:2780</p> <p>Returns the filter applied to the specified style layer.</p>"},{"location":"API/classes/Map/#parameters_26","title":"Parameters","text":"Parameter Type Description <code>layerId</code> <code>string</code> The ID of the style layer whose filter to get."},{"location":"API/classes/Map/#returns_42","title":"Returns","text":"<p><code>void</code> | <code>FilterSpecification</code></p> <p>The layer's filter.</p>"},{"location":"API/classes/Map/#getglobalstate","title":"getGlobalState()","text":"<p>getGlobalState(): <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;</p> <p>Defined in: src/ui/map.ts:821</p> <p>Returns the global map state</p>"},{"location":"API/classes/Map/#returns_43","title":"Returns","text":"<p><code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;</p> <p>The map state object.</p>"},{"location":"API/classes/Map/#getglyphs","title":"getGlyphs()","text":"<p>getGlyphs(): <code>string</code></p> <p>Defined in: src/ui/map.ts:2865</p> <p>Returns the value of the style's glyphs URL</p>"},{"location":"API/classes/Map/#returns_44","title":"Returns","text":"<p><code>string</code></p> <p>glyphs Style's glyphs url</p>"},{"location":"API/classes/Map/#getimage","title":"getImage()","text":"<p>getImage(<code>id</code>: <code>string</code>): <code>StyleImage</code></p> <p>Defined in: src/ui/map.ts:2475</p> <p>Returns an image, specified by ID, currently available in the map. This includes both images from the style's original sprite and any images that have been added at runtime using Map.addImage.</p>"},{"location":"API/classes/Map/#parameters_27","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> The ID of the image."},{"location":"API/classes/Map/#returns_45","title":"Returns","text":"<p><code>StyleImage</code></p> <p>An image in the map with the specified ID.</p>"},{"location":"API/classes/Map/#example_16","title":"Example","text":"<pre><code>let coffeeShopIcon = map.getImage(\"coffee_cup\");\n</code></pre>"},{"location":"API/classes/Map/#getlayer","title":"getLayer()","text":"<p>getLayer(<code>id</code>: <code>string</code>): <code>StyleLayer</code></p> <p>Defined in: src/ui/map.ts:2692</p> <p>Returns the layer with the specified ID in the map's style.</p>"},{"location":"API/classes/Map/#parameters_28","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> The ID of the layer to get."},{"location":"API/classes/Map/#returns_46","title":"Returns","text":"<p><code>StyleLayer</code></p> <p>The layer with the specified ID, or <code>undefined</code> if the ID corresponds to no existing layers.</p>"},{"location":"API/classes/Map/#example_17","title":"Example","text":"<pre><code>let stateDataLayer = map.getLayer('state-data');\n</code></pre>"},{"location":"API/classes/Map/#see_13","title":"See","text":"<ul> <li>Filter symbols by toggling a list</li> <li>Filter symbols by text input</li> </ul>"},{"location":"API/classes/Map/#getlayersorder","title":"getLayersOrder()","text":"<p>getLayersOrder(): <code>string</code>[]</p> <p>Defined in: src/ui/map.ts:2706</p> <p>Return the ids of all layers currently in the style, including custom layers, in order.</p>"},{"location":"API/classes/Map/#returns_47","title":"Returns","text":"<p><code>string</code>[]</p> <p>ids of layers, in order</p>"},{"location":"API/classes/Map/#example_18","title":"Example","text":"<pre><code>const orderedLayerIds = map.getLayersOrder();\n</code></pre>"},{"location":"API/classes/Map/#getlayoutproperty","title":"getLayoutProperty()","text":"<p>getLayoutProperty(<code>layerId</code>: <code>string</code>, <code>name</code>: <code>string</code>): <code>any</code></p> <p>Defined in: src/ui/map.ts:2840</p> <p>Returns the value of a layout property in the specified style layer.</p>"},{"location":"API/classes/Map/#parameters_29","title":"Parameters","text":"Parameter Type Description <code>layerId</code> <code>string</code> The ID of the layer to get the layout property from. <code>name</code> <code>string</code> The name of the layout property to get."},{"location":"API/classes/Map/#returns_48","title":"Returns","text":"<p><code>any</code></p> <p>The value of the specified layout property.</p>"},{"location":"API/classes/Map/#getlight","title":"getLight()","text":"<p>getLight(): <code>LightSpecification</code></p> <p>Defined in: src/ui/map.ts:2957</p> <p>Returns the value of the light object.</p>"},{"location":"API/classes/Map/#returns_49","title":"Returns","text":"<p><code>LightSpecification</code></p> <p>light Light properties of the style.</p>"},{"location":"API/classes/Map/#getmaxbounds","title":"getMaxBounds()","text":"<p>getMaxBounds(): <code>LngLatBounds</code></p> <p>Defined in: src/ui/map.ts:1054</p> <p>Returns the maximum geographical bounds the map is constrained to, or <code>null</code> if none set.</p>"},{"location":"API/classes/Map/#returns_50","title":"Returns","text":"<p><code>LngLatBounds</code></p> <p>The map object.</p>"},{"location":"API/classes/Map/#example_19","title":"Example","text":"<pre><code>let maxBounds = map.getMaxBounds();\n</code></pre>"},{"location":"API/classes/Map/#getmaxpitch","title":"getMaxPitch()","text":"<p>getMaxPitch(): <code>number</code></p> <p>Defined in: src/ui/map.ts:1239</p> <p>Returns the map's maximum allowable pitch.</p>"},{"location":"API/classes/Map/#returns_51","title":"Returns","text":"<p><code>number</code></p> <p>The maxPitch</p>"},{"location":"API/classes/Map/#getmaxzoom","title":"getMaxZoom()","text":"<p>getMaxZoom(): <code>number</code></p> <p>Defined in: src/ui/map.ts:1167</p> <p>Returns the map's maximum allowable zoom level.</p>"},{"location":"API/classes/Map/#returns_52","title":"Returns","text":"<p><code>number</code></p> <p>The maxZoom</p>"},{"location":"API/classes/Map/#example_20","title":"Example","text":"<pre><code>let maxZoom = map.getMaxZoom();\n</code></pre>"},{"location":"API/classes/Map/#getminpitch","title":"getMinPitch()","text":"<p>getMinPitch(): <code>number</code></p> <p>Defined in: src/ui/map.ts:1203</p> <p>Returns the map's minimum allowable pitch.</p>"},{"location":"API/classes/Map/#returns_53","title":"Returns","text":"<p><code>number</code></p> <p>The minPitch</p>"},{"location":"API/classes/Map/#getminzoom","title":"getMinZoom()","text":"<p>getMinZoom(): <code>number</code></p> <p>Defined in: src/ui/map.ts:1127</p> <p>Returns the map's minimum allowable zoom level.</p>"},{"location":"API/classes/Map/#returns_54","title":"Returns","text":"<p><code>number</code></p> <p>minZoom</p>"},{"location":"API/classes/Map/#example_21","title":"Example","text":"<pre><code>let minZoom = map.getMinZoom();\n</code></pre>"},{"location":"API/classes/Map/#getpadding","title":"getPadding()","text":"<p>getPadding(): <code>PaddingOptions</code></p> <p>Defined in: src/ui/camera.ts:624</p> <p>Returns the current padding applied around the map viewport.</p>"},{"location":"API/classes/Map/#returns_55","title":"Returns","text":"<p><code>PaddingOptions</code></p> <p>The current padding around the map viewport.</p>"},{"location":"API/classes/Map/#inherited-from_10","title":"Inherited from","text":"<p><code>Camera.getPadding</code></p>"},{"location":"API/classes/Map/#getpaintproperty","title":"getPaintProperty()","text":"<p>getPaintProperty(<code>layerId</code>: <code>string</code>, <code>name</code>: <code>string</code>): <code>unknown</code></p> <p>Defined in: src/ui/map.ts:2812</p> <p>Returns the value of a paint property in the specified style layer.</p>"},{"location":"API/classes/Map/#parameters_30","title":"Parameters","text":"Parameter Type Description <code>layerId</code> <code>string</code> The ID of the layer to get the paint property from. <code>name</code> <code>string</code> The name of a paint property to get."},{"location":"API/classes/Map/#returns_56","title":"Returns","text":"<p><code>unknown</code></p> <p>The value of the specified paint property.</p>"},{"location":"API/classes/Map/#getpitch","title":"getPitch()","text":"<p>getPitch(): <code>number</code></p> <p>Defined in: src/ui/camera.ts:714</p> <p>Returns the map's current pitch (tilt).</p>"},{"location":"API/classes/Map/#returns_57","title":"Returns","text":"<p><code>number</code></p> <p>The map's current pitch, measured in degrees away from the plane of the screen.</p>"},{"location":"API/classes/Map/#inherited-from_11","title":"Inherited from","text":"<p><code>Camera.getPitch</code></p>"},{"location":"API/classes/Map/#getpixelratio","title":"getPixelRatio()","text":"<p>getPixelRatio(): <code>number</code></p> <p>Defined in: src/ui/map.ts:1016</p> <p>Returns the map's pixel ratio. Note that the pixel ratio actually applied may be lower to respect maxCanvasSize.</p>"},{"location":"API/classes/Map/#returns_58","title":"Returns","text":"<p><code>number</code></p> <p>The pixel ratio.</p>"},{"location":"API/classes/Map/#getprojection","title":"getProjection()","text":"<p>getProjection(): <code>ProjectionSpecification</code></p> <p>Defined in: src/ui/map.ts:3662</p> <p>Gets the ProjectionSpecification.</p>"},{"location":"API/classes/Map/#returns_59","title":"Returns","text":"<p><code>ProjectionSpecification</code></p> <p>the projection specification.</p>"},{"location":"API/classes/Map/#example_22","title":"Example","text":"<pre><code>let projection = map.getProjection();\n</code></pre>"},{"location":"API/classes/Map/#getrenderworldcopies","title":"getRenderWorldCopies()","text":"<p>getRenderWorldCopies(): <code>boolean</code></p> <p>Defined in: src/ui/map.ts:1255</p> <p>Returns the state of <code>renderWorldCopies</code>. If <code>true</code>, multiple copies of the world will be rendered side by side beyond -180 and 180 degrees longitude. If set to <code>false</code>:</p> <ul> <li>When the map is zoomed out far enough that a single representation of the world does not fill the map's entire container, there will be blank space beyond 180 and -180 degrees longitude.</li> <li>Features that cross 180 and -180 degrees longitude will be cut in two (with one portion on the right edge of the map and the other on the left edge of the map) at every zoom level.</li> </ul>"},{"location":"API/classes/Map/#returns_60","title":"Returns","text":"<p><code>boolean</code></p> <p>The renderWorldCopies</p>"},{"location":"API/classes/Map/#example_23","title":"Example","text":"<pre><code>let worldCopiesRendered = map.getRenderWorldCopies();\n</code></pre>"},{"location":"API/classes/Map/#see_14","title":"See","text":"<p>Render world copies</p>"},{"location":"API/classes/Map/#getroll","title":"getRoll()","text":"<p>getRoll(): <code>number</code></p> <p>Defined in: src/ui/camera.ts:734</p> <p>Returns the map's current roll angle.</p>"},{"location":"API/classes/Map/#returns_61","title":"Returns","text":"<p><code>number</code></p> <p>The map's current roll, measured in degrees about the camera boresight.</p>"},{"location":"API/classes/Map/#inherited-from_12","title":"Inherited from","text":"<p><code>Camera.getRoll</code></p>"},{"location":"API/classes/Map/#getsky","title":"getSky()","text":"<p>getSky(): <code>SkySpecification</code></p> <p>Defined in: src/ui/map.ts:2987</p> <p>Returns the value of the style's sky.</p>"},{"location":"API/classes/Map/#returns_62","title":"Returns","text":"<p><code>SkySpecification</code></p> <p>the sky properties of the style.</p>"},{"location":"API/classes/Map/#example_24","title":"Example","text":"<pre><code>map.getSky();\n</code></pre>"},{"location":"API/classes/Map/#getsource","title":"getSource()","text":"<p>getSource&lt;<code>TSource</code>&gt;(<code>id</code>: <code>string</code>): <code>TSource</code></p> <p>Defined in: src/ui/map.ts:2261</p> <p>Returns the source with the specified ID in the map's style.</p> <p>This method is often used to update a source using the instance members for the relevant source type as defined in classes that derive from Source. For example, setting the <code>data</code> for a GeoJSON source or updating the <code>url</code> and <code>coordinates</code> of an image source.</p>"},{"location":"API/classes/Map/#type-parameters_9","title":"Type Parameters","text":"Type Parameter <code>TSource</code> extends <code>Source</code>"},{"location":"API/classes/Map/#parameters_31","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> The ID of the source to get."},{"location":"API/classes/Map/#returns_63","title":"Returns","text":"<p><code>TSource</code></p> <p>The style source with the specified ID or <code>undefined</code> if the ID corresponds to no existing sources. The shape of the object varies by source type. A list of options for each source type is available on the MapLibre Style Specification's Sources page.</p>"},{"location":"API/classes/Map/#example_25","title":"Example","text":"<pre><code>let sourceObject = map.getSource('points');\n</code></pre>"},{"location":"API/classes/Map/#see_15","title":"See","text":"<ul> <li>Create a draggable point</li> <li>Animate a point</li> <li>Add live realtime data</li> </ul>"},{"location":"API/classes/Map/#getsprite","title":"getSprite()","text":"<p>getSprite(): <code>object</code>[]</p> <p>Defined in: src/ui/map.ts:2911</p> <p>Returns the as-is value of the style's sprite.</p>"},{"location":"API/classes/Map/#returns_64","title":"Returns","text":"<p><code>object</code>[]</p> <p>style's sprite list of id-url pairs</p>"},{"location":"API/classes/Map/#getstyle","title":"getStyle()","text":"<p>getStyle(): <code>StyleSpecification</code></p> <p>Defined in: src/ui/map.ts:2032</p> <p>Returns the map's MapLibre style object, a JSON object which can be used to recreate the map's style.</p>"},{"location":"API/classes/Map/#returns_65","title":"Returns","text":"<p><code>StyleSpecification</code></p> <p>The map's style JSON object.</p>"},{"location":"API/classes/Map/#example_26","title":"Example","text":"<pre><code>let styleJson = map.getStyle();\n</code></pre>"},{"location":"API/classes/Map/#getterrain","title":"getTerrain()","text":"<p>getTerrain(): <code>TerrainSpecification</code></p> <p>Defined in: src/ui/map.ts:2198</p> <p>Get the terrain-options if terrain is loaded</p>"},{"location":"API/classes/Map/#returns_66","title":"Returns","text":"<p><code>TerrainSpecification</code></p> <p>the TerrainSpecification passed to setTerrain</p>"},{"location":"API/classes/Map/#example_27","title":"Example","text":"<pre><code>map.getTerrain(); // { source: 'terrain' };\n</code></pre>"},{"location":"API/classes/Map/#getverticalfieldofview","title":"getVerticalFieldOfView()","text":"<p>getVerticalFieldOfView(): <code>number</code></p> <p>Defined in: src/ui/camera.ts:563</p> <p>Returns the map's current vertical field of view, in degrees.</p>"},{"location":"API/classes/Map/#returns_67","title":"Returns","text":"<p><code>number</code></p> <p>The map's current vertical field of view.</p>"},{"location":"API/classes/Map/#default-value","title":"Default Value","text":"<pre><code>36.87\n</code></pre>"},{"location":"API/classes/Map/#example_28","title":"Example","text":"<pre><code>const verticalFieldOfView = map.getVerticalFieldOfView();\n</code></pre>"},{"location":"API/classes/Map/#inherited-from_13","title":"Inherited from","text":"<p><code>Camera.getVerticalFieldOfView</code></p>"},{"location":"API/classes/Map/#getzoom","title":"getZoom()","text":"<p>getZoom(): <code>number</code></p> <p>Defined in: src/ui/camera.ts:472</p> <p>Returns the map's current zoom level.</p>"},{"location":"API/classes/Map/#returns_68","title":"Returns","text":"<p><code>number</code></p> <p>The map's current zoom level.</p>"},{"location":"API/classes/Map/#example_29","title":"Example","text":"<pre><code>map.getZoom();\n</code></pre>"},{"location":"API/classes/Map/#inherited-from_14","title":"Inherited from","text":"<p><code>Camera.getZoom</code></p>"},{"location":"API/classes/Map/#hascontrol","title":"hasControl()","text":"<p>hasControl(<code>control</code>: <code>IControl</code>): <code>boolean</code></p> <p>Defined in: src/ui/map.ts:906</p> <p>Checks if a control exists on the map.</p>"},{"location":"API/classes/Map/#parameters_32","title":"Parameters","text":"Parameter Type Description <code>control</code> <code>IControl</code> The IControl to check."},{"location":"API/classes/Map/#returns_69","title":"Returns","text":"<p><code>boolean</code></p> <p>true if map contains control.</p>"},{"location":"API/classes/Map/#example_30","title":"Example","text":"<pre><code>// Define a new navigation control.\nlet navigation = new NavigationControl();\n// Add zoom and rotation controls to the map.\nmap.addControl(navigation);\n// Check that the navigation control exists on the map.\nmap.hasControl(navigation);\n</code></pre>"},{"location":"API/classes/Map/#hasimage","title":"hasImage()","text":"<p>hasImage(<code>id</code>: <code>string</code>): <code>boolean</code></p> <p>Defined in: src/ui/map.ts:2495</p> <p>Check whether or not an image with a specific ID exists in the style. This checks both images in the style's original sprite and any images that have been added at runtime using Map.addImage.</p> <p>An ErrorEvent will be fired if the image parameter is invalid.</p>"},{"location":"API/classes/Map/#parameters_33","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> The ID of the image."},{"location":"API/classes/Map/#returns_70","title":"Returns","text":"<p><code>boolean</code></p> <p>A Boolean indicating whether the image exists.</p>"},{"location":"API/classes/Map/#example_31","title":"Example","text":"<p>Check if an image with the ID 'cat' exists in the style's sprite. <pre><code>let catIconExists = map.hasImage('cat');\n</code></pre></p>"},{"location":"API/classes/Map/#ismoving","title":"isMoving()","text":"<p>isMoving(): <code>boolean</code></p> <p>Defined in: src/ui/map.ts:1340</p> <p>Returns true if the map is panning, zooming, rotating, or pitching due to a camera animation or user gesture.</p>"},{"location":"API/classes/Map/#returns_71","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the map is moving.</p>"},{"location":"API/classes/Map/#example_32","title":"Example","text":"<pre><code>let isMoving = map.isMoving();\n</code></pre>"},{"location":"API/classes/Map/#isrotating","title":"isRotating()","text":"<p>isRotating(): <code>boolean</code></p> <p>Defined in: src/ui/map.ts:1364</p> <p>Returns true if the map is rotating due to a camera animation or user gesture.</p>"},{"location":"API/classes/Map/#returns_72","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the map is rotating.</p>"},{"location":"API/classes/Map/#example_33","title":"Example","text":"<pre><code>map.isRotating();\n</code></pre>"},{"location":"API/classes/Map/#issourceloaded","title":"isSourceLoaded()","text":"<p>isSourceLoaded(<code>id</code>: <code>string</code>): <code>boolean</code></p> <p>Defined in: src/ui/map.ts:2109</p> <p>Returns a Boolean indicating whether the source is loaded. Returns <code>true</code> if the source with the given ID in the map's style has no outstanding network requests, otherwise <code>false</code>.</p> <p>A ErrorEvent event will be fired if there is no source wit the specified ID.</p>"},{"location":"API/classes/Map/#parameters_34","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> The ID of the source to be checked."},{"location":"API/classes/Map/#returns_73","title":"Returns","text":"<p><code>boolean</code></p> <p>A Boolean indicating whether the source is loaded.</p>"},{"location":"API/classes/Map/#example_34","title":"Example","text":"<pre><code>let sourceLoaded = map.isSourceLoaded('bathymetry-data');\n</code></pre>"},{"location":"API/classes/Map/#isstyleloaded","title":"isStyleLoaded()","text":"<p>isStyleLoaded(): <code>boolean</code> | <code>void</code></p> <p>Defined in: src/ui/map.ts:2048</p> <p>Returns a Boolean indicating whether the map's style is fully loaded.</p>"},{"location":"API/classes/Map/#returns_74","title":"Returns","text":"<p><code>boolean</code> | <code>void</code></p> <p>A Boolean indicating whether the style is fully loaded.</p>"},{"location":"API/classes/Map/#example_35","title":"Example","text":"<pre><code>let styleLoadStatus = map.isStyleLoaded();\n</code></pre>"},{"location":"API/classes/Map/#iszooming","title":"isZooming()","text":"<p>isZooming(): <code>boolean</code></p> <p>Defined in: src/ui/map.ts:1352</p> <p>Returns true if the map is zooming due to a camera animation or user gesture.</p>"},{"location":"API/classes/Map/#returns_75","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the map is zooming.</p>"},{"location":"API/classes/Map/#example_36","title":"Example","text":"<pre><code>let isZooming = map.isZooming();\n</code></pre>"},{"location":"API/classes/Map/#jumpto","title":"jumpTo()","text":"<p>jumpTo(<code>options</code>: <code>JumpToOptions</code>, <code>eventData?</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/camera.ts:922</p> <p>Changes any combination of center, zoom, bearing, pitch, and roll, without an animated transition. The map will retain its current values for any details not specified in <code>options</code>.</p> <p>Triggers the following events: <code>movestart</code>, <code>move</code>, <code>moveend</code>, <code>zoomstart</code>, <code>zoom</code>, <code>zoomend</code>, <code>pitchstart</code>, <code>pitch</code>, <code>pitchend</code>, <code>rollstart</code>, <code>roll</code>, <code>rollend</code> and <code>rotate</code>.</p>"},{"location":"API/classes/Map/#parameters_35","title":"Parameters","text":"Parameter Type Description <code>options</code> <code>JumpToOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_76","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_37","title":"Example","text":"<pre><code>// jump to coordinates at current zoom\nmap.jumpTo({center: [0, 0]});\n// jump with zoom, pitch, and bearing options\nmap.jumpTo({\n  center: [0, 0],\n  zoom: 8,\n  pitch: 45,\n  bearing: 90\n});\n</code></pre>"},{"location":"API/classes/Map/#see_16","title":"See","text":"<ul> <li>Jump to a series of locations</li> <li>Update a feature in realtime</li> </ul>"},{"location":"API/classes/Map/#inherited-from_15","title":"Inherited from","text":"<p><code>Camera.jumpTo</code></p>"},{"location":"API/classes/Map/#listens","title":"listens()","text":"<p>listens(<code>type</code>: <code>string</code>): <code>boolean</code></p> <p>Defined in: src/util/evented.ts:165</p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/Map/#parameters_36","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/Map/#returns_77","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/Map/#inherited-from_16","title":"Inherited from","text":"<p><code>Camera.listens</code></p>"},{"location":"API/classes/Map/#listimages","title":"listImages()","text":"<p>listImages(): <code>string</code>[]</p> <p>Defined in: src/ui/map.ts:2554</p> <p>Returns an Array of strings containing the IDs of all images currently available in the map. This includes both images from the style's original sprite and any images that have been added at runtime using Map.addImage.</p>"},{"location":"API/classes/Map/#returns_78","title":"Returns","text":"<p><code>string</code>[]</p> <p>An Array of strings containing the names of all sprites/images currently available in the map.</p>"},{"location":"API/classes/Map/#example_38","title":"Example","text":"<pre><code>let allImages = map.listImages();\n</code></pre>"},{"location":"API/classes/Map/#loaded","title":"loaded()","text":"<p>loaded(): <code>boolean</code></p> <p>Defined in: src/ui/map.ts:3288</p> <p>Returns a Boolean indicating whether the map is fully loaded.</p> <p>Returns <code>false</code> if the style is not yet fully loaded, or if there has been a change to the sources or style that has not yet fully loaded.</p>"},{"location":"API/classes/Map/#returns_79","title":"Returns","text":"<p><code>boolean</code></p> <p>A Boolean indicating whether the map is fully loaded.</p>"},{"location":"API/classes/Map/#loadimage","title":"loadImage()","text":"<p>loadImage(<code>url</code>: <code>string</code>): <code>Promise</code>&lt;<code>GetResourceResponse</code>&lt;<code>ImageBitmap</code> | <code>HTMLImageElement</code>&gt;&gt;</p> <p>Defined in: src/ui/map.ts:2538</p> <p>Load an image from an external URL to be used with Map.addImage. External domains must support CORS.</p>"},{"location":"API/classes/Map/#parameters_37","title":"Parameters","text":"Parameter Type Description <code>url</code> <code>string</code> The URL of the image file. Image file must be in png, webp, or jpg format."},{"location":"API/classes/Map/#returns_80","title":"Returns","text":"<p><code>Promise</code>&lt;<code>GetResourceResponse</code>&lt;<code>ImageBitmap</code> | <code>HTMLImageElement</code>&gt;&gt;</p> <p>a promise that is resolved when the image is loaded</p>"},{"location":"API/classes/Map/#example_39","title":"Example","text":"<p>Load an image from an external URL. <pre><code>const response = await map.loadImage('https://picsum.photos/50/50');\n// Add the loaded image to the style's sprite with the ID 'photo'.\nmap.addImage('photo', response.data);\n</code></pre></p>"},{"location":"API/classes/Map/#see_17","title":"See","text":"<p>Add an icon to the map</p>"},{"location":"API/classes/Map/#movelayer","title":"moveLayer()","text":"<p>moveLayer(<code>id</code>: <code>string</code>, <code>beforeId?</code>: <code>string</code>): <code>this</code></p> <p>Defined in: src/ui/map.ts:2655</p> <p>Moves a layer to a different z-position.</p>"},{"location":"API/classes/Map/#parameters_38","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> The ID of the layer to move. <code>beforeId?</code> <code>string</code> The ID of an existing layer to insert the new layer before. When viewing the map, the <code>id</code> layer will appear beneath the <code>beforeId</code> layer. If <code>beforeId</code> is omitted, the layer will be appended to the end of the layers array and appear above all other layers on the map."},{"location":"API/classes/Map/#returns_81","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_40","title":"Example","text":"<p>Move a layer with ID 'polygon' before the layer with ID 'country-label'. The <code>polygon</code> layer will appear beneath the <code>country-label</code> layer on the map. <pre><code>map.moveLayer('polygon', 'country-label');\n</code></pre></p>"},{"location":"API/classes/Map/#panby","title":"panBy()","text":"<p>panBy(<code>offset</code>: <code>PointLike</code>, <code>options?</code>: <code>EaseToOptions</code>, <code>eventData?</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/camera.ts:436</p> <p>Pans the map by the specified offset.</p> <p>Triggers the following events: <code>movestart</code> and <code>moveend</code>.</p>"},{"location":"API/classes/Map/#parameters_39","title":"Parameters","text":"Parameter Type Description <code>offset</code> <code>PointLike</code> <code>x</code> and <code>y</code> coordinates by which to pan the map. <code>options?</code> <code>EaseToOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_82","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#see_18","title":"See","text":"<p>Navigate the map with game-like controls</p>"},{"location":"API/classes/Map/#inherited-from_17","title":"Inherited from","text":"<p><code>Camera.panBy</code></p>"},{"location":"API/classes/Map/#panto","title":"panTo()","text":"<p>panTo(<code>lnglat</code>: <code>LngLatLike</code>, <code>options?</code>: <code>EaseToOptions</code>, <code>eventData?</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/camera.ts:457</p> <p>Pans the map to the specified location with an animated transition.</p> <p>Triggers the following events: <code>movestart</code> and <code>moveend</code>.</p>"},{"location":"API/classes/Map/#parameters_40","title":"Parameters","text":"Parameter Type Description <code>lnglat</code> <code>LngLatLike</code> The location to pan the map to. <code>options?</code> <code>EaseToOptions</code> Options describing the destination and animation of the transition. <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_83","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_41","title":"Example","text":"<pre><code>map.panTo([-74, 38]);\n// Specify that the panTo animation should last 5000 milliseconds.\nmap.panTo([-74, 38], {duration: 5000});\n</code></pre>"},{"location":"API/classes/Map/#see_19","title":"See","text":"<p>Update a feature in realtime</p>"},{"location":"API/classes/Map/#inherited-from_18","title":"Inherited from","text":"<p><code>Camera.panTo</code></p>"},{"location":"API/classes/Map/#project","title":"project()","text":"<p>project(<code>lnglat</code>: <code>LngLatLike</code>): <code>Point</code></p> <p>Defined in: src/ui/map.ts:1310</p> <p>Returns a Point representing pixel coordinates, relative to the map's <code>container</code>, that correspond to the specified geographical location.</p>"},{"location":"API/classes/Map/#parameters_41","title":"Parameters","text":"Parameter Type Description <code>lnglat</code> <code>LngLatLike</code> The geographical location to project."},{"location":"API/classes/Map/#returns_84","title":"Returns","text":"<p><code>Point</code></p> <p>The Point corresponding to <code>lnglat</code>, relative to the map's <code>container</code>.</p>"},{"location":"API/classes/Map/#example_42","title":"Example","text":"<pre><code>let coordinate = [-122.420679, 37.772537];\nlet point = map.project(coordinate);\n</code></pre>"},{"location":"API/classes/Map/#queryrenderedfeatures","title":"queryRenderedFeatures()","text":"<p>queryRenderedFeatures(<code>geometryOrOptions?</code>: <code>PointLike</code> | <code>QueryRenderedFeaturesOptions</code> | [<code>PointLike</code>, <code>PointLike</code>], <code>options?</code>: <code>QueryRenderedFeaturesOptions</code>): <code>MapGeoJSONFeature</code>[]</p> <p>Defined in: src/ui/map.ts:1808</p> <p>Returns an array of MapGeoJSONFeature objects representing visible features that satisfy the query parameters.</p>"},{"location":"API/classes/Map/#parameters_42","title":"Parameters","text":"Parameter Type Description <code>geometryOrOptions?</code> <code>PointLike</code> | <code>QueryRenderedFeaturesOptions</code> | [<code>PointLike</code>, <code>PointLike</code>] (optional) The geometry of the query region: either a single point or southwest and northeast points describing a bounding box. Omitting this parameter (i.e. calling Map.queryRenderedFeatures with zero arguments, or with only a <code>options</code> argument) is equivalent to passing a bounding box encompassing the entire map viewport. The geometryOrOptions can receive a QueryRenderedFeaturesOptions only to support a situation where the function receives only one parameter which is the options parameter. <code>options?</code> <code>QueryRenderedFeaturesOptions</code> (optional) Options object."},{"location":"API/classes/Map/#returns_85","title":"Returns","text":"<p><code>MapGeoJSONFeature</code>[]</p> <p>An array of MapGeoJSONFeature objects.</p> <p>The <code>properties</code> value of each returned feature object contains the properties of its source feature. For GeoJSON sources, only string and numeric property values are supported (i.e. <code>null</code>, <code>Array</code>, and <code>Object</code> values are not supported).</p> <p>Each feature includes top-level <code>layer</code>, <code>source</code>, and <code>sourceLayer</code> properties. The <code>layer</code> property is an object representing the style layer to  which the feature belongs. Layout and paint properties in this object contain values which are fully evaluated for the given zoom level and feature.</p> <p>Only features that are currently rendered are included. Some features will not be included, like:</p> <ul> <li>Features from layers whose <code>visibility</code> property is <code>\"none\"</code>.</li> <li>Features from layers whose zoom range excludes the current zoom level.</li> <li>Symbol features that have been hidden due to text or icon collision.</li> </ul> <p>Features from all other layers are included, including features that may have no visible contribution to the rendered result; for example, because the layer's opacity or color alpha component is set to 0.</p> <p>The topmost rendered feature appears first in the returned array, and subsequent features are sorted by descending z-order. Features that are rendered multiple times (due to wrapping across the antemeridian at low zoom levels) are returned only once (though subject to the following caveat).</p> <p>Because features come from tiled vector data or GeoJSON data that is converted to tiles internally, feature geometries may be split or duplicated across tile boundaries and, as a result, features may appear multiple times in query results. For example, suppose there is a highway running through the bounding rectangle of a query. The results of the query will be those parts of the highway that lie within the map tiles covering the bounding rectangle, even if the highway extends into other tiles, and the portion of the highway within each map tile will be returned as a separate feature. Similarly, a point feature near a tile boundary may appear in multiple tiles due to tile buffering.</p>"},{"location":"API/classes/Map/#examples_3","title":"Examples","text":"<p>Find all features at a point <pre><code>let features = map.queryRenderedFeatures(\n  [20, 35],\n  { layers: ['my-layer-name'] }\n);\n</code></pre></p> <p>Find all features within a static bounding box <pre><code>let features = map.queryRenderedFeatures(\n  [[10, 20], [30, 50]],\n  { layers: ['my-layer-name'] }\n);\n</code></pre></p> <p>Find all features within a bounding box around a point <pre><code>let width = 10;\nlet height = 20;\nlet features = map.queryRenderedFeatures([\n  [point.x - width / 2, point.y - height / 2],\n  [point.x + width / 2, point.y + height / 2]\n], { layers: ['my-layer-name'] });\n</code></pre></p> <p>Query all rendered features from a single layer <pre><code>let features = map.queryRenderedFeatures({ layers: ['my-layer-name'] });\n</code></pre></p>"},{"location":"API/classes/Map/#see_20","title":"See","text":"<p>Get features under the mouse pointer</p>"},{"location":"API/classes/Map/#querysourcefeatures","title":"querySourceFeatures()","text":"<p>querySourceFeatures(<code>sourceId</code>: <code>string</code>, <code>parameters?</code>: <code>QuerySourceFeatureOptions</code>): <code>GeoJSONFeature</code>[]</p> <p>Defined in: src/ui/map.ts:1858</p> <p>Returns an array of MapGeoJSONFeature objects representing features within the specified vector tile or GeoJSON source that satisfy the query parameters.</p>"},{"location":"API/classes/Map/#parameters_43","title":"Parameters","text":"Parameter Type Description <code>sourceId</code> <code>string</code> The ID of the vector tile or GeoJSON source to query. <code>parameters?</code> <code>QuerySourceFeatureOptions</code> The options object."},{"location":"API/classes/Map/#returns_86","title":"Returns","text":"<p><code>GeoJSONFeature</code>[]</p> <p>An array of MapGeoJSONFeature objects.</p> <p>In contrast to Map.queryRenderedFeatures, this function returns all features matching the query parameters, whether or not they are rendered by the current style (i.e. visible). The domain of the query includes all currently-loaded vector tiles and GeoJSON source tiles: this function does not check tiles outside the currently visible viewport.</p> <p>Because features come from tiled vector data or GeoJSON data that is converted to tiles internally, feature geometries may be split or duplicated across tile boundaries and, as a result, features may appear multiple times in query results. For example, suppose there is a highway running through the bounding rectangle of a query. The results of the query will be those parts of the highway that lie within the map tiles covering the bounding rectangle, even if the highway extends into other tiles, and the portion of the highway within each map tile will be returned as a separate feature. Similarly, a point feature near a tile boundary may appear in multiple tiles due to tile buffering.</p>"},{"location":"API/classes/Map/#example_43","title":"Example","text":"<p>Find all features in one source layer in a vector source <pre><code>let features = map.querySourceFeatures('your-source-id', {\n  sourceLayer: 'your-source-layer'\n});\n</code></pre></p>"},{"location":"API/classes/Map/#queryterrainelevation","title":"queryTerrainElevation()","text":"<p>queryTerrainElevation(<code>lngLatLike</code>: <code>LngLatLike</code>): <code>number</code></p> <p>Defined in: src/ui/camera.ts:1637</p> <p>Gets the elevation at a given location, in meters above sea level. Returns null if terrain is not enabled. If terrain is enabled with some exaggeration value, the value returned here will be reflective of (multiplied by) that exaggeration value. This method should be used for proper positioning of custom 3d objects, as explained here</p>"},{"location":"API/classes/Map/#parameters_44","title":"Parameters","text":"Parameter Type Description <code>lngLatLike</code> <code>LngLatLike</code> [x,y] or LngLat coordinates of the location"},{"location":"API/classes/Map/#returns_87","title":"Returns","text":"<p><code>number</code></p> <p>elevation in meters</p>"},{"location":"API/classes/Map/#inherited-from_19","title":"Inherited from","text":"<p><code>Camera.queryTerrainElevation</code></p>"},{"location":"API/classes/Map/#redraw","title":"redraw()","text":"<p>redraw(): <code>this</code></p> <p>Defined in: src/ui/map.ts:3462</p> <p>Force a synchronous redraw of the map.</p>"},{"location":"API/classes/Map/#returns_88","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_44","title":"Example","text":"<pre><code>map.redraw();\n</code></pre>"},{"location":"API/classes/Map/#refreshtiles","title":"refreshTiles()","text":"<p>refreshTiles(<code>sourceId</code>: <code>string</code>, <code>tileIds?</code>: <code>object</code>[]): <code>void</code></p> <p>Defined in: src/ui/map.ts:2311</p> <p>Triggers a reload of the selected tiles</p>"},{"location":"API/classes/Map/#parameters_45","title":"Parameters","text":"Parameter Type Description <code>sourceId</code> <code>string</code> The ID of the source <code>tileIds?</code> <code>object</code>[] An array of tile IDs to be reloaded. If not defined, all tiles will be reloaded."},{"location":"API/classes/Map/#returns_89","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/Map/#example_45","title":"Example","text":"<pre><code>map.refreshTiles('satellite', [{x:1024, y: 1023, z: 11}, {x:1023, y: 1023, z: 11}]);\n</code></pre>"},{"location":"API/classes/Map/#remove","title":"remove()","text":"<p>remove(): <code>void</code></p> <p>Defined in: src/ui/map.ts:3483</p> <p>Clean up and release all internal resources associated with this map.</p> <p>This includes DOM elements, event bindings, web workers, and WebGL resources.</p> <p>Use this method when you are done using the map and wish to ensure that it no longer consumes browser resources. Afterwards, you must not call any other methods on the map.</p>"},{"location":"API/classes/Map/#returns_90","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/Map/#removecontrol","title":"removeControl()","text":"<p>removeControl(<code>control</code>: <code>IControl</code>): <code>Map</code></p> <p>Defined in: src/ui/map.ts:880</p> <p>Removes the control from the map.</p> <p>An ErrorEvent will be fired if the image parameter is invalid.</p>"},{"location":"API/classes/Map/#parameters_46","title":"Parameters","text":"Parameter Type Description <code>control</code> <code>IControl</code> The IControl to remove."},{"location":"API/classes/Map/#returns_91","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/Map/#example_46","title":"Example","text":"<pre><code>// Define a new navigation control.\nlet navigation = new NavigationControl();\n// Add zoom and rotation controls to the map.\nmap.addControl(navigation);\n// Remove zoom and rotation controls from the map.\nmap.removeControl(navigation);\n</code></pre>"},{"location":"API/classes/Map/#removefeaturestate","title":"removeFeatureState()","text":"<p>removeFeatureState(<code>target</code>: <code>FeatureIdentifier</code>, <code>key?</code>: <code>string</code>): <code>this</code></p> <p>Defined in: src/ui/map.ts:3079</p> <p>Removes the <code>state</code> of a feature, setting it back to the default behavior. If only a <code>target.source</code> is specified, it will remove the state for all features from that source. If <code>target.id</code> is also specified, it will remove all keys for that feature's state. If <code>key</code> is also specified, it removes only that key from that feature's state. Features are identified by their <code>feature.id</code> attribute, which can be any number or string.</p>"},{"location":"API/classes/Map/#parameters_47","title":"Parameters","text":"Parameter Type Description <code>target</code> <code>FeatureIdentifier</code> Identifier of where to remove state. It can be a source, a feature, or a specific key of feature. Feature objects returned from Map.queryRenderedFeatures or event handlers can be used as feature identifiers. <code>key?</code> <code>string</code> (optional) The key in the feature state to reset."},{"location":"API/classes/Map/#returns_92","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#examples_4","title":"Examples","text":"<p>Reset the entire state object for all features in the <code>my-source</code> source <pre><code>map.removeFeatureState({\n  source: 'my-source'\n});\n</code></pre></p> <p>When the mouse leaves the <code>my-layer</code> layer, reset the entire state object for the feature under the mouse <pre><code>map.on('mouseleave', 'my-layer', (e) =&gt; {\n  map.removeFeatureState({\n    source: 'my-source',\n    sourceLayer: 'my-source-layer',\n    id: e.features[0].id\n  });\n});\n</code></pre></p> <p>When the mouse leaves the <code>my-layer</code> layer, reset only the <code>hover</code> key-value pair in the state for the feature under the mouse <pre><code>map.on('mouseleave', 'my-layer', (e) =&gt; {\n  map.removeFeatureState({\n    source: 'my-source',\n    sourceLayer: 'my-source-layer',\n    id: e.features[0].id\n  }, 'hover');\n});\n</code></pre></p>"},{"location":"API/classes/Map/#removeimage","title":"removeImage()","text":"<p>removeImage(<code>id</code>: <code>string</code>): <code>void</code></p> <p>Defined in: src/ui/map.ts:2518</p> <p>Remove an image from a style. This can be an image from the style's original sprite or any images that have been added at runtime using Map.addImage.</p>"},{"location":"API/classes/Map/#parameters_48","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> The ID of the image."},{"location":"API/classes/Map/#returns_93","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/Map/#example_47","title":"Example","text":"<pre><code>// If an image with the ID 'cat' exists in\n// the style's sprite, remove it.\nif (map.hasImage('cat')) map.removeImage('cat');\n</code></pre>"},{"location":"API/classes/Map/#removelayer","title":"removeLayer()","text":"<p>removeLayer(<code>id</code>: <code>string</code>): <code>this</code></p> <p>Defined in: src/ui/map.ts:2673</p> <p>Removes the layer with the given ID from the map's style.</p> <p>An ErrorEvent will be fired if the image parameter is invalid.</p>"},{"location":"API/classes/Map/#parameters_49","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> The ID of the layer to remove"},{"location":"API/classes/Map/#returns_94","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_48","title":"Example","text":"<p>If a layer with ID 'state-data' exists, remove it. <pre><code>if (map.getLayer('state-data')) map.removeLayer('state-data');\n</code></pre></p>"},{"location":"API/classes/Map/#removesource","title":"removeSource()","text":"<p>removeSource(<code>id</code>: <code>string</code>): <code>Map</code></p> <p>Defined in: src/ui/map.ts:2234</p> <p>Removes a source from the map's style.</p>"},{"location":"API/classes/Map/#parameters_50","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> The ID of the source to remove."},{"location":"API/classes/Map/#returns_95","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/Map/#example_49","title":"Example","text":"<pre><code>map.removeSource('bathymetry-data');\n</code></pre>"},{"location":"API/classes/Map/#removesprite","title":"removeSprite()","text":"<p>removeSprite(<code>id</code>: <code>string</code>): <code>Map</code></p> <p>Defined in: src/ui/map.ts:2900</p> <p>Removes the sprite from the map's style. Fires the <code>style</code> event.</p>"},{"location":"API/classes/Map/#parameters_51","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> The ID of the sprite to remove. If the sprite is declared as a single URL, the ID must be \"default\"."},{"location":"API/classes/Map/#returns_96","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/Map/#example_50","title":"Example","text":"<pre><code>map.removeSprite('sprite-two');\nmap.removeSprite('default');\n</code></pre>"},{"location":"API/classes/Map/#resetnorth","title":"resetNorth()","text":"<p>resetNorth(<code>options?</code>: <code>AnimationOptions</code>, <code>eventData?</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/camera.ts:670</p> <p>Rotates the map so that north is up (0\u00b0 bearing), with an animated transition.</p> <p>Triggers the following events: <code>movestart</code>, <code>moveend</code>, and <code>rotate</code>.</p>"},{"location":"API/classes/Map/#parameters_52","title":"Parameters","text":"Parameter Type Description <code>options?</code> <code>AnimationOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_97","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#inherited-from_20","title":"Inherited from","text":"<p><code>Camera.resetNorth</code></p>"},{"location":"API/classes/Map/#resetnorthpitch","title":"resetNorthPitch()","text":"<p>resetNorthPitch(<code>options?</code>: <code>AnimationOptions</code>, <code>eventData?</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/camera.ts:683</p> <p>Rotates and pitches the map so that north is up (0\u00b0 bearing) and pitch and roll are 0\u00b0, with an animated transition.</p> <p>Triggers the following events: <code>movestart</code>, <code>move</code>, <code>moveend</code>, <code>pitchstart</code>, <code>pitch</code>, <code>pitchend</code>, <code>rollstart</code>, <code>roll</code>, <code>rollend</code>, and <code>rotate</code>.</p>"},{"location":"API/classes/Map/#parameters_53","title":"Parameters","text":"Parameter Type Description <code>options?</code> <code>AnimationOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_98","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#inherited-from_21","title":"Inherited from","text":"<p><code>Camera.resetNorthPitch</code></p>"},{"location":"API/classes/Map/#resize","title":"resize()","text":"<p>resize(<code>eventData?</code>: <code>any</code>, <code>constrainTransform?</code>: <code>boolean</code>): <code>Map</code></p> <p>Defined in: src/ui/map.ts:953</p> <p>Resizes the map according to the dimensions of its <code>container</code> element.</p> <p>Checks if the map container size changed and updates the map if it has changed. This method must be called after the map's <code>container</code> is resized programmatically or when the map is shown after being initially hidden with CSS.</p> <p>Triggers the following events: <code>movestart</code>, <code>move</code>, <code>moveend</code>, and <code>resize</code>.</p>"},{"location":"API/classes/Map/#parameters_54","title":"Parameters","text":"Parameter Type Default value Description <code>eventData?</code> <code>any</code> <code>undefined</code> Additional properties to be passed to <code>movestart</code>, <code>move</code>, <code>resize</code>, and <code>moveend</code> events that get triggered as a result of resize. This can be useful for differentiating the source of an event (for example, user-initiated or programmatically-triggered events). <code>constrainTransform?</code> <code>boolean</code> <code>true</code> -"},{"location":"API/classes/Map/#returns_99","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/Map/#example_51","title":"Example","text":"<p>Resize the map when the map container is shown after being initially hidden with CSS. <pre><code>let mapDiv = document.getElementById('map');\nif (mapDiv.style.visibility === true) map.resize();\n</code></pre></p>"},{"location":"API/classes/Map/#rotateto","title":"rotateTo()","text":"<p>rotateTo(<code>bearing</code>: <code>number</code>, <code>options?</code>: <code>EaseToOptions</code>, <code>eventData?</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/camera.ts:656</p> <p>Rotates the map to the specified bearing, with an animated transition. The bearing is the compass direction that is \"up\"; for example, a bearing of 90\u00b0 orients the map so that east is up.</p> <p>Triggers the following events: <code>movestart</code>, <code>moveend</code>, and <code>rotate</code>.</p>"},{"location":"API/classes/Map/#parameters_55","title":"Parameters","text":"Parameter Type Description <code>bearing</code> <code>number</code> The desired bearing. <code>options?</code> <code>EaseToOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_100","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#inherited-from_22","title":"Inherited from","text":"<p><code>Camera.rotateTo</code></p>"},{"location":"API/classes/Map/#setbearing","title":"setBearing()","text":"<p>setBearing(<code>bearing</code>: <code>number</code>, <code>eventData?</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/camera.ts:614</p> <p>Sets the map's bearing (rotation). The bearing is the compass direction that is \"up\"; for example, a bearing of 90\u00b0 orients the map so that east is up.</p> <p>Equivalent to <code>jumpTo({bearing: bearing})</code>.</p> <p>Triggers the following events: <code>movestart</code>, <code>moveend</code>, and <code>rotate</code>.</p>"},{"location":"API/classes/Map/#parameters_56","title":"Parameters","text":"Parameter Type Description <code>bearing</code> <code>number</code> The desired bearing. <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_101","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_52","title":"Example","text":"<p>Rotate the map to 90 degrees <pre><code>map.setBearing(90);\n</code></pre></p>"},{"location":"API/classes/Map/#inherited-from_23","title":"Inherited from","text":"<p><code>Camera.setBearing</code></p>"},{"location":"API/classes/Map/#setcenter","title":"setCenter()","text":"<p>setCenter(<code>center</code>: <code>LngLatLike</code>, <code>eventData?</code>: <code>any</code>): <code>Map</code></p> <p>Defined in: src/ui/camera.ts:380</p> <p>Sets the map's geographical centerpoint. Equivalent to <code>jumpTo({center: center})</code>.</p> <p>Triggers the following events: <code>movestart</code> and <code>moveend</code>.</p>"},{"location":"API/classes/Map/#parameters_57","title":"Parameters","text":"Parameter Type Description <code>center</code> <code>LngLatLike</code> The centerpoint to set. <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_102","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/Map/#example_53","title":"Example","text":"<pre><code>map.setCenter([-74, 38]);\n</code></pre>"},{"location":"API/classes/Map/#inherited-from_24","title":"Inherited from","text":"<p><code>Camera.setCenter</code></p>"},{"location":"API/classes/Map/#setcenterclampedtoground","title":"setCenterClampedToGround()","text":"<p>setCenterClampedToGround(<code>centerClampedToGround</code>: <code>boolean</code>): <code>void</code></p> <p>Defined in: src/ui/camera.ts:422</p> <p>Sets the value of <code>centerClampedToGround</code>.</p> <p>If true, the elevation of the center point will automatically be set to the terrain elevation (or zero if terrain is not enabled). If false, the elevation of the center point will default to sea level and will not automatically update. Defaults to true. Needs to be set to false to keep the camera above ground when pitch &gt; 90 degrees.</p>"},{"location":"API/classes/Map/#parameters_58","title":"Parameters","text":"Parameter Type <code>centerClampedToGround</code> <code>boolean</code>"},{"location":"API/classes/Map/#returns_103","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/Map/#inherited-from_25","title":"Inherited from","text":"<p><code>Camera.setCenterClampedToGround</code></p>"},{"location":"API/classes/Map/#setcenterelevation","title":"setCenterElevation()","text":"<p>setCenterElevation(<code>elevation</code>: <code>number</code>, <code>eventData?</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/camera.ts:399</p> <p>Sets the elevation of the map's center point, in meters above sea level. Equivalent to <code>jumpTo({elevation: elevation})</code>.</p> <p>Triggers the following events: <code>movestart</code> and <code>moveend</code>.</p>"},{"location":"API/classes/Map/#parameters_59","title":"Parameters","text":"Parameter Type Description <code>elevation</code> <code>number</code> The elevation to set, in meters above sea level. <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_104","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#inherited-from_26","title":"Inherited from","text":"<p><code>Camera.setCenterElevation</code></p>"},{"location":"API/classes/Map/#seteventedparent","title":"setEventedParent()","text":"<p>setEventedParent(<code>parent?</code>: <code>Evented</code>, <code>data?</code>: <code>any</code>): <code>Map</code></p> <p>Defined in: src/util/evented.ts:176</p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/Map/#parameters_60","title":"Parameters","text":"Parameter Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/Map/#returns_105","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/Map/#inherited-from_27","title":"Inherited from","text":"<p><code>Camera.setEventedParent</code></p>"},{"location":"API/classes/Map/#setfeaturestate","title":"setFeatureState()","text":"<p>setFeatureState(<code>feature</code>: <code>FeatureIdentifier</code>, <code>state</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/map.ts:3028</p> <p>Sets the <code>state</code> of a feature. A feature's <code>state</code> is a set of user-defined key-value pairs that are assigned to a feature at runtime. When using this method, the <code>state</code> object is merged with any existing key-value pairs in the feature's state. Features are identified by their <code>feature.id</code> attribute, which can be any number or string.</p> <p>This method can only be used with sources that have a <code>feature.id</code> attribute. The <code>feature.id</code> attribute can be defined in three ways:</p> <ul> <li>For vector or GeoJSON sources, including an <code>id</code> attribute in the original data file.</li> <li>For vector or GeoJSON sources, using the <code>promoteId</code> option at the time the source is defined.</li> <li>For GeoJSON sources, using the <code>generateId</code> option to auto-assign an <code>id</code> based on the feature's index in the source data. If you change feature data using <code>map.getSource('some id').setData(..)</code>, you may need to re-apply state taking into account updated <code>id</code> values.</li> </ul> <p>Note</p> <p>You can use the <code>feature-state</code> expression to access the values in a feature's state object for the purposes of styling.</p>"},{"location":"API/classes/Map/#parameters_61","title":"Parameters","text":"Parameter Type Description <code>feature</code> <code>FeatureIdentifier</code> Feature identifier. Feature objects returned from Map.queryRenderedFeatures or event handlers can be used as feature identifiers. <code>state</code> <code>any</code> A set of key-value pairs. The values should be valid JSON types."},{"location":"API/classes/Map/#returns_106","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_54","title":"Example","text":"<pre><code>// When the mouse moves over the `my-layer` layer, update\n// the feature state for the feature under the mouse\nmap.on('mousemove', 'my-layer', (e) =&gt; {\n  if (e.features.length &gt; 0) {\n    map.setFeatureState({\n      source: 'my-source',\n      sourceLayer: 'my-source-layer',\n      id: e.features[0].id,\n    }, {\n      hover: true\n    });\n  }\n});\n</code></pre>"},{"location":"API/classes/Map/#see_21","title":"See","text":"<p>Create a hover effect</p>"},{"location":"API/classes/Map/#setfilter","title":"setFilter()","text":"<p>setFilter(<code>layerId</code>: <code>string</code>, <code>filter?</code>: <code>FilterSpecification</code>, <code>options?</code>: <code>StyleSetterOptions</code>): <code>Map</code></p> <p>Defined in: src/ui/map.ts:2769</p> <p>Sets the filter for the specified style layer.</p> <p>Filters control which features a style layer renders from its source. Any feature for which the filter expression evaluates to <code>true</code> will be rendered on the map. Those that are false will be hidden.</p> <p>Use <code>setFilter</code> to show a subset of your source data.</p> <p>To clear the filter, pass <code>null</code> or <code>undefined</code> as the second parameter.</p>"},{"location":"API/classes/Map/#parameters_62","title":"Parameters","text":"Parameter Type Description <code>layerId</code> <code>string</code> The ID of the layer to which the filter will be applied. <code>filter?</code> <code>FilterSpecification</code> The filter, conforming to the MapLibre Style Specification's filter definition. If <code>null</code> or <code>undefined</code> is provided, the function removes any existing filter from the layer. <code>options?</code> <code>StyleSetterOptions</code> Options object."},{"location":"API/classes/Map/#returns_107","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/Map/#examples_5","title":"Examples","text":"<p>Display only features with the 'name' property 'USA' <pre><code>map.setFilter('my-layer', ['==', ['get', 'name'], 'USA']);\n</code></pre></p> <p>Display only features with five or more 'available-spots' <pre><code>map.setFilter('bike-docks', ['&gt;=', ['get', 'available-spots'], 5]);\n</code></pre></p> <p>Remove the filter for the 'bike-docks' style layer <pre><code>map.setFilter('bike-docks', null);\n</code></pre></p>"},{"location":"API/classes/Map/#see_22","title":"See","text":"<p>Create a timeline animation</p>"},{"location":"API/classes/Map/#setglobalstateproperty","title":"setGlobalStateProperty()","text":"<p>setGlobalStateProperty(<code>propertyName</code>: <code>string</code>, <code>value</code>: <code>any</code>): <code>Map</code></p> <p>Defined in: src/ui/map.ts:811</p> <p>Sets a global state property that can be retrieved with the <code>global-state</code> expression. If the value is null, it resets the property to its default value defined in the <code>state</code> style property.</p>"},{"location":"API/classes/Map/#parameters_63","title":"Parameters","text":"Parameter Type Description <code>propertyName</code> <code>string</code> The name of the state property to set. <code>value</code> <code>any</code> The value of the state property to set."},{"location":"API/classes/Map/#returns_108","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/Map/#setglyphs","title":"setGlyphs()","text":"<p>setGlyphs(<code>glyphsUrl</code>: <code>string</code>, <code>options</code>: <code>StyleSetterOptions</code>): <code>this</code></p> <p>Defined in: src/ui/map.ts:2854</p> <p>Sets the value of the style's glyphs property.</p>"},{"location":"API/classes/Map/#parameters_64","title":"Parameters","text":"Parameter Type Description <code>glyphsUrl</code> <code>string</code> Glyph URL to set. Must conform to the MapLibre Style Specification. <code>options</code> <code>StyleSetterOptions</code> Options object."},{"location":"API/classes/Map/#returns_109","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_55","title":"Example","text":"<pre><code>map.setGlyphs('https://demotiles.maplibre.org/font/{fontstack}/{range}.pbf');\n</code></pre>"},{"location":"API/classes/Map/#setlayerzoomrange","title":"setLayerZoomRange()","text":"<p>setLayerZoomRange(<code>layerId</code>: <code>string</code>, <code>minzoom</code>: <code>number</code>, <code>maxzoom</code>: <code>number</code>): <code>this</code></p> <p>Defined in: src/ui/map.ts:2731</p> <p>Sets the zoom extent for the specified style layer. The zoom extent includes the minimum zoom level and maximum zoom level) at which the layer will be rendered.</p> <p>Note</p> <p>For style layers using vector sources, style layers cannot be rendered at zoom levels lower than the minimum zoom level of the source layer because the data does not exist at those zoom levels. If the minimum zoom level of the source layer is higher than the minimum zoom level defined in the style layer, the style layer will not be rendered at all zoom levels in the zoom range.</p>"},{"location":"API/classes/Map/#parameters_65","title":"Parameters","text":"Parameter Type Description <code>layerId</code> <code>string</code> The ID of the layer to which the zoom extent will be applied. <code>minzoom</code> <code>number</code> The minimum zoom to set (0-24). <code>maxzoom</code> <code>number</code> The maximum zoom to set (0-24)."},{"location":"API/classes/Map/#returns_110","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_56","title":"Example","text":"<pre><code>map.setLayerZoomRange('my-layer', 2, 5);\n</code></pre>"},{"location":"API/classes/Map/#setlayoutproperty","title":"setLayoutProperty()","text":"<p>setLayoutProperty(<code>layerId</code>: <code>string</code>, <code>name</code>: <code>string</code>, <code>value</code>: <code>any</code>, <code>options</code>: <code>StyleSetterOptions</code>): <code>this</code></p> <p>Defined in: src/ui/map.ts:2828</p> <p>Sets the value of a layout property in the specified style layer.</p>"},{"location":"API/classes/Map/#parameters_66","title":"Parameters","text":"Parameter Type Description <code>layerId</code> <code>string</code> The ID of the layer to set the layout property in. <code>name</code> <code>string</code> The name of the layout property to set. <code>value</code> <code>any</code> The value of the layout property. Must be of a type appropriate for the property, as defined in the MapLibre Style Specification. <code>options</code> <code>StyleSetterOptions</code> The options object."},{"location":"API/classes/Map/#returns_111","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_57","title":"Example","text":"<pre><code>map.setLayoutProperty('my-layer', 'visibility', 'none');\n</code></pre>"},{"location":"API/classes/Map/#setlight","title":"setLight()","text":"<p>setLight(<code>light</code>: <code>LightSpecification</code>, <code>options</code>: <code>StyleSetterOptions</code>): <code>Map</code></p> <p>Defined in: src/ui/map.ts:2946</p> <p>Sets the any combination of light values.</p>"},{"location":"API/classes/Map/#parameters_67","title":"Parameters","text":"Parameter Type Description <code>light</code> <code>LightSpecification</code> Light properties to set. Must conform to the MapLibre Style Specification. <code>options</code> <code>StyleSetterOptions</code> Options object."},{"location":"API/classes/Map/#returns_112","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/Map/#example_58","title":"Example","text":"<pre><code>let layerVisibility = map.getLayoutProperty('my-layer', 'visibility');\n</code></pre>"},{"location":"API/classes/Map/#setmaxbounds","title":"setMaxBounds()","text":"<p>setMaxBounds(<code>bounds?</code>: <code>LngLatBoundsLike</code>): <code>Map</code></p> <p>Defined in: src/ui/map.ts:1079</p> <p>Sets or clears the map's geographical bounds.</p> <p>Pan and zoom operations are constrained within these bounds. If a pan or zoom is performed that would display regions outside these bounds, the map will instead display a position and zoom level as close as possible to the operation's request while still remaining within the bounds.</p>"},{"location":"API/classes/Map/#parameters_68","title":"Parameters","text":"Parameter Type Description <code>bounds?</code> <code>LngLatBoundsLike</code> The maximum bounds to set. If <code>null</code> or <code>undefined</code> is provided, the function removes the map's maximum bounds."},{"location":"API/classes/Map/#returns_113","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/Map/#example_59","title":"Example","text":"<p>Define bounds that conform to the <code>LngLatBoundsLike</code> object as set the max bounds. <pre><code>let bounds = [\n  [-74.04728, 40.68392], // [west, south]\n  [-73.91058, 40.87764]  // [east, north]\n];\nmap.setMaxBounds(bounds);\n</code></pre></p>"},{"location":"API/classes/Map/#setmaxpitch","title":"setMaxPitch()","text":"<p>setMaxPitch(<code>maxPitch?</code>: <code>number</code>): <code>Map</code></p> <p>Defined in: src/ui/map.ts:1215</p> <p>Sets or clears the map's maximum pitch. If the map's current pitch is higher than the new maximum, the map will pitch to the new maximum.</p> <p>A ErrorEvent event will be fired if maxPitch is out of bounds.</p>"},{"location":"API/classes/Map/#parameters_69","title":"Parameters","text":"Parameter Type Description <code>maxPitch?</code> <code>number</code> The maximum pitch to set (0-180). Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project. If <code>null</code> or <code>undefined</code> is provided, the function removes the current maximum pitch (sets it to 60)."},{"location":"API/classes/Map/#returns_114","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/Map/#setmaxzoom","title":"setMaxZoom()","text":"<p>setMaxZoom(<code>maxZoom?</code>: <code>number</code>): <code>Map</code></p> <p>Defined in: src/ui/map.ts:1143</p> <p>Sets or clears the map's maximum zoom level. If the map's current zoom level is higher than the new maximum, the map will zoom to the new maximum.</p> <p>A ErrorEvent event will be fired if minZoom is out of bounds.</p>"},{"location":"API/classes/Map/#parameters_70","title":"Parameters","text":"Parameter Type Description <code>maxZoom?</code> <code>number</code> The maximum zoom level to set. If <code>null</code> or <code>undefined</code> is provided, the function removes the current maximum zoom (sets it to 22)."},{"location":"API/classes/Map/#returns_115","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/Map/#example_60","title":"Example","text":"<pre><code>map.setMaxZoom(18.75);\n</code></pre>"},{"location":"API/classes/Map/#setminpitch","title":"setMinPitch()","text":"<p>setMinPitch(<code>minPitch?</code>: <code>number</code>): <code>Map</code></p> <p>Defined in: src/ui/map.ts:1179</p> <p>Sets or clears the map's minimum pitch. If the map's current pitch is lower than the new minimum, the map will pitch to the new minimum.</p> <p>A ErrorEvent event will be fired if minPitch is out of bounds.</p>"},{"location":"API/classes/Map/#parameters_71","title":"Parameters","text":"Parameter Type Description <code>minPitch?</code> <code>number</code> The minimum pitch to set (0-180). Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project. If <code>null</code> or <code>undefined</code> is provided, the function removes the current minimum pitch (i.e. sets it to 0)."},{"location":"API/classes/Map/#returns_116","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/Map/#setminzoom","title":"setMinZoom()","text":"<p>setMinZoom(<code>minZoom?</code>: <code>number</code>): <code>Map</code></p> <p>Defined in: src/ui/map.ts:1103</p> <p>Sets or clears the map's minimum zoom level. If the map's current zoom level is lower than the new minimum, the map will zoom to the new minimum.</p> <p>It is not always possible to zoom out and reach the set <code>minZoom</code>. Other factors such as map height may restrict zooming. For example, if the map is 512px tall it will not be possible to zoom below zoom 0 no matter what the <code>minZoom</code> is set to.</p> <p>A ErrorEvent event will be fired if minZoom is out of bounds.</p>"},{"location":"API/classes/Map/#parameters_72","title":"Parameters","text":"Parameter Type Description <code>minZoom?</code> <code>number</code> The minimum zoom level to set (-2 - 24). If <code>null</code> or <code>undefined</code> is provided, the function removes the current minimum zoom (i.e. sets it to -2)."},{"location":"API/classes/Map/#returns_117","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/Map/#example_61","title":"Example","text":"<pre><code>map.setMinZoom(12.25);\n</code></pre>"},{"location":"API/classes/Map/#setpadding","title":"setPadding()","text":"<p>setPadding(<code>padding</code>: <code>PaddingOptions</code>, <code>eventData?</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/camera.ts:641</p> <p>Sets the padding in pixels around the viewport.</p> <p>Equivalent to <code>jumpTo({padding: padding})</code>.</p> <p>Triggers the following events: <code>movestart</code> and <code>moveend</code>.</p>"},{"location":"API/classes/Map/#parameters_73","title":"Parameters","text":"Parameter Type Description <code>padding</code> <code>PaddingOptions</code> The desired padding. <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_118","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_62","title":"Example","text":"<p>Sets a left padding of 300px, and a top padding of 50px <pre><code>map.setPadding({ left: 300, top: 50 });\n</code></pre></p>"},{"location":"API/classes/Map/#inherited-from_28","title":"Inherited from","text":"<p><code>Camera.setPadding</code></p>"},{"location":"API/classes/Map/#setpaintproperty","title":"setPaintProperty()","text":"<p>setPaintProperty(<code>layerId</code>: <code>string</code>, <code>name</code>: <code>string</code>, <code>value</code>: <code>any</code>, <code>options</code>: <code>StyleSetterOptions</code>): <code>this</code></p> <p>Defined in: src/ui/map.ts:2800</p> <p>Sets the value of a paint property in the specified style layer.</p>"},{"location":"API/classes/Map/#parameters_74","title":"Parameters","text":"Parameter Type Description <code>layerId</code> <code>string</code> The ID of the layer to set the paint property in. <code>name</code> <code>string</code> The name of the paint property to set. <code>value</code> <code>any</code> The value of the paint property to set. Must be of a type appropriate for the property, as defined in the MapLibre Style Specification. Pass <code>null</code> to unset the existing value. <code>options</code> <code>StyleSetterOptions</code> Options object."},{"location":"API/classes/Map/#returns_119","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_63","title":"Example","text":"<pre><code>map.setPaintProperty('my-layer', 'fill-color', '#faafee');\n</code></pre>"},{"location":"API/classes/Map/#see_23","title":"See","text":"<ul> <li>Change a layer's color with buttons</li> <li>Create a draggable point</li> </ul>"},{"location":"API/classes/Map/#setpitch","title":"setPitch()","text":"<p>setPitch(<code>pitch</code>: <code>number</code>, <code>eventData?</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/camera.ts:724</p> <p>Sets the map's pitch (tilt). Equivalent to <code>jumpTo({pitch: pitch})</code>.</p> <p>Triggers the following events: <code>movestart</code>, <code>moveend</code>, <code>pitchstart</code>, and <code>pitchend</code>.</p>"},{"location":"API/classes/Map/#parameters_75","title":"Parameters","text":"Parameter Type Description <code>pitch</code> <code>number</code> The pitch to set, measured in degrees away from the plane of the screen (0-60). <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_120","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#inherited-from_29","title":"Inherited from","text":"<p><code>Camera.setPitch</code></p>"},{"location":"API/classes/Map/#setpixelratio","title":"setPixelRatio()","text":"<p>setPixelRatio(<code>pixelRatio</code>: <code>number</code>): <code>void</code></p> <p>Defined in: src/ui/map.ts:1028</p> <p>Sets the map's pixel ratio. This allows to override <code>devicePixelRatio</code>. After this call, the canvas' <code>width</code> attribute will be <code>container.clientWidth * pixelRatio</code> and its height attribute will be <code>container.clientHeight * pixelRatio</code>. Set this to null to disable <code>devicePixelRatio</code> override. Note that the pixel ratio actually applied may be lower to respect maxCanvasSize.</p>"},{"location":"API/classes/Map/#parameters_76","title":"Parameters","text":"Parameter Type Description <code>pixelRatio</code> <code>number</code> The pixel ratio."},{"location":"API/classes/Map/#returns_121","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/Map/#setprojection","title":"setProjection()","text":"<p>setProjection(<code>projection</code>: <code>ProjectionSpecification</code>): <code>Map</code></p> <p>Defined in: src/ui/map.ts:3669</p> <p>Sets the ProjectionSpecification.</p>"},{"location":"API/classes/Map/#parameters_77","title":"Parameters","text":"Parameter Type Description <code>projection</code> <code>ProjectionSpecification</code> the projection specification to set"},{"location":"API/classes/Map/#returns_122","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/Map/#setrenderworldcopies","title":"setRenderWorldCopies()","text":"<p>setRenderWorldCopies(<code>renderWorldCopies?</code>: <code>boolean</code>): <code>Map</code></p> <p>Defined in: src/ui/map.ts:1274</p> <p>Sets the state of <code>renderWorldCopies</code>.</p>"},{"location":"API/classes/Map/#parameters_78","title":"Parameters","text":"Parameter Type Description <code>renderWorldCopies?</code> <code>boolean</code> If <code>true</code>, multiple copies of the world will be rendered side by side beyond -180 and 180 degrees longitude. If set to <code>false</code>: - When the map is zoomed out far enough that a single representation of the world does not fill the map's entire container, there will be blank space beyond 180 and -180 degrees longitude. - Features that cross 180 and -180 degrees longitude will be cut in two (with one portion on the right edge of the map and the other on the left edge of the map) at every zoom level. <code>undefined</code> is treated as <code>true</code>, <code>null</code> is treated as <code>false</code>."},{"location":"API/classes/Map/#returns_123","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/Map/#example_64","title":"Example","text":"<pre><code>map.setRenderWorldCopies(true);\n</code></pre>"},{"location":"API/classes/Map/#see_24","title":"See","text":"<p>Render world copies</p>"},{"location":"API/classes/Map/#setroll","title":"setRoll()","text":"<p>setRoll(<code>roll</code>: <code>number</code>, <code>eventData?</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/camera.ts:744</p> <p>Sets the map's roll angle. Equivalent to <code>jumpTo({roll: roll})</code>.</p> <p>Triggers the following events: <code>movestart</code>, <code>moveend</code>, <code>rollstart</code>, and <code>rollend</code>.</p>"},{"location":"API/classes/Map/#parameters_79","title":"Parameters","text":"Parameter Type Description <code>roll</code> <code>number</code> The roll to set, measured in degrees about the camera boresight <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_124","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#inherited-from_30","title":"Inherited from","text":"<p><code>Camera.setRoll</code></p>"},{"location":"API/classes/Map/#setsky","title":"setSky()","text":"<p>setSky(<code>sky</code>: <code>SkySpecification</code>, <code>options</code>: <code>StyleSetterOptions</code>): <code>Map</code></p> <p>Defined in: src/ui/map.ts:2972</p> <p>Sets the value of style's sky properties.</p>"},{"location":"API/classes/Map/#parameters_80","title":"Parameters","text":"Parameter Type Description <code>sky</code> <code>SkySpecification</code> Sky properties to set. Must conform to the MapLibre Style Specification. <code>options</code> <code>StyleSetterOptions</code> Options object."},{"location":"API/classes/Map/#returns_125","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/Map/#example_65","title":"Example","text":"<pre><code>map.setSky({'atmosphere-blend': 1.0});\n</code></pre>"},{"location":"API/classes/Map/#setsourcetilelodparams","title":"setSourceTileLodParams()","text":"<p>setSourceTileLodParams(<code>maxZoomLevelsOnScreen</code>: <code>number</code>, <code>tileCountMaxMinRatio</code>: <code>number</code>, <code>sourceId?</code>: <code>string</code>): <code>this</code></p> <p>Defined in: src/ui/map.ts:2285</p> <p>Change the tile Level of Detail behavior of the specified source. These parameters have no effect when pitch == 0, and the largest effect when the horizon is visible on screen.</p>"},{"location":"API/classes/Map/#parameters_81","title":"Parameters","text":"Parameter Type Description <code>maxZoomLevelsOnScreen</code> <code>number</code> The maximum number of distinct zoom levels allowed on screen at a time. There will generally be fewer zoom levels on the screen, the maximum can only be reached when the horizon is at the top of the screen. Increasing the maximum number of zoom levels causes the zoom level to decay faster toward the horizon. <code>tileCountMaxMinRatio</code> <code>number</code> The ratio of the maximum number of tiles loaded (at high pitch) to the minimum number of tiles loaded. Increasing this ratio allows more tiles to be loaded at high pitch angles. If the ratio would otherwise be exceeded, the zoom level is reduced uniformly to keep the number of tiles within the limit. <code>sourceId?</code> <code>string</code> The ID of the source to set tile LOD parameters for. All sources will be updated if unspecified. If <code>sourceId</code> is specified but a corresponding source does not exist, an error is thrown."},{"location":"API/classes/Map/#returns_126","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_66","title":"Example","text":"<pre><code>map.setSourceTileLodParams(4.0, 3.0, 'terrain');\n</code></pre>"},{"location":"API/classes/Map/#see_25","title":"See","text":"<p>Modify Level of Detail behavior</p>"},{"location":"API/classes/Map/#setsprite","title":"setSprite()","text":"<p>setSprite(<code>spriteUrl</code>: <code>string</code>, <code>options</code>: <code>StyleSetterOptions</code>): <code>Map</code></p> <p>Defined in: src/ui/map.ts:2925</p> <p>Sets the value of the style's sprite property.</p>"},{"location":"API/classes/Map/#parameters_82","title":"Parameters","text":"Parameter Type Description <code>spriteUrl</code> <code>string</code> Sprite URL to set. <code>options</code> <code>StyleSetterOptions</code> Options object."},{"location":"API/classes/Map/#returns_127","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/Map/#example_67","title":"Example","text":"<pre><code>map.setSprite('YOUR_SPRITE_URL');\n</code></pre>"},{"location":"API/classes/Map/#setstyle","title":"setStyle()","text":"<p>setStyle(<code>style</code>: <code>string</code> | <code>StyleSpecification</code>, <code>options?</code>: <code>StyleSwapOptions</code> &amp; <code>StyleOptions</code>): <code>this</code></p> <p>Defined in: src/ui/map.ts:1909</p> <p>Updates the map's MapLibre style object with a new value.</p> <p>If a style is already set when this is used and options.diff is set to true, the map renderer will attempt to compare the given style against the map's current state and perform only the changes necessary to make the map style match the desired state. Changes in sprites (images used for icons and patterns) and glyphs (fonts for label text) cannot be diffed. If the sprites or fonts used in the current style and the given style are different in any way, the map renderer will force a full update, removing the current style and building the given one from scratch.</p>"},{"location":"API/classes/Map/#parameters_83","title":"Parameters","text":"Parameter Type Description <code>style</code> <code>string</code> | <code>StyleSpecification</code> A JSON object conforming to the schema described in the MapLibre Style Specification, or a URL to such JSON. <code>options?</code> <code>StyleSwapOptions</code> &amp; <code>StyleOptions</code> The options object."},{"location":"API/classes/Map/#returns_128","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_68","title":"Example","text":"<pre><code>map.setStyle(\"https://demotiles.maplibre.org/style.json\");\n\nmap.setStyle('https://demotiles.maplibre.org/style.json', {\n  transformStyle: (previousStyle, nextStyle) =&gt; ({\n      ...nextStyle,\n      sources: {\n          ...nextStyle.sources,\n          // copy a source from previous style\n          'osm': previousStyle.sources.osm\n      },\n      layers: [\n          // background layer\n          nextStyle.layers[0],\n          // copy a layer from previous style\n          previousStyle.layers[0],\n          // other layers from the next style\n          ...nextStyle.layers.slice(1).map(layer =&gt; {\n              // hide the layers we don't need from demotiles style\n              if (layer.id.startsWith('geolines')) {\n                  layer.layout = {...layer.layout || {}, visibility: 'none'};\n              // filter out US polygons\n              } else if (layer.id.startsWith('coastline') || layer.id.startsWith('countries')) {\n                  layer.filter = ['!=', ['get', 'ADM0_A3'], 'USA'];\n              }\n              return layer;\n          })\n      ]\n  })\n});\n</code></pre>"},{"location":"API/classes/Map/#setterrain","title":"setTerrain()","text":"<p>setTerrain(<code>options</code>: <code>TerrainSpecification</code>): <code>this</code></p> <p>Defined in: src/ui/map.ts:2129</p> <p>Loads a 3D terrain mesh, based on a \"raster-dem\" source.</p> <p>Triggers the <code>terrain</code> event.</p>"},{"location":"API/classes/Map/#parameters_84","title":"Parameters","text":"Parameter Type Description <code>options</code> <code>TerrainSpecification</code> Options object."},{"location":"API/classes/Map/#returns_129","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_69","title":"Example","text":"<pre><code>map.setTerrain({ source: 'terrain' });\n</code></pre>"},{"location":"API/classes/Map/#settransformconstrain","title":"setTransformConstrain()","text":"<p>setTransformConstrain(<code>constrain?</code>: <code>TransformConstrainFunction</code>): <code>Map</code></p> <p>Defined in: src/ui/map.ts:1293</p> <p>Sets or clears the callback overriding how the map constrains the viewport's lnglat and zoom to respect the longitude and latitude bounds.</p>"},{"location":"API/classes/Map/#parameters_85","title":"Parameters","text":"Parameter Type Description <code>constrain?</code> <code>TransformConstrainFunction</code> A TransformConstrainFunction callback defining how the viewport should respect the bounds. <code>null</code> clears the callback and reverses the override of the map transform's default constrain function."},{"location":"API/classes/Map/#returns_130","title":"Returns","text":"<p><code>Map</code></p>"},{"location":"API/classes/Map/#example_70","title":"Example","text":"<pre><code>function customTransformConstrain(lngLat, zoom) {\n  return {center: lngLat, zoom: zoom ?? 0};\n};\nmap.setTransformConstrain(customTransformConstrain);\n</code></pre>"},{"location":"API/classes/Map/#see_26","title":"See","text":"<p>Customize the map transform constrain</p>"},{"location":"API/classes/Map/#settransformrequest","title":"setTransformRequest()","text":"<p>setTransformRequest(<code>transformRequest</code>: <code>RequestTransformFunction</code>): <code>this</code></p> <p>Defined in: src/ui/map.ts:1936</p> <p>Updates the requestManager's transform request with a new function</p>"},{"location":"API/classes/Map/#parameters_86","title":"Parameters","text":"Parameter Type Description <code>transformRequest</code> <code>RequestTransformFunction</code> A callback run before the Map makes a request for an external URL. The callback can be used to modify the url, set headers, or set the credentials property for cross-origin requests. Expected to return an object with a <code>url</code> property and optionally <code>headers</code> and <code>credentials</code> properties"},{"location":"API/classes/Map/#returns_131","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_71","title":"Example","text":"<pre><code>map.setTransformRequest((url: string, resourceType: string) =&gt; {});\n</code></pre>"},{"location":"API/classes/Map/#setverticalfieldofview","title":"setVerticalFieldOfView()","text":"<p>setVerticalFieldOfView(<code>fov</code>: <code>number</code>, <code>eventData?</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/camera.ts:579</p> <p>Sets the map's vertical field of view, in degrees.</p> <p>Triggers the following events: <code>movestart</code>, <code>move</code>, and <code>moveend</code>.</p>"},{"location":"API/classes/Map/#parameters_87","title":"Parameters","text":"Parameter Type Description <code>fov</code> <code>number</code> The vertical field of view to set, in degrees (0-180). <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_132","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#default-value_1","title":"Default Value","text":"<pre><code>36.87\n</code></pre>"},{"location":"API/classes/Map/#example_72","title":"Example","text":"<p>Change vertical field of view to 30 degrees <pre><code>map.setVerticalFieldOfView(30);\n</code></pre></p>"},{"location":"API/classes/Map/#inherited-from_31","title":"Inherited from","text":"<p><code>Camera.setVerticalFieldOfView</code></p>"},{"location":"API/classes/Map/#setzoom","title":"setZoom()","text":"<p>setZoom(<code>zoom</code>: <code>number</code>, <code>eventData?</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/camera.ts:487</p> <p>Sets the map's zoom level. Equivalent to <code>jumpTo({zoom: zoom})</code>.</p> <p>Triggers the following events: <code>movestart</code>, <code>move</code>, <code>moveend</code>, <code>zoomstart</code>, <code>zoom</code>, and <code>zoomend</code>.</p>"},{"location":"API/classes/Map/#parameters_88","title":"Parameters","text":"Parameter Type Description <code>zoom</code> <code>number</code> The zoom level to set (0-20). <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_133","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_73","title":"Example","text":"<p>Zoom to the zoom level 5 without an animated transition <pre><code>map.setZoom(5);\n</code></pre></p>"},{"location":"API/classes/Map/#inherited-from_32","title":"Inherited from","text":"<p><code>Camera.setZoom</code></p>"},{"location":"API/classes/Map/#snaptonorth","title":"snapToNorth()","text":"<p>snapToNorth(<code>options?</code>: <code>AnimationOptions</code>, <code>eventData?</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/camera.ts:702</p> <p>Snaps the map so that north is up (0\u00b0 bearing), if the current bearing is close enough to it (i.e. within the <code>bearingSnap</code> threshold).</p> <p>Triggers the following events: <code>movestart</code>, <code>moveend</code>, and <code>rotate</code>.</p>"},{"location":"API/classes/Map/#parameters_89","title":"Parameters","text":"Parameter Type Description <code>options?</code> <code>AnimationOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_134","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#inherited-from_33","title":"Inherited from","text":"<p><code>Camera.snapToNorth</code></p>"},{"location":"API/classes/Map/#stop","title":"stop()","text":"<p>stop(): <code>this</code></p> <p>Defined in: src/ui/camera.ts:1563</p> <p>Stops any animated transition underway.</p>"},{"location":"API/classes/Map/#returns_135","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#inherited-from_34","title":"Inherited from","text":"<p><code>Camera.stop</code></p>"},{"location":"API/classes/Map/#triggerrepaint","title":"triggerRepaint()","text":"<p>triggerRepaint(): <code>void</code></p> <p>Defined in: src/ui/map.ts:3531</p> <p>Trigger the rendering of a single frame. Use this method with custom layers to repaint the map when the layer changes. Calling this multiple times before the next frame is rendered will still result in only a single frame being rendered.</p>"},{"location":"API/classes/Map/#returns_136","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/Map/#example_74","title":"Example","text":"<pre><code>map.triggerRepaint();\n</code></pre>"},{"location":"API/classes/Map/#see_27","title":"See","text":"<ul> <li>Add a 3D model</li> <li>Add an animated icon to the map</li> </ul>"},{"location":"API/classes/Map/#unproject","title":"unproject()","text":"<p>unproject(<code>point</code>: <code>PointLike</code>): <code>LngLat</code></p> <p>Defined in: src/ui/map.ts:1328</p> <p>Returns a LngLat representing geographical coordinates that correspond to the specified pixel coordinates.</p>"},{"location":"API/classes/Map/#parameters_90","title":"Parameters","text":"Parameter Type Description <code>point</code> <code>PointLike</code> The pixel coordinates to unproject."},{"location":"API/classes/Map/#returns_137","title":"Returns","text":"<p><code>LngLat</code></p> <p>The LngLat corresponding to <code>point</code>.</p>"},{"location":"API/classes/Map/#example_75","title":"Example","text":"<pre><code>map.on('click', (e) =&gt; {\n  // When the map is clicked, get the geographic coordinate.\n  let coordinate = map.unproject(e.point);\n});\n</code></pre>"},{"location":"API/classes/Map/#updateimage","title":"updateImage()","text":"<p>updateImage(<code>id</code>: <code>string</code>, <code>image</code>: <code>ImageBitmap</code> | <code>HTMLImageElement</code> | <code>ImageData</code> | <code>StyleImageInterface</code> | { <code>data</code>: <code>Uint8Array</code>&lt;<code>ArrayBufferLike</code>&gt; | <code>Uint8ClampedArray</code>&lt;<code>ArrayBufferLike</code>&gt;; <code>height</code>: <code>number</code>; <code>width</code>: <code>number</code>; }): <code>this</code></p> <p>Defined in: src/ui/map.ts:2427</p> <p>Update an existing image in a style. This image can be displayed on the map like any other icon in the style's sprite using the image's ID with <code>icon-image</code>, <code>background-pattern</code>, <code>fill-pattern</code>, or <code>line-pattern</code>.</p> <p>An ErrorEvent will be fired if the image parameter is invalid.</p>"},{"location":"API/classes/Map/#parameters_91","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> The ID of the image. <code>image</code> <code>ImageBitmap</code> | <code>HTMLImageElement</code> | <code>ImageData</code> | <code>StyleImageInterface</code> | { <code>data</code>: <code>Uint8Array</code>&lt;<code>ArrayBufferLike</code>&gt; | <code>Uint8ClampedArray</code>&lt;<code>ArrayBufferLike</code>&gt;; <code>height</code>: <code>number</code>; <code>width</code>: <code>number</code>; } The image as an <code>HTMLImageElement</code>, <code>ImageData</code>, <code>ImageBitmap</code> or object with <code>width</code>, <code>height</code>, and <code>data</code> properties with the same format as <code>ImageData</code>."},{"location":"API/classes/Map/#returns_138","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_76","title":"Example","text":"<pre><code>// If an image with the ID 'cat' already exists in the style's sprite,\n// replace that image with a new image, 'other-cat-icon.png'.\nif (map.hasImage('cat')) map.updateImage('cat', './other-cat-icon.png');\n</code></pre>"},{"location":"API/classes/Map/#zoomin","title":"zoomIn()","text":"<p>zoomIn(<code>options?</code>: <code>AnimationOptions</code>, <code>eventData?</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/camera.ts:530</p> <p>Increases the map's zoom level by 1.</p> <p>Triggers the following events: <code>movestart</code>, <code>move</code>, <code>moveend</code>, <code>zoomstart</code>, <code>zoom</code>, and <code>zoomend</code>.</p>"},{"location":"API/classes/Map/#parameters_92","title":"Parameters","text":"Parameter Type Description <code>options?</code> <code>AnimationOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_139","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_77","title":"Example","text":"<p>Zoom the map in one level with a custom animation duration <pre><code>map.zoomIn({duration: 1000});\n</code></pre></p>"},{"location":"API/classes/Map/#inherited-from_35","title":"Inherited from","text":"<p><code>Camera.zoomIn</code></p>"},{"location":"API/classes/Map/#zoomout","title":"zoomOut()","text":"<p>zoomOut(<code>options?</code>: <code>AnimationOptions</code>, <code>eventData?</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/camera.ts:548</p> <p>Decreases the map's zoom level by 1.</p> <p>Triggers the following events: <code>movestart</code>, <code>move</code>, <code>moveend</code>, <code>zoomstart</code>, <code>zoom</code>, and <code>zoomend</code>.</p>"},{"location":"API/classes/Map/#parameters_93","title":"Parameters","text":"Parameter Type Description <code>options?</code> <code>AnimationOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_140","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_78","title":"Example","text":"<p>Zoom the map out one level with a custom animation offset <pre><code>map.zoomOut({offset: [80, 60]});\n</code></pre></p>"},{"location":"API/classes/Map/#inherited-from_36","title":"Inherited from","text":"<p><code>Camera.zoomOut</code></p>"},{"location":"API/classes/Map/#zoomto","title":"zoomTo()","text":"<p>zoomTo(<code>zoom</code>: <code>number</code>, <code>options?</code>: <code>EaseToOptions</code>, <code>eventData?</code>: <code>any</code>): <code>this</code></p> <p>Defined in: src/ui/camera.ts:511</p> <p>Zooms the map to the specified zoom level, with an animated transition.</p> <p>Triggers the following events: <code>movestart</code>, <code>move</code>, <code>moveend</code>, <code>zoomstart</code>, <code>zoom</code>, and <code>zoomend</code>.</p>"},{"location":"API/classes/Map/#parameters_94","title":"Parameters","text":"Parameter Type Description <code>zoom</code> <code>number</code> The zoom level to transition to. <code>options?</code> <code>EaseToOptions</code> Options object <code>eventData?</code> <code>any</code> Additional properties to be added to event objects of events triggered by this method."},{"location":"API/classes/Map/#returns_141","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Map/#example_79","title":"Example","text":"<pre><code>// Zoom to the zoom level 5 without an animated transition\nmap.zoomTo(5);\n// Zoom to the zoom level 8 with an animated transition\nmap.zoomTo(8, {\n  duration: 2000,\n  offset: [100, 50]\n});\n</code></pre>"},{"location":"API/classes/Map/#inherited-from_37","title":"Inherited from","text":"<p><code>Camera.zoomTo</code></p>"},{"location":"API/classes/Map/#properties","title":"Properties","text":""},{"location":"API/classes/Map/#boxzoom","title":"boxZoom","text":"<p>boxZoom: <code>BoxZoomHandler</code></p> <p>Defined in: src/ui/map.ts:558</p> <p>The map's BoxZoomHandler, which implements zooming using a drag gesture with the Shift key pressed. Find more details and examples using <code>boxZoom</code> in the BoxZoomHandler section.</p>"},{"location":"API/classes/Map/#cancelpendingtilerequestswhilezooming","title":"cancelPendingTileRequestsWhileZooming","text":"<p>cancelPendingTileRequestsWhileZooming: <code>boolean</code></p> <p>Defined in: src/ui/map.ts:609</p> <p>The map's property which determines whether to cancel, or retain, tiles from the current viewport which are still loading but which belong to a farther (smaller) zoom level than the current one. * If <code>true</code>, when zooming in, tiles which didn't manage to load for previous zoom levels will become canceled. This might save some computing resources for slower devices, but the map details might appear more abruptly at the end of the zoom. * If <code>false</code>, when zooming in, the previous zoom level(s) tiles will progressively appear, giving a smoother map details experience. However, more tiles will be rendered in a short period of time.</p>"},{"location":"API/classes/Map/#default-value_2","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/classes/Map/#cooperativegestures","title":"cooperativeGestures","text":"<p>cooperativeGestures: <code>CooperativeGesturesHandler</code></p> <p>Defined in: src/ui/map.ts:601</p> <p>The map's CooperativeGesturesHandler, which allows the user to see cooperative gesture info when user tries to zoom in/out. Find more details and examples using <code>cooperativeGestures</code> in the CooperativeGesturesHandler section.</p>"},{"location":"API/classes/Map/#doubleclickzoom","title":"doubleClickZoom","text":"<p>doubleClickZoom: <code>DoubleClickZoomHandler</code></p> <p>Defined in: src/ui/map.ts:583</p> <p>The map's DoubleClickZoomHandler, which allows the user to zoom by double clicking. Find more details and examples using <code>doubleClickZoom</code> in the DoubleClickZoomHandler section.</p>"},{"location":"API/classes/Map/#dragpan","title":"dragPan","text":"<p>dragPan: <code>DragPanHandler</code></p> <p>Defined in: src/ui/map.ts:571</p> <p>The map's DragPanHandler, which implements dragging the map with a mouse or touch gesture. Find more details and examples using <code>dragPan</code> in the DragPanHandler section.</p>"},{"location":"API/classes/Map/#dragrotate","title":"dragRotate","text":"<p>dragRotate: <code>DragRotateHandler</code></p> <p>Defined in: src/ui/map.ts:565</p> <p>The map's DragRotateHandler, which implements rotating the map while dragging with the right mouse button or with the Control key pressed. Find more details and examples using <code>dragRotate</code> in the DragRotateHandler section.</p>"},{"location":"API/classes/Map/#keyboard","title":"keyboard","text":"<p>keyboard: <code>KeyboardHandler</code></p> <p>Defined in: src/ui/map.ts:577</p> <p>The map's KeyboardHandler, which allows the user to zoom, rotate, and pan the map using keyboard shortcuts. Find more details and examples using <code>keyboard</code> in the KeyboardHandler section.</p>"},{"location":"API/classes/Map/#scrollzoom","title":"scrollZoom","text":"<p>scrollZoom: <code>ScrollZoomHandler</code></p> <p>Defined in: src/ui/map.ts:552</p> <p>The map's ScrollZoomHandler, which implements zooming in and out with a scroll wheel or trackpad. Find more details and examples using <code>scrollZoom</code> in the ScrollZoomHandler section.</p>"},{"location":"API/classes/Map/#touchpitch","title":"touchPitch","text":"<p>touchPitch: <code>TwoFingersTouchPitchHandler</code></p> <p>Defined in: src/ui/map.ts:595</p> <p>The map's TwoFingersTouchPitchHandler, which allows the user to pitch the map with touch gestures. Find more details and examples using <code>touchPitch</code> in the TwoFingersTouchPitchHandler section.</p>"},{"location":"API/classes/Map/#touchzoomrotate","title":"touchZoomRotate","text":"<p>touchZoomRotate: <code>TwoFingersTouchZoomRotateHandler</code></p> <p>Defined in: src/ui/map.ts:589</p> <p>The map's TwoFingersTouchZoomRotateHandler, which allows the user to zoom or rotate the map with touch gestures. Find more details and examples using <code>touchZoomRotate</code> in the TwoFingersTouchZoomRotateHandler section.</p>"},{"location":"API/classes/Map/#transformcameraupdate","title":"transformCameraUpdate","text":"<p>transformCameraUpdate: <code>CameraUpdateTransformFunction</code></p> <p>Defined in: src/ui/camera.ts:313</p> <p>A callback used to defer camera updates or apply arbitrary constraints. If specified, this Camera instance can be used as a stateless component in React etc.</p>"},{"location":"API/classes/Map/#inherited-from_38","title":"Inherited from","text":"<p><code>Camera.transformCameraUpdate</code></p>"},{"location":"API/classes/Map/#transformconstrain","title":"transformConstrain","text":"<p>transformConstrain: <code>TransformConstrainFunction</code></p> <p>Defined in: src/ui/map.ts:615</p> <p>The map transform's callback that overrides the default constrain function.</p>"},{"location":"API/classes/Map/#default-value_3","title":"Default Value","text":"<pre><code>null\n</code></pre>"},{"location":"API/classes/MapMouseEvent/","title":"MapMouseEvent","text":"<p>Defined in: src/ui/events.ts:491</p> <p><code>MapMouseEvent</code> is the event type for mouse-related map events.</p>"},{"location":"API/classes/MapMouseEvent/#example","title":"Example","text":"<pre><code>// The `click` event is an example of a `MapMouseEvent`.\n// Set up an event listener on the map.\nmap.on('click', (e) =&gt; {\n  // The event object (e) contains information like the\n  // coordinates of the point on the map that was clicked.\n  console.log('A click event has occurred at ' + e.lngLat);\n});\n</code></pre>"},{"location":"API/classes/MapMouseEvent/#extends","title":"Extends","text":"<ul> <li><code>Event</code></li> </ul>"},{"location":"API/classes/MapMouseEvent/#implements","title":"Implements","text":"<ul> <li><code>MapLibreEvent</code>&lt;<code>MouseEvent</code>&gt;</li> </ul>"},{"location":"API/classes/MapMouseEvent/#accessors","title":"Accessors","text":""},{"location":"API/classes/MapMouseEvent/#defaultprevented","title":"defaultPrevented","text":""},{"location":"API/classes/MapMouseEvent/#get-signature","title":"Get Signature","text":"<p>get defaultPrevented(): <code>boolean</code></p> <p>Defined in: src/ui/events.ts:535</p> <p><code>true</code> if <code>preventDefault</code> has been called.</p>"},{"location":"API/classes/MapMouseEvent/#returns","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/MapMouseEvent/#methods","title":"Methods","text":""},{"location":"API/classes/MapMouseEvent/#preventdefault","title":"preventDefault()","text":"<p>preventDefault(): <code>void</code></p> <p>Defined in: src/ui/events.ts:528</p> <p>Prevents subsequent default processing of the event by the map.</p> <p>Calling this method will prevent the following default map behaviors:</p> <ul> <li>On <code>mousedown</code> events, the behavior of DragPanHandler</li> <li>On <code>mousedown</code> events, the behavior of DragRotateHandler</li> <li>On <code>mousedown</code> events, the behavior of BoxZoomHandler</li> <li>On <code>dblclick</code> events, the behavior of DoubleClickZoomHandler</li> </ul>"},{"location":"API/classes/MapMouseEvent/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/MapMouseEvent/#properties","title":"Properties","text":""},{"location":"API/classes/MapMouseEvent/#lnglat","title":"lngLat","text":"<p>lngLat: <code>LngLat</code></p> <p>Defined in: src/ui/events.ts:515</p> <p>The geographic location on the map of the mouse cursor.</p>"},{"location":"API/classes/MapMouseEvent/#originalevent","title":"originalEvent","text":"<p>originalEvent: <code>MouseEvent</code></p> <p>Defined in: src/ui/events.ts:505</p> <p>The DOM event which caused the map event.</p>"},{"location":"API/classes/MapMouseEvent/#implementation-of","title":"Implementation of","text":"<p><code>MapLibreEvent.originalEvent</code></p>"},{"location":"API/classes/MapMouseEvent/#point","title":"point","text":"<p>point: <code>Point</code></p> <p>Defined in: src/ui/events.ts:510</p> <p>The pixel coordinates of the mouse cursor, relative to the map and measured from the top left corner.</p>"},{"location":"API/classes/MapMouseEvent/#target","title":"target","text":"<p>target: <code>Map</code></p> <p>Defined in: src/ui/events.ts:500</p> <p>The <code>Map</code> object that fired the event.</p>"},{"location":"API/classes/MapMouseEvent/#implementation-of_1","title":"Implementation of","text":"<p><code>MapLibreEvent.target</code></p>"},{"location":"API/classes/MapMouseEvent/#type","title":"type","text":"<p>type: <code>\"click\"</code> | <code>\"contextmenu\"</code> | <code>\"dblclick\"</code> | <code>\"mousedown\"</code> | <code>\"mouseenter\"</code> | <code>\"mouseleave\"</code> | <code>\"mousemove\"</code> | <code>\"mouseout\"</code> | <code>\"mouseover\"</code> | <code>\"mouseup\"</code></p> <p>Defined in: src/ui/events.ts:495</p> <p>The event type</p>"},{"location":"API/classes/MapMouseEvent/#implementation-of_2","title":"Implementation of","text":"<p><code>MapLibreEvent.type</code></p>"},{"location":"API/classes/MapMouseEvent/#overrides","title":"Overrides","text":"<p><code>Event.type</code></p>"},{"location":"API/classes/MapTouchEvent/","title":"MapTouchEvent","text":"<p>Defined in: src/ui/events.ts:556</p> <p><code>MapTouchEvent</code> is the event type for touch-related map events.</p>"},{"location":"API/classes/MapTouchEvent/#extends","title":"Extends","text":"<ul> <li><code>Event</code></li> </ul>"},{"location":"API/classes/MapTouchEvent/#implements","title":"Implements","text":"<ul> <li><code>MapLibreEvent</code>&lt;<code>TouchEvent</code>&gt;</li> </ul>"},{"location":"API/classes/MapTouchEvent/#accessors","title":"Accessors","text":""},{"location":"API/classes/MapTouchEvent/#defaultprevented","title":"defaultPrevented","text":""},{"location":"API/classes/MapTouchEvent/#get-signature","title":"Get Signature","text":"<p>get defaultPrevented(): <code>boolean</code></p> <p>Defined in: src/ui/events.ts:611</p> <p><code>true</code> if <code>preventDefault</code> has been called.</p>"},{"location":"API/classes/MapTouchEvent/#returns","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/MapTouchEvent/#methods","title":"Methods","text":""},{"location":"API/classes/MapTouchEvent/#preventdefault","title":"preventDefault()","text":"<p>preventDefault(): <code>void</code></p> <p>Defined in: src/ui/events.ts:604</p> <p>Prevents subsequent default processing of the event by the map.</p> <p>Calling this method will prevent the following default map behaviors:</p> <ul> <li>On <code>touchstart</code> events, the behavior of DragPanHandler</li> <li>On <code>touchstart</code> events, the behavior of TwoFingersTouchZoomRotateHandler</li> </ul>"},{"location":"API/classes/MapTouchEvent/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/MapTouchEvent/#properties","title":"Properties","text":""},{"location":"API/classes/MapTouchEvent/#lnglat","title":"lngLat","text":"<p>lngLat: <code>LngLat</code></p> <p>Defined in: src/ui/events.ts:575</p> <p>The geographic location on the map of the center of the touch event points.</p>"},{"location":"API/classes/MapTouchEvent/#lnglats","title":"lngLats","text":"<p>lngLats: <code>LngLat</code>[]</p> <p>Defined in: src/ui/events.ts:593</p> <p>The geographical locations on the map corresponding to a touch event's <code>touches</code> property.</p>"},{"location":"API/classes/MapTouchEvent/#originalevent","title":"originalEvent","text":"<p>originalEvent: <code>TouchEvent</code></p> <p>Defined in: src/ui/events.ts:570</p> <p>The DOM event which caused the map event.</p>"},{"location":"API/classes/MapTouchEvent/#implementation-of","title":"Implementation of","text":"<p><code>MapLibreEvent.originalEvent</code></p>"},{"location":"API/classes/MapTouchEvent/#point","title":"point","text":"<p>point: <code>Point</code></p> <p>Defined in: src/ui/events.ts:581</p> <p>The pixel coordinates of the center of the touch event points, relative to the map and measured from the top left corner.</p>"},{"location":"API/classes/MapTouchEvent/#points","title":"points","text":"<p>points: <code>Point</code>[]</p> <p>Defined in: src/ui/events.ts:587</p> <p>The array of pixel coordinates corresponding to a touch event's <code>touches</code> property.</p>"},{"location":"API/classes/MapTouchEvent/#target","title":"target","text":"<p>target: <code>Map</code></p> <p>Defined in: src/ui/events.ts:565</p> <p>The <code>Map</code> object that fired the event.</p>"},{"location":"API/classes/MapTouchEvent/#implementation-of_1","title":"Implementation of","text":"<p><code>MapLibreEvent.target</code></p>"},{"location":"API/classes/MapTouchEvent/#type","title":"type","text":"<p>type: <code>\"touchcancel\"</code> | <code>\"touchend\"</code> | <code>\"touchmove\"</code> | <code>\"touchstart\"</code></p> <p>Defined in: src/ui/events.ts:560</p> <p>The event type.</p>"},{"location":"API/classes/MapTouchEvent/#implementation-of_2","title":"Implementation of","text":"<p><code>MapLibreEvent.type</code></p>"},{"location":"API/classes/MapTouchEvent/#overrides","title":"Overrides","text":"<p><code>Event.type</code></p>"},{"location":"API/classes/MapWheelEvent/","title":"MapWheelEvent","text":"<p>Defined in: src/ui/events.ts:635</p> <p><code>MapWheelEvent</code> is the event type for the <code>wheel</code> map event.</p>"},{"location":"API/classes/MapWheelEvent/#extends","title":"Extends","text":"<ul> <li><code>Event</code></li> </ul>"},{"location":"API/classes/MapWheelEvent/#accessors","title":"Accessors","text":""},{"location":"API/classes/MapWheelEvent/#defaultprevented","title":"defaultPrevented","text":""},{"location":"API/classes/MapWheelEvent/#get-signature","title":"Get Signature","text":"<p>get defaultPrevented(): <code>boolean</code></p> <p>Defined in: src/ui/events.ts:663</p> <p><code>true</code> if <code>preventDefault</code> has been called.</p>"},{"location":"API/classes/MapWheelEvent/#returns","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/MapWheelEvent/#constructors","title":"Constructors","text":""},{"location":"API/classes/MapWheelEvent/#constructor","title":"Constructor","text":"<p>new MapWheelEvent(<code>type</code>: <code>string</code>, <code>map</code>: <code>Map</code>, <code>originalEvent</code>: <code>WheelEvent</code>): <code>MapWheelEvent</code></p> <p>Defined in: src/ui/events.ts:670</p>"},{"location":"API/classes/MapWheelEvent/#parameters","title":"Parameters","text":"Parameter Type <code>type</code> <code>string</code> <code>map</code> <code>Map</code> <code>originalEvent</code> <code>WheelEvent</code>"},{"location":"API/classes/MapWheelEvent/#returns_1","title":"Returns","text":"<p><code>MapWheelEvent</code></p>"},{"location":"API/classes/MapWheelEvent/#overrides","title":"Overrides","text":"<p><code>Event.constructor</code></p>"},{"location":"API/classes/MapWheelEvent/#methods","title":"Methods","text":""},{"location":"API/classes/MapWheelEvent/#preventdefault","title":"preventDefault()","text":"<p>preventDefault(): <code>void</code></p> <p>Defined in: src/ui/events.ts:656</p> <p>Prevents subsequent default processing of the event by the map.</p> <p>Calling this method will prevent the behavior of ScrollZoomHandler.</p>"},{"location":"API/classes/MapWheelEvent/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/MapWheelEvent/#properties","title":"Properties","text":""},{"location":"API/classes/MapWheelEvent/#originalevent","title":"originalEvent","text":"<p>originalEvent: <code>WheelEvent</code></p> <p>Defined in: src/ui/events.ts:649</p> <p>The DOM event which caused the map event.</p>"},{"location":"API/classes/MapWheelEvent/#target","title":"target","text":"<p>target: <code>Map</code></p> <p>Defined in: src/ui/events.ts:644</p> <p>The <code>Map</code> object that fired the event.</p>"},{"location":"API/classes/MapWheelEvent/#type","title":"type","text":"<p>type: <code>\"wheel\"</code></p> <p>Defined in: src/ui/events.ts:639</p> <p>The event type.</p>"},{"location":"API/classes/MapWheelEvent/#overrides_1","title":"Overrides","text":"<p><code>Event.type</code></p>"},{"location":"API/classes/Marker/","title":"Marker","text":"<p>Defined in: src/ui/marker.ts:127</p> <p>Creates a marker component</p>"},{"location":"API/classes/Marker/#examples","title":"Examples","text":"<pre><code>let marker = new Marker()\n  .setLngLat([30.5, 50.5])\n  .addTo(map);\n</code></pre> <p>Set options <pre><code>let marker = new Marker({\n    color: \"#FFFFFF\",\n    draggable: true\n  }).setLngLat([30.5, 50.5])\n  .addTo(map);\n</code></pre></p>"},{"location":"API/classes/Marker/#see","title":"See","text":"<ul> <li>Add custom icons with Markers</li> <li>Create a draggable Marker</li> </ul>"},{"location":"API/classes/Marker/#events","title":"Events","text":"<p>Event <code>dragstart</code> of type Event will be fired when dragging starts.</p> <p>Event <code>drag</code> of type Event will be fired while dragging.</p> <p>Event <code>dragend</code> of type Event will be fired when the marker is finished being dragged.</p>"},{"location":"API/classes/Marker/#extends","title":"Extends","text":"<ul> <li><code>Evented</code></li> </ul>"},{"location":"API/classes/Marker/#constructors","title":"Constructors","text":""},{"location":"API/classes/Marker/#constructor","title":"Constructor","text":"<p>new Marker(<code>options?</code>: <code>MarkerOptions</code>): <code>Marker</code></p> <p>Defined in: src/ui/marker.ts:157</p>"},{"location":"API/classes/Marker/#parameters","title":"Parameters","text":"Parameter Type Description <code>options?</code> <code>MarkerOptions</code> the options"},{"location":"API/classes/Marker/#returns","title":"Returns","text":"<p><code>Marker</code></p>"},{"location":"API/classes/Marker/#overrides","title":"Overrides","text":"<p><code>Evented.constructor</code></p>"},{"location":"API/classes/Marker/#methods","title":"Methods","text":""},{"location":"API/classes/Marker/#addclassname","title":"addClassName()","text":"<p>addClassName(<code>className</code>: <code>string</code>): <code>void</code></p> <p>Defined in: src/ui/marker.ts:674</p> <p>Adds a CSS class to the marker element.</p>"},{"location":"API/classes/Marker/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>className</code> <code>string</code> on-empty string with CSS class name to add to marker element"},{"location":"API/classes/Marker/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/Marker/#example","title":"Example","text":"<pre><code>let marker = new Marker()\nmarker.addClassName('some-class')\n</code></pre>"},{"location":"API/classes/Marker/#addto","title":"addTo()","text":"<p>addTo(<code>map</code>: <code>Map</code>): <code>this</code></p> <p>Defined in: src/ui/marker.ts:315</p> <p>Attaches the <code>Marker</code> to a <code>Map</code> object.</p>"},{"location":"API/classes/Marker/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> The MapLibre GL JS map to add the marker to."},{"location":"API/classes/Marker/#returns_2","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Marker/#example_1","title":"Example","text":"<pre><code>let marker = new Marker()\n  .setLngLat([30.5, 50.5])\n  .addTo(map); // add the marker to the map\n</code></pre>"},{"location":"API/classes/Marker/#getelement","title":"getElement()","text":"<p>getElement(): <code>HTMLElement</code></p> <p>Defined in: src/ui/marker.ts:424</p> <p>Returns the <code>Marker</code>'s HTML element.</p>"},{"location":"API/classes/Marker/#returns_3","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>element</p>"},{"location":"API/classes/Marker/#getlnglat","title":"getLngLat()","text":"<p>getLngLat(): <code>LngLat</code></p> <p>Defined in: src/ui/marker.ts:395</p> <p>Get the marker's geographical location.</p> <p>The longitude of the result may differ by a multiple of 360 degrees from the longitude previously set by <code>setLngLat</code> because <code>Marker</code> wraps the anchor longitude across copies of the world to keep the marker on screen.</p>"},{"location":"API/classes/Marker/#returns_4","title":"Returns","text":"<p><code>LngLat</code></p> <p>A LngLat describing the marker's location.</p>"},{"location":"API/classes/Marker/#example_2","title":"Example","text":"<pre><code>// Store the marker's longitude and latitude coordinates in a variable\nlet lngLat = marker.getLngLat();\n// Print the marker's longitude and latitude values in the console\nconsole.log('Longitude: ' + lngLat.lng + ', Latitude: ' + lngLat.lat )\n</code></pre>"},{"location":"API/classes/Marker/#see_1","title":"See","text":"<p>Create a draggable Marker</p>"},{"location":"API/classes/Marker/#getoffset","title":"getOffset()","text":"<p>getOffset(): <code>Point</code></p> <p>Defined in: src/ui/marker.ts:649</p> <p>Get the marker's offset.</p>"},{"location":"API/classes/Marker/#returns_5","title":"Returns","text":"<p><code>Point</code></p> <p>The marker's screen coordinates in pixels.</p>"},{"location":"API/classes/Marker/#getpitchalignment","title":"getPitchAlignment()","text":"<p>getPitchAlignment(): <code>Alignment</code></p> <p>Defined in: src/ui/marker.ts:852</p> <p>Returns the current <code>pitchAlignment</code> property of the marker.</p>"},{"location":"API/classes/Marker/#returns_6","title":"Returns","text":"<p><code>Alignment</code></p> <p>The current pitch alignment of the marker in degrees.</p>"},{"location":"API/classes/Marker/#getpopup","title":"getPopup()","text":"<p>getPopup(): <code>Popup</code></p> <p>Defined in: src/ui/marker.ts:530</p> <p>Returns the Popup instance that is bound to the Marker.</p>"},{"location":"API/classes/Marker/#returns_7","title":"Returns","text":"<p><code>Popup</code></p> <p>popup</p>"},{"location":"API/classes/Marker/#example_3","title":"Example","text":"<pre><code>let marker = new Marker()\n .setLngLat([0, 0])\n .setPopup(new Popup().setHTML(\"&lt;h1&gt;Hello World!&lt;/h1&gt;\"))\n .addTo(map);\n\nconsole.log(marker.getPopup()); // return the popup instance\n</code></pre>"},{"location":"API/classes/Marker/#getrotation","title":"getRotation()","text":"<p>getRotation(): <code>number</code></p> <p>Defined in: src/ui/marker.ts:816</p> <p>Returns the current rotation angle of the marker (in degrees).</p>"},{"location":"API/classes/Marker/#returns_8","title":"Returns","text":"<p><code>number</code></p> <p>The current rotation angle of the marker.</p>"},{"location":"API/classes/Marker/#getrotationalignment","title":"getRotationAlignment()","text":"<p>getRotationAlignment(): <code>Alignment</code></p> <p>Defined in: src/ui/marker.ts:834</p> <p>Returns the current <code>rotationAlignment</code> property of the marker.</p>"},{"location":"API/classes/Marker/#returns_9","title":"Returns","text":"<p><code>Alignment</code></p> <p>The current rotational alignment of the marker.</p>"},{"location":"API/classes/Marker/#isdraggable","title":"isDraggable()","text":"<p>isDraggable(): <code>boolean</code></p> <p>Defined in: src/ui/marker.ts:798</p> <p>Returns true if the marker can be dragged</p>"},{"location":"API/classes/Marker/#returns_10","title":"Returns","text":"<p><code>boolean</code></p> <p>True if the marker is draggable.</p>"},{"location":"API/classes/Marker/#listens","title":"listens()","text":"<p>listens(<code>type</code>: <code>string</code>): <code>boolean</code></p> <p>Defined in: src/util/evented.ts:165</p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/Marker/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/Marker/#returns_11","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/Marker/#inherited-from","title":"Inherited from","text":"<p><code>Evented</code>.<code>listens</code></p>"},{"location":"API/classes/Marker/#off","title":"off()","text":"<p>off(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>Marker</code></p> <p>Defined in: src/util/evented.ts:90</p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/Marker/#parameters_4","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/Marker/#returns_12","title":"Returns","text":"<p><code>Marker</code></p>"},{"location":"API/classes/Marker/#inherited-from_1","title":"Inherited from","text":"<p><code>Evented</code>.<code>off</code></p>"},{"location":"API/classes/Marker/#on","title":"on()","text":"<p>on(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>Subscription</code></p> <p>Defined in: src/util/evented.ts:73</p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/Marker/#parameters_5","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/Marker/#returns_13","title":"Returns","text":"<p><code>Subscription</code></p>"},{"location":"API/classes/Marker/#inherited-from_2","title":"Inherited from","text":"<p><code>Evented</code>.<code>on</code></p>"},{"location":"API/classes/Marker/#once","title":"once()","text":"<p>once(<code>type</code>: <code>string</code>, <code>listener?</code>: <code>Listener</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>Marker</code></p> <p>Defined in: src/util/evented.ts:106</p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/Marker/#parameters_6","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/Marker/#returns_14","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>Marker</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/Marker/#inherited-from_3","title":"Inherited from","text":"<p><code>Evented</code>.<code>once</code></p>"},{"location":"API/classes/Marker/#remove","title":"remove()","text":"<p>remove(): <code>this</code></p> <p>Defined in: src/ui/marker.ts:354</p> <p>Removes the marker from a map</p>"},{"location":"API/classes/Marker/#returns_15","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Marker/#example_4","title":"Example","text":"<pre><code>let marker = new Marker().addTo(map);\nmarker.remove();\n</code></pre>"},{"location":"API/classes/Marker/#removeclassname","title":"removeClassName()","text":"<p>removeClassName(<code>className</code>: <code>string</code>): <code>void</code></p> <p>Defined in: src/ui/marker.ts:689</p> <p>Removes a CSS class from the marker element.</p>"},{"location":"API/classes/Marker/#parameters_7","title":"Parameters","text":"Parameter Type Description <code>className</code> <code>string</code> Non-empty string with CSS class name to remove from marker element"},{"location":"API/classes/Marker/#returns_16","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/Marker/#example_5","title":"Example","text":"<pre><code>let marker = new Marker()\nmarker.removeClassName('some-class')\n</code></pre>"},{"location":"API/classes/Marker/#setdraggable","title":"setDraggable()","text":"<p>setDraggable(<code>shouldBeDraggable?</code>: <code>boolean</code>): <code>this</code></p> <p>Defined in: src/ui/marker.ts:776</p> <p>Sets the <code>draggable</code> property and functionality of the marker</p>"},{"location":"API/classes/Marker/#parameters_8","title":"Parameters","text":"Parameter Type Description <code>shouldBeDraggable?</code> <code>boolean</code> Turns drag functionality on/off"},{"location":"API/classes/Marker/#returns_17","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Marker/#seteventedparent","title":"setEventedParent()","text":"<p>setEventedParent(<code>parent?</code>: <code>Evented</code>, <code>data?</code>: <code>any</code>): <code>Marker</code></p> <p>Defined in: src/util/evented.ts:176</p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/Marker/#parameters_9","title":"Parameters","text":"Parameter Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/Marker/#returns_18","title":"Returns","text":"<p><code>Marker</code></p>"},{"location":"API/classes/Marker/#inherited-from_4","title":"Inherited from","text":"<p><code>Evented</code>.<code>setEventedParent</code></p>"},{"location":"API/classes/Marker/#setlnglat","title":"setLngLat()","text":"<p>setLngLat(<code>lnglat</code>: <code>LngLatLike</code>): <code>this</code></p> <p>Defined in: src/ui/marker.ts:412</p> <p>Set the marker's geographical position and move it.</p>"},{"location":"API/classes/Marker/#parameters_10","title":"Parameters","text":"Parameter Type Description <code>lnglat</code> <code>LngLatLike</code> A LngLat describing where the marker should be located."},{"location":"API/classes/Marker/#returns_19","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Marker/#example_6","title":"Example","text":"<p>Create a new marker, set the longitude and latitude, and add it to the map <pre><code>new Marker()\n  .setLngLat([-65.017, -16.457])\n  .addTo(map);\n</code></pre></p>"},{"location":"API/classes/Marker/#see_2","title":"See","text":"<ul> <li>Add custom icons with Markers</li> <li>Create a draggable Marker</li> </ul>"},{"location":"API/classes/Marker/#setoffset","title":"setOffset()","text":"<p>setOffset(<code>offset</code>: <code>PointLike</code>): <code>this</code></p> <p>Defined in: src/ui/marker.ts:657</p> <p>Sets the offset of the marker</p>"},{"location":"API/classes/Marker/#parameters_11","title":"Parameters","text":"Parameter Type Description <code>offset</code> <code>PointLike</code> The offset in pixels as a PointLike object to apply relative to the element's center. Negatives indicate left and up."},{"location":"API/classes/Marker/#returns_20","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Marker/#setopacity","title":"setOpacity()","text":"<p>setOpacity(<code>opacity?</code>: <code>string</code>, <code>opacityWhenCovered?</code>: <code>string</code>): <code>this</code></p> <p>Defined in: src/ui/marker.ts:862</p> <p>Sets the <code>opacity</code> and <code>opacityWhenCovered</code> properties of the marker. When called without arguments, resets opacity and opacityWhenCovered to defaults</p>"},{"location":"API/classes/Marker/#parameters_12","title":"Parameters","text":"Parameter Type Description <code>opacity?</code> <code>string</code> Sets the <code>opacity</code> property of the marker. <code>opacityWhenCovered?</code> <code>string</code> Sets the <code>opacityWhenCovered</code> property of the marker."},{"location":"API/classes/Marker/#returns_21","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Marker/#setpitchalignment","title":"setPitchAlignment()","text":"<p>setPitchAlignment(<code>alignment?</code>: <code>Alignment</code>): <code>this</code></p> <p>Defined in: src/ui/marker.ts:842</p> <p>Sets the <code>pitchAlignment</code> property of the marker.</p>"},{"location":"API/classes/Marker/#parameters_13","title":"Parameters","text":"Parameter Type Description <code>alignment?</code> <code>Alignment</code> Sets the <code>pitchAlignment</code> property of the marker. If alignment is 'auto', it will automatically match <code>rotationAlignment</code>."},{"location":"API/classes/Marker/#returns_22","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Marker/#setpopup","title":"setPopup()","text":"<p>setPopup(<code>popup?</code>: <code>Popup</code>): <code>this</code></p> <p>Defined in: src/ui/marker.ts:441</p> <p>Binds a Popup to the Marker.</p>"},{"location":"API/classes/Marker/#parameters_14","title":"Parameters","text":"Parameter Type Description <code>popup?</code> <code>Popup</code> An instance of the Popup class. If undefined or null, any popup set on this Marker instance is unset."},{"location":"API/classes/Marker/#returns_23","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Marker/#example_7","title":"Example","text":"<pre><code>let marker = new Marker()\n .setLngLat([0, 0])\n .setPopup(new Popup().setHTML(\"&lt;h1&gt;Hello World!&lt;/h1&gt;\")) // add popup\n .addTo(map);\n</code></pre>"},{"location":"API/classes/Marker/#see_3","title":"See","text":"<p>Attach a popup to a marker instance</p>"},{"location":"API/classes/Marker/#setrotation","title":"setRotation()","text":"<p>setRotation(<code>rotation?</code>: <code>number</code>): <code>this</code></p> <p>Defined in: src/ui/marker.ts:806</p> <p>Sets the <code>rotation</code> property of the marker.</p>"},{"location":"API/classes/Marker/#parameters_15","title":"Parameters","text":"Parameter Type Description <code>rotation?</code> <code>number</code> The rotation angle of the marker (clockwise, in degrees), relative to its respective Marker.setRotationAlignment setting."},{"location":"API/classes/Marker/#returns_24","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Marker/#setrotationalignment","title":"setRotationAlignment()","text":"<p>setRotationAlignment(<code>alignment?</code>: <code>Alignment</code>): <code>this</code></p> <p>Defined in: src/ui/marker.ts:824</p> <p>Sets the <code>rotationAlignment</code> property of the marker.</p>"},{"location":"API/classes/Marker/#parameters_16","title":"Parameters","text":"Parameter Type Description <code>alignment?</code> <code>Alignment</code> Sets the <code>rotationAlignment</code> property of the marker. defaults to 'auto'"},{"location":"API/classes/Marker/#returns_25","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Marker/#setsubpixelpositioning","title":"setSubpixelPositioning()","text":"<p>setSubpixelPositioning(<code>value</code>: <code>boolean</code>): <code>Marker</code></p> <p>Defined in: src/ui/marker.ts:491</p> <p>Set the option to allow subpixel positioning of the marker by passing a boolean</p>"},{"location":"API/classes/Marker/#parameters_17","title":"Parameters","text":"Parameter Type Description <code>value</code> <code>boolean</code> when set to <code>true</code>, subpixel positioning is enabled for the marker."},{"location":"API/classes/Marker/#returns_26","title":"Returns","text":"<p><code>Marker</code></p>"},{"location":"API/classes/Marker/#example_8","title":"Example","text":"<pre><code>let marker = new Marker()\nmarker.setSubpixelPositioning(true);\n</code></pre>"},{"location":"API/classes/Marker/#toggleclassname","title":"toggleClassName()","text":"<p>toggleClassName(<code>className</code>: <code>string</code>): <code>boolean</code></p> <p>Defined in: src/ui/marker.ts:706</p> <p>Add or remove the given CSS class on the marker element, depending on whether the element currently has that class.</p>"},{"location":"API/classes/Marker/#parameters_18","title":"Parameters","text":"Parameter Type Description <code>className</code> <code>string</code> Non-empty string with CSS class name to add/remove"},{"location":"API/classes/Marker/#returns_27","title":"Returns","text":"<p><code>boolean</code></p> <p>if the class was removed return false, if class was added, then return true</p>"},{"location":"API/classes/Marker/#example_9","title":"Example","text":"<pre><code>let marker = new Marker()\nmarker.toggleClassName('toggleClass')\n</code></pre>"},{"location":"API/classes/Marker/#togglepopup","title":"togglePopup()","text":"<p>togglePopup(): <code>this</code></p> <p>Defined in: src/ui/marker.ts:546</p> <p>Opens or closes the Popup instance that is bound to the Marker, depending on the current state of the Popup.</p>"},{"location":"API/classes/Marker/#returns_28","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Marker/#example_10","title":"Example","text":"<pre><code>let marker = new Marker()\n .setLngLat([0, 0])\n .setPopup(new Popup().setHTML(\"&lt;h1&gt;Hello World!&lt;/h1&gt;\"))\n .addTo(map);\n\nmarker.togglePopup(); // toggle popup open or closed\n</code></pre>"},{"location":"API/classes/MercatorCoordinate/","title":"MercatorCoordinate","text":"<p>Defined in: src/geo/mercator_coordinate.ts:78</p> <p>A <code>MercatorCoordinate</code> object represents a projected three dimensional position.</p> <p><code>MercatorCoordinate</code> uses the web mercator projection (EPSG:3857) with slightly different units:</p> <ul> <li>the size of 1 unit is the width of the projected world instead of the \"mercator meter\"</li> <li>the origin of the coordinate space is at the north-west corner instead of the middle</li> </ul> <p>For example, <code>MercatorCoordinate(0, 0, 0)</code> is the north-west corner of the mercator world and <code>MercatorCoordinate(1, 1, 0)</code> is the south-east corner. If you are familiar with vector tiles it may be helpful to think of the coordinate space as the <code>0/0/0</code> tile with an extent of <code>1</code>.</p> <p>The <code>z</code> dimension of <code>MercatorCoordinate</code> is conformal. A cube in the mercator coordinate space would be rendered as a cube.</p>"},{"location":"API/classes/MercatorCoordinate/#example","title":"Example","text":"<pre><code>let nullIsland = new MercatorCoordinate(0.5, 0.5, 0);\n</code></pre>"},{"location":"API/classes/MercatorCoordinate/#see","title":"See","text":"<p>Add a custom style layer</p>"},{"location":"API/classes/MercatorCoordinate/#implements","title":"Implements","text":"<ul> <li><code>IMercatorCoordinate</code></li> </ul>"},{"location":"API/classes/MercatorCoordinate/#constructors","title":"Constructors","text":""},{"location":"API/classes/MercatorCoordinate/#constructor","title":"Constructor","text":"<p>new MercatorCoordinate(<code>x</code>: <code>number</code>, <code>y</code>: <code>number</code>, <code>z</code>: <code>number</code>): <code>MercatorCoordinate</code></p> <p>Defined in: src/geo/mercator_coordinate.ts:88</p>"},{"location":"API/classes/MercatorCoordinate/#parameters","title":"Parameters","text":"Parameter Type Default value Description <code>x</code> <code>number</code> <code>undefined</code> The x component of the position. <code>y</code> <code>number</code> <code>undefined</code> The y component of the position. <code>z</code> <code>number</code> <code>0</code> The z component of the position."},{"location":"API/classes/MercatorCoordinate/#returns","title":"Returns","text":"<p><code>MercatorCoordinate</code></p>"},{"location":"API/classes/MercatorCoordinate/#methods","title":"Methods","text":""},{"location":"API/classes/MercatorCoordinate/#meterinmercatorcoordinateunits","title":"meterInMercatorCoordinateUnits()","text":"<p>meterInMercatorCoordinateUnits(): <code>number</code></p> <p>Defined in: src/geo/mercator_coordinate.ts:153</p> <p>Returns the distance of 1 meter in <code>MercatorCoordinate</code> units at this latitude.</p> <p>For coordinates in real world units using meters, this naturally provides the scale to transform into <code>MercatorCoordinate</code>s.</p>"},{"location":"API/classes/MercatorCoordinate/#returns_1","title":"Returns","text":"<p><code>number</code></p> <p>Distance of 1 meter in <code>MercatorCoordinate</code> units.</p>"},{"location":"API/classes/MercatorCoordinate/#implementation-of","title":"Implementation of","text":"<p><code>IMercatorCoordinate.meterInMercatorCoordinateUnits</code></p>"},{"location":"API/classes/MercatorCoordinate/#toaltitude","title":"toAltitude()","text":"<p>toAltitude(): <code>number</code></p> <p>Defined in: src/geo/mercator_coordinate.ts:141</p> <p>Returns the altitude in meters of the coordinate.</p>"},{"location":"API/classes/MercatorCoordinate/#returns_2","title":"Returns","text":"<p><code>number</code></p> <p>The altitude in meters.</p>"},{"location":"API/classes/MercatorCoordinate/#example_1","title":"Example","text":"<pre><code>let coord = new MercatorCoordinate(0, 0, 0.02);\ncoord.toAltitude(); // 6914.281956295339\n</code></pre>"},{"location":"API/classes/MercatorCoordinate/#implementation-of_1","title":"Implementation of","text":"<p><code>IMercatorCoordinate.toAltitude</code></p>"},{"location":"API/classes/MercatorCoordinate/#tolnglat","title":"toLngLat()","text":"<p>toLngLat(): <code>LngLat</code></p> <p>Defined in: src/geo/mercator_coordinate.ts:125</p> <p>Returns the <code>LngLat</code> for the coordinate.</p>"},{"location":"API/classes/MercatorCoordinate/#returns_3","title":"Returns","text":"<p><code>LngLat</code></p> <p>The <code>LngLat</code> object.</p>"},{"location":"API/classes/MercatorCoordinate/#example_2","title":"Example","text":"<pre><code>let coord = new MercatorCoordinate(0.5, 0.5, 0);\nlet lngLat = coord.toLngLat(); // LngLat(0, 0)\n</code></pre>"},{"location":"API/classes/MercatorCoordinate/#implementation-of_2","title":"Implementation of","text":"<p><code>IMercatorCoordinate.toLngLat</code></p>"},{"location":"API/classes/MercatorCoordinate/#fromlnglat","title":"fromLngLat()","text":"<p><code>static</code> fromLngLat(<code>lngLatLike</code>: <code>LngLatLike</code>, <code>altitude</code>: <code>number</code>): <code>MercatorCoordinate</code></p> <p>Defined in: src/geo/mercator_coordinate.ts:106</p> <p>Project a <code>LngLat</code> to a <code>MercatorCoordinate</code>.</p>"},{"location":"API/classes/MercatorCoordinate/#parameters_1","title":"Parameters","text":"Parameter Type Default value Description <code>lngLatLike</code> <code>LngLatLike</code> <code>undefined</code> The location to project. <code>altitude</code> <code>number</code> <code>0</code> The altitude in meters of the position."},{"location":"API/classes/MercatorCoordinate/#returns_4","title":"Returns","text":"<p><code>MercatorCoordinate</code></p> <p>The projected mercator coordinate.</p>"},{"location":"API/classes/MercatorCoordinate/#example_3","title":"Example","text":"<pre><code>let coord = MercatorCoordinate.fromLngLat({ lng: 0, lat: 0}, 0);\ncoord; // MercatorCoordinate(0.5, 0.5, 0)\n</code></pre>"},{"location":"API/classes/NavigationControl/","title":"NavigationControl","text":"<p>Defined in: src/ui/control/navigation_control.ts:52</p> <p>A <code>NavigationControl</code> control contains zoom buttons and a compass.</p>"},{"location":"API/classes/NavigationControl/#example","title":"Example","text":"<pre><code>let nav = new NavigationControl();\nmap.addControl(nav, 'top-left');\n</code></pre>"},{"location":"API/classes/NavigationControl/#see","title":"See","text":"<p>Display map navigation controls</p>"},{"location":"API/classes/NavigationControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/NavigationControl/#constructors","title":"Constructors","text":""},{"location":"API/classes/NavigationControl/#constructor","title":"Constructor","text":"<p>new NavigationControl(<code>options?</code>: <code>NavigationControlOptions</code>): <code>NavigationControl</code></p> <p>Defined in: src/ui/control/navigation_control.ts:65</p>"},{"location":"API/classes/NavigationControl/#parameters","title":"Parameters","text":"Parameter Type Description <code>options?</code> <code>NavigationControlOptions</code> the control's options"},{"location":"API/classes/NavigationControl/#returns","title":"Returns","text":"<p><code>NavigationControl</code></p>"},{"location":"API/classes/NavigationControl/#methods","title":"Methods","text":""},{"location":"API/classes/NavigationControl/#onadd","title":"onAdd()","text":"<p>onAdd(<code>map</code>: <code>Map</code>): <code>HTMLElement</code></p> <p>Defined in: src/ui/control/navigation_control.ts:117</p> <p>Register a control on the map and give it a chance to register event listeners and resources. This method is called by Map.addControl internally.</p>"},{"location":"API/classes/NavigationControl/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> the Map this control will be added to"},{"location":"API/classes/NavigationControl/#returns_1","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The control's container element. This should be created by the control and returned by onAdd without being attached to the DOM: the map will insert the control's element into the DOM as necessary.</p>"},{"location":"API/classes/NavigationControl/#implementation-of","title":"Implementation of","text":"<p><code>IControl</code>.<code>onAdd</code></p>"},{"location":"API/classes/NavigationControl/#onremove","title":"onRemove()","text":"<p>onRemove(): <code>void</code></p> <p>Defined in: src/ui/control/navigation_control.ts:141</p> <p>Unregister a control on the map and give it a chance to detach event listeners and resources. This method is called by Map.removeControl internally.</p>"},{"location":"API/classes/NavigationControl/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/NavigationControl/#implementation-of_1","title":"Implementation of","text":"<p><code>IControl</code>.<code>onRemove</code></p>"},{"location":"API/classes/Popup/","title":"Popup","text":"<p>Defined in: src/ui/popup.ts:168</p> <p>A popup component.</p>"},{"location":"API/classes/Popup/#examples","title":"Examples","text":"<p>Create a popup <pre><code>let popup = new Popup();\n// Set an event listener that will fire\n// any time the popup is opened\npopup.on('open', () =&gt; {\n  console.log('popup was opened');\n});\n</code></pre></p> <p>Create a popup <pre><code>let popup = new Popup();\n// Set an event listener that will fire\n// any time the popup is closed\npopup.on('close', () =&gt; {\n  console.log('popup was closed');\n});\n</code></pre></p> <pre><code>let markerHeight = 50, markerRadius = 10, linearOffset = 25;\nlet popupOffsets = {\n 'top': [0, 0],\n 'top-left': [0,0],\n 'top-right': [0,0],\n 'bottom': [0, -markerHeight],\n 'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],\n 'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],\n 'left': [markerRadius, (markerHeight - markerRadius) * -1],\n 'right': [-markerRadius, (markerHeight - markerRadius) * -1]\n };\nlet popup = new Popup({offset: popupOffsets, className: 'my-class'})\n  .setLngLat(e.lngLat)\n  .setHTML(\"&lt;h1&gt;Hello World!&lt;/h1&gt;\")\n  .setMaxWidth(\"300px\")\n  .addTo(map);\n</code></pre>"},{"location":"API/classes/Popup/#see","title":"See","text":"<ul> <li>Display a popup</li> <li>Display a popup on hover</li> <li>Display a popup on click</li> <li>Attach a popup to a marker instance</li> </ul>"},{"location":"API/classes/Popup/#events","title":"Events","text":"<p>Event <code>open</code> of type Event will be fired when the popup is opened manually or programmatically.</p> <p>Event <code>close</code> of type Event will be fired when the popup is closed manually or programmatically.</p>"},{"location":"API/classes/Popup/#extends","title":"Extends","text":"<ul> <li><code>Evented</code></li> </ul>"},{"location":"API/classes/Popup/#constructors","title":"Constructors","text":""},{"location":"API/classes/Popup/#constructor","title":"Constructor","text":"<p>new Popup(<code>options?</code>: <code>PopupOptions</code>): <code>Popup</code></p> <p>Defined in: src/ui/popup.ts:183</p>"},{"location":"API/classes/Popup/#parameters","title":"Parameters","text":"Parameter Type Description <code>options?</code> <code>PopupOptions</code> the options"},{"location":"API/classes/Popup/#returns","title":"Returns","text":"<p><code>Popup</code></p>"},{"location":"API/classes/Popup/#overrides","title":"Overrides","text":"<p><code>Evented.constructor</code></p>"},{"location":"API/classes/Popup/#methods","title":"Methods","text":""},{"location":"API/classes/Popup/#_updateopacity","title":"_updateOpacity()","text":"<p>_updateOpacity(): <code>void</code></p> <p>Defined in: src/ui/popup.ts:239</p> <p>Add opacity to popup if in globe projection and location is behind view</p>"},{"location":"API/classes/Popup/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/Popup/#addclassname","title":"addClassName()","text":"<p>addClassName(<code>className</code>: <code>string</code>): <code>Popup</code></p> <p>Defined in: src/ui/popup.ts:500</p> <p>Adds a CSS class to the popup container element.</p>"},{"location":"API/classes/Popup/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>className</code> <code>string</code> Non-empty string with CSS class name to add to popup container"},{"location":"API/classes/Popup/#returns_2","title":"Returns","text":"<p><code>Popup</code></p>"},{"location":"API/classes/Popup/#example","title":"Example","text":"<pre><code>let popup = new Popup()\npopup.addClassName('some-class')\n</code></pre>"},{"location":"API/classes/Popup/#addto","title":"addTo()","text":"<p>addTo(<code>map</code>: <code>Map</code>): <code>this</code></p> <p>Defined in: src/ui/popup.ts:204</p> <p>Adds the popup to a map.</p>"},{"location":"API/classes/Popup/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> The MapLibre GL JS map to add the popup to."},{"location":"API/classes/Popup/#returns_3","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Popup/#example_1","title":"Example","text":"<pre><code>new Popup()\n  .setLngLat([0, 0])\n  .setHTML(\"&lt;h1&gt;Null Island&lt;/h1&gt;\")\n  .addTo(map);\n</code></pre>"},{"location":"API/classes/Popup/#see_1","title":"See","text":"<ul> <li>Display a popup</li> <li>Display a popup on hover</li> <li>Display a popup on click</li> <li>Show polygon information on click</li> </ul>"},{"location":"API/classes/Popup/#getelement","title":"getElement()","text":"<p>getElement(): <code>HTMLElement</code></p> <p>Defined in: src/ui/popup.ts:375</p> <p>Returns the <code>Popup</code>'s HTML element.</p>"},{"location":"API/classes/Popup/#returns_4","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>element</p>"},{"location":"API/classes/Popup/#example_2","title":"Example","text":"<p>Change the <code>Popup</code> element's font size <pre><code>let popup = new Popup()\n  .setLngLat([-96, 37.8])\n  .setHTML(\"&lt;p&gt;Hello World!&lt;/p&gt;\")\n  .addTo(map);\nlet popupElem = popup.getElement();\npopupElem.style.fontSize = \"25px\";\n</code></pre></p>"},{"location":"API/classes/Popup/#getlnglat","title":"getLngLat()","text":"<p>getLngLat(): <code>LngLat</code></p> <p>Defined in: src/ui/popup.ts:301</p> <p>Returns the geographical location of the popup's anchor.</p> <p>The longitude of the result may differ by a multiple of 360 degrees from the longitude previously set by <code>setLngLat</code> because <code>Popup</code> wraps the anchor longitude across copies of the world to keep the popup on screen.</p>"},{"location":"API/classes/Popup/#returns_5","title":"Returns","text":"<p><code>LngLat</code></p> <p>The geographical location of the popup's anchor.</p>"},{"location":"API/classes/Popup/#getmaxwidth","title":"getMaxWidth()","text":"<p>getMaxWidth(): <code>string</code></p> <p>Defined in: src/ui/popup.ts:438</p> <p>Returns the popup's maximum width.</p>"},{"location":"API/classes/Popup/#returns_6","title":"Returns","text":"<p><code>string</code></p> <p>The maximum width of the popup.</p>"},{"location":"API/classes/Popup/#isopen","title":"isOpen()","text":"<p>isOpen(): <code>boolean</code></p> <p>Defined in: src/ui/popup.ts:253</p>"},{"location":"API/classes/Popup/#returns_7","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the popup is open, <code>false</code> if it is closed.</p>"},{"location":"API/classes/Popup/#listens","title":"listens()","text":"<p>listens(<code>type</code>: <code>string</code>): <code>boolean</code></p> <p>Defined in: src/util/evented.ts:165</p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/Popup/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/Popup/#returns_8","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/Popup/#inherited-from","title":"Inherited from","text":"<p><code>Evented</code>.<code>listens</code></p>"},{"location":"API/classes/Popup/#off","title":"off()","text":"<p>off(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>Popup</code></p> <p>Defined in: src/util/evented.ts:90</p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/Popup/#parameters_4","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/Popup/#returns_9","title":"Returns","text":"<p><code>Popup</code></p>"},{"location":"API/classes/Popup/#inherited-from_1","title":"Inherited from","text":"<p><code>Evented</code>.<code>off</code></p>"},{"location":"API/classes/Popup/#on","title":"on()","text":"<p>on(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>Subscription</code></p> <p>Defined in: src/util/evented.ts:73</p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/Popup/#parameters_5","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/Popup/#returns_10","title":"Returns","text":"<p><code>Subscription</code></p>"},{"location":"API/classes/Popup/#inherited-from_2","title":"Inherited from","text":"<p><code>Evented</code>.<code>on</code></p>"},{"location":"API/classes/Popup/#once","title":"once()","text":"<p>once(<code>type</code>: <code>string</code>, <code>listener?</code>: <code>Listener</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>Popup</code></p> <p>Defined in: src/util/evented.ts:106</p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/Popup/#parameters_6","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/Popup/#returns_11","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>Popup</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/Popup/#inherited-from_3","title":"Inherited from","text":"<p><code>Evented</code>.<code>once</code></p>"},{"location":"API/classes/Popup/#remove","title":"remove()","text":"<p>remove(): <code>this</code></p> <p>Defined in: src/ui/popup.ts:266</p> <p>Removes the popup from the map it has been added to.</p>"},{"location":"API/classes/Popup/#returns_12","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Popup/#example_3","title":"Example","text":"<pre><code>let popup = new Popup().addTo(map);\npopup.remove();\n</code></pre>"},{"location":"API/classes/Popup/#removeclassname","title":"removeClassName()","text":"<p>removeClassName(<code>className</code>: <code>string</code>): <code>Popup</code></p> <p>Defined in: src/ui/popup.ts:518</p> <p>Removes a CSS class from the popup container element.</p>"},{"location":"API/classes/Popup/#parameters_7","title":"Parameters","text":"Parameter Type Description <code>className</code> <code>string</code> Non-empty string with CSS class name to remove from popup container"},{"location":"API/classes/Popup/#returns_13","title":"Returns","text":"<p><code>Popup</code></p>"},{"location":"API/classes/Popup/#example_4","title":"Example","text":"<pre><code>let popup = new Popup()\npopup.removeClassName('some-class')\n</code></pre>"},{"location":"API/classes/Popup/#setdomcontent","title":"setDOMContent()","text":"<p>setDOMContent(<code>htmlNode</code>: <code>Node</code>): <code>this</code></p> <p>Defined in: src/ui/popup.ts:469</p> <p>Sets the popup's content to the element provided as a DOM node.</p>"},{"location":"API/classes/Popup/#parameters_8","title":"Parameters","text":"Parameter Type Description <code>htmlNode</code> <code>Node</code> A DOM node to be used as content for the popup."},{"location":"API/classes/Popup/#returns_14","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Popup/#example_5","title":"Example","text":"<p>Create an element with the popup content <pre><code>let div = document.createElement('div');\ndiv.innerHTML = 'Hello, world!';\nlet popup = new Popup()\n  .setLngLat(e.lngLat)\n  .setDOMContent(div)\n  .addTo(map);\n</code></pre></p>"},{"location":"API/classes/Popup/#seteventedparent","title":"setEventedParent()","text":"<p>setEventedParent(<code>parent?</code>: <code>Evented</code>, <code>data?</code>: <code>any</code>): <code>Popup</code></p> <p>Defined in: src/util/evented.ts:176</p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/Popup/#parameters_9","title":"Parameters","text":"Parameter Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/Popup/#returns_15","title":"Returns","text":"<p><code>Popup</code></p>"},{"location":"API/classes/Popup/#inherited-from_4","title":"Inherited from","text":"<p><code>Evented</code>.<code>setEventedParent</code></p>"},{"location":"API/classes/Popup/#sethtml","title":"setHTML()","text":"<p>setHTML(<code>html</code>: <code>string</code>): <code>this</code></p> <p>Defined in: src/ui/popup.ts:419</p> <p>Sets the popup's content to the HTML provided as a string.</p> <p>This method does not perform HTML filtering or sanitization, and must be used only with trusted content. Consider Popup.setText if the content is an untrusted text string.</p>"},{"location":"API/classes/Popup/#parameters_10","title":"Parameters","text":"Parameter Type Description <code>html</code> <code>string</code> A string representing HTML content for the popup."},{"location":"API/classes/Popup/#returns_16","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Popup/#example_6","title":"Example","text":"<pre><code>let popup = new Popup()\n  .setLngLat(e.lngLat)\n  .setHTML(\"&lt;h1&gt;Hello World!&lt;/h1&gt;\")\n  .addTo(map);\n</code></pre>"},{"location":"API/classes/Popup/#see_2","title":"See","text":"<ul> <li>Display a popup</li> <li>Display a popup on hover</li> <li>Display a popup on click</li> <li>Attach a popup to a marker instance</li> </ul>"},{"location":"API/classes/Popup/#setlnglat","title":"setLngLat()","text":"<p>setLngLat(<code>lnglat</code>: <code>LngLatLike</code>): <code>this</code></p> <p>Defined in: src/ui/popup.ts:310</p> <p>Sets the geographical location of the popup's anchor, and moves the popup to it. Replaces trackPointer() behavior.</p>"},{"location":"API/classes/Popup/#parameters_11","title":"Parameters","text":"Parameter Type Description <code>lnglat</code> <code>LngLatLike</code> The geographical location to set as the popup's anchor."},{"location":"API/classes/Popup/#returns_17","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Popup/#setmaxwidth","title":"setMaxWidth()","text":"<p>setMaxWidth(<code>maxWidth</code>: <code>string</code>): <code>this</code></p> <p>Defined in: src/ui/popup.ts:448</p> <p>Sets the popup's maximum width. This is setting the CSS property <code>max-width</code>. Available values can be found here: https://developer.mozilla.org/en-US/docs/Web/CSS/max-width</p>"},{"location":"API/classes/Popup/#parameters_12","title":"Parameters","text":"Parameter Type Description <code>maxWidth</code> <code>string</code> A string representing the value for the maximum width."},{"location":"API/classes/Popup/#returns_18","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Popup/#setoffset","title":"setOffset()","text":"<p>setOffset(<code>offset?</code>: <code>Offset</code>): <code>this</code></p> <p>Defined in: src/ui/popup.ts:530</p> <p>Sets the popup's offset.</p>"},{"location":"API/classes/Popup/#parameters_13","title":"Parameters","text":"Parameter Type Description <code>offset?</code> <code>Offset</code> Sets the popup's offset."},{"location":"API/classes/Popup/#returns_19","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Popup/#setsubpixelpositioning","title":"setSubpixelPositioning()","text":"<p>setSubpixelPositioning(<code>value</code>: <code>boolean</code>): <code>void</code></p> <p>Defined in: src/ui/popup.ts:566</p> <p>Set the option to allow subpixel positioning of the popup by passing a boolean</p>"},{"location":"API/classes/Popup/#parameters_14","title":"Parameters","text":"Parameter Type Description <code>value</code> <code>boolean</code> When boolean is true, subpixel positioning is enabled for the popup."},{"location":"API/classes/Popup/#returns_20","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/Popup/#example_7","title":"Example","text":"<pre><code>let popup = new Popup()\npopup.setSubpixelPositioning(true);\n</code></pre>"},{"location":"API/classes/Popup/#settext","title":"setText()","text":"<p>setText(<code>text</code>: <code>string</code>): <code>this</code></p> <p>Defined in: src/ui/popup.ts:395</p> <p>Sets the popup's content to a string of text.</p> <p>This function creates a Text node in the DOM, so it cannot insert raw HTML. Use this method for security against XSS if the popup content is user-provided.</p>"},{"location":"API/classes/Popup/#parameters_15","title":"Parameters","text":"Parameter Type Description <code>text</code> <code>string</code> Textual content for the popup."},{"location":"API/classes/Popup/#returns_21","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Popup/#example_8","title":"Example","text":"<pre><code>let popup = new Popup()\n  .setLngLat(e.lngLat)\n  .setText('Hello, world!')\n  .addTo(map);\n</code></pre>"},{"location":"API/classes/Popup/#toggleclassname","title":"toggleClassName()","text":"<p>toggleClassName(<code>className</code>: <code>string</code>): <code>boolean</code></p> <p>Defined in: src/ui/popup.ts:549</p> <p>Add or remove the given CSS class on the popup container, depending on whether the container currently has that class.</p>"},{"location":"API/classes/Popup/#parameters_16","title":"Parameters","text":"Parameter Type Description <code>className</code> <code>string</code> Non-empty string with CSS class name to add/remove"},{"location":"API/classes/Popup/#returns_22","title":"Returns","text":"<p><code>boolean</code></p> <p>if the class was removed return false, if class was added, then return true, undefined if there is no container</p>"},{"location":"API/classes/Popup/#example_9","title":"Example","text":"<pre><code>let popup = new Popup()\npopup.toggleClassName('toggleClass')\n</code></pre>"},{"location":"API/classes/Popup/#trackpointer","title":"trackPointer()","text":"<p>trackPointer(): <code>this</code></p> <p>Defined in: src/ui/popup.ts:342</p> <p>Tracks the popup anchor to the cursor position on screens with a pointer device (it will be hidden on touchscreens). Replaces the <code>setLngLat</code> behavior. For most use cases, set <code>closeOnClick</code> and <code>closeButton</code> to <code>false</code>.</p>"},{"location":"API/classes/Popup/#returns_23","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Popup/#example_10","title":"Example","text":"<pre><code>let popup = new Popup({ closeOnClick: false, closeButton: false })\n  .setHTML(\"&lt;h1&gt;Hello World!&lt;/h1&gt;\")\n  .trackPointer()\n  .addTo(map);\n</code></pre>"},{"location":"API/classes/RasterDEMTileSource/","title":"RasterDEMTileSource","text":"<p>Defined in: src/source/raster_dem_tile_source.ts:37</p> <p>A source containing raster DEM tiles (See the Style Specification for detailed documentation of options.) This source can be used to show hillshading and 3D terrain</p>"},{"location":"API/classes/RasterDEMTileSource/#example","title":"Example","text":"<pre><code>map.addSource('raster-dem-source', {\n     type: 'raster-dem',\n     url: 'https://demotiles.maplibre.org/terrain-tiles/tiles.json',\n     tileSize: 256\n});\n</code></pre>"},{"location":"API/classes/RasterDEMTileSource/#see","title":"See","text":"<p>3D Terrain</p>"},{"location":"API/classes/RasterDEMTileSource/#extends","title":"Extends","text":"<ul> <li><code>RasterTileSource</code></li> </ul>"},{"location":"API/classes/RasterDEMTileSource/#implements","title":"Implements","text":"<ul> <li><code>Source</code></li> </ul>"},{"location":"API/classes/RasterDEMTileSource/#methods","title":"Methods","text":""},{"location":"API/classes/RasterDEMTileSource/#aborttile","title":"abortTile()","text":"<p>abortTile(<code>tile</code>: <code>Tile</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Defined in: src/source/raster_tile_source.ts:214</p> <p>Allows to abort a tile loading.</p>"},{"location":"API/classes/RasterDEMTileSource/#parameters","title":"Parameters","text":"Parameter Type Description <code>tile</code> <code>Tile</code> The tile to abort"},{"location":"API/classes/RasterDEMTileSource/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"API/classes/RasterDEMTileSource/#implementation-of","title":"Implementation of","text":"<p><code>Source</code>.<code>abortTile</code></p>"},{"location":"API/classes/RasterDEMTileSource/#inherited-from","title":"Inherited from","text":"<p><code>RasterTileSource</code>.<code>abortTile</code></p>"},{"location":"API/classes/RasterDEMTileSource/#hastile","title":"hasTile()","text":"<p>hasTile(<code>tileID</code>: <code>OverscaledTileID</code>): <code>boolean</code></p> <p>Defined in: src/source/raster_tile_source.ts:173</p> <p>True is the tile is part of the source, false otherwise.</p>"},{"location":"API/classes/RasterDEMTileSource/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>tileID</code> <code>OverscaledTileID</code> The tile ID"},{"location":"API/classes/RasterDEMTileSource/#returns_1","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/RasterDEMTileSource/#implementation-of_1","title":"Implementation of","text":"<p><code>Source</code>.<code>hasTile</code></p>"},{"location":"API/classes/RasterDEMTileSource/#inherited-from_1","title":"Inherited from","text":"<p><code>RasterTileSource</code>.<code>hasTile</code></p>"},{"location":"API/classes/RasterDEMTileSource/#hastransition","title":"hasTransition()","text":"<p>hasTransition(): <code>boolean</code></p> <p>Defined in: src/source/raster_tile_source.ts:227</p> <p>True if the source has transition, false otherwise.</p>"},{"location":"API/classes/RasterDEMTileSource/#returns_2","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/RasterDEMTileSource/#implementation-of_2","title":"Implementation of","text":"<p><code>Source</code>.<code>hasTransition</code></p>"},{"location":"API/classes/RasterDEMTileSource/#inherited-from_2","title":"Inherited from","text":"<p><code>RasterTileSource</code>.<code>hasTransition</code></p>"},{"location":"API/classes/RasterDEMTileSource/#listens","title":"listens()","text":"<p>listens(<code>type</code>: <code>string</code>): <code>boolean</code></p> <p>Defined in: src/util/evented.ts:165</p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/RasterDEMTileSource/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/RasterDEMTileSource/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/RasterDEMTileSource/#inherited-from_3","title":"Inherited from","text":"<p><code>RasterTileSource</code>.<code>listens</code></p>"},{"location":"API/classes/RasterDEMTileSource/#loaded","title":"loaded()","text":"<p>loaded(): <code>boolean</code></p> <p>Defined in: src/source/raster_tile_source.ts:115</p> <p>True if the source is loaded, false otherwise.</p>"},{"location":"API/classes/RasterDEMTileSource/#returns_4","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/RasterDEMTileSource/#implementation-of_3","title":"Implementation of","text":"<p><code>Source</code>.<code>loaded</code></p>"},{"location":"API/classes/RasterDEMTileSource/#inherited-from_4","title":"Inherited from","text":"<p><code>RasterTileSource</code>.<code>loaded</code></p>"},{"location":"API/classes/RasterDEMTileSource/#off","title":"off()","text":"<p>off(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>RasterDEMTileSource</code></p> <p>Defined in: src/util/evented.ts:90</p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/RasterDEMTileSource/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/RasterDEMTileSource/#returns_5","title":"Returns","text":"<p><code>RasterDEMTileSource</code></p>"},{"location":"API/classes/RasterDEMTileSource/#inherited-from_5","title":"Inherited from","text":"<p><code>RasterTileSource</code>.<code>off</code></p>"},{"location":"API/classes/RasterDEMTileSource/#on","title":"on()","text":"<p>on(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>Subscription</code></p> <p>Defined in: src/util/evented.ts:73</p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/RasterDEMTileSource/#parameters_4","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/RasterDEMTileSource/#returns_6","title":"Returns","text":"<p><code>Subscription</code></p>"},{"location":"API/classes/RasterDEMTileSource/#inherited-from_6","title":"Inherited from","text":"<p><code>RasterTileSource</code>.<code>on</code></p>"},{"location":"API/classes/RasterDEMTileSource/#onadd","title":"onAdd()","text":"<p>onAdd(<code>map</code>: <code>Map</code>): <code>void</code></p> <p>Defined in: src/source/raster_tile_source.ts:119</p> <p>This method is called when the source is added to the map.</p>"},{"location":"API/classes/RasterDEMTileSource/#parameters_5","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> The map instance"},{"location":"API/classes/RasterDEMTileSource/#returns_7","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/RasterDEMTileSource/#implementation-of_4","title":"Implementation of","text":"<p><code>Source</code>.<code>onAdd</code></p>"},{"location":"API/classes/RasterDEMTileSource/#inherited-from_7","title":"Inherited from","text":"<p><code>RasterTileSource</code>.<code>onAdd</code></p>"},{"location":"API/classes/RasterDEMTileSource/#once","title":"once()","text":"<p>once(<code>type</code>: <code>string</code>, <code>listener?</code>: <code>Listener</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>RasterDEMTileSource</code></p> <p>Defined in: src/util/evented.ts:106</p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/RasterDEMTileSource/#parameters_6","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/RasterDEMTileSource/#returns_8","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>RasterDEMTileSource</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/RasterDEMTileSource/#inherited-from_8","title":"Inherited from","text":"<p><code>RasterTileSource</code>.<code>once</code></p>"},{"location":"API/classes/RasterDEMTileSource/#onremove","title":"onRemove()","text":"<p>onRemove(): <code>void</code></p> <p>Defined in: src/source/raster_tile_source.ts:124</p> <p>This method is called when the source is removed from the map.</p>"},{"location":"API/classes/RasterDEMTileSource/#returns_9","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/RasterDEMTileSource/#implementation-of_5","title":"Implementation of","text":"<p><code>Source</code>.<code>onRemove</code></p>"},{"location":"API/classes/RasterDEMTileSource/#inherited-from_9","title":"Inherited from","text":"<p><code>RasterTileSource</code>.<code>onRemove</code></p>"},{"location":"API/classes/RasterDEMTileSource/#serialize","title":"serialize()","text":"<p>serialize(): <code>RasterSourceSpecification</code> | <code>RasterDEMSourceSpecification</code></p> <p>Defined in: src/source/raster_tile_source.ts:169</p>"},{"location":"API/classes/RasterDEMTileSource/#returns_10","title":"Returns","text":"<p><code>RasterSourceSpecification</code> | <code>RasterDEMSourceSpecification</code></p> <p>A plain (stringifiable) JS object representing the current state of the source. Creating a source using the returned object as the <code>options</code> should result in a Source that is equivalent to this one.</p>"},{"location":"API/classes/RasterDEMTileSource/#implementation-of_6","title":"Implementation of","text":"<p><code>Source</code>.<code>serialize</code></p>"},{"location":"API/classes/RasterDEMTileSource/#inherited-from_10","title":"Inherited from","text":"<p><code>RasterTileSource</code>.<code>serialize</code></p>"},{"location":"API/classes/RasterDEMTileSource/#seteventedparent","title":"setEventedParent()","text":"<p>setEventedParent(<code>parent?</code>: <code>Evented</code>, <code>data?</code>: <code>any</code>): <code>RasterDEMTileSource</code></p> <p>Defined in: src/util/evented.ts:176</p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/RasterDEMTileSource/#parameters_7","title":"Parameters","text":"Parameter Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/RasterDEMTileSource/#returns_11","title":"Returns","text":"<p><code>RasterDEMTileSource</code></p>"},{"location":"API/classes/RasterDEMTileSource/#inherited-from_11","title":"Inherited from","text":"<p><code>RasterTileSource</code>.<code>setEventedParent</code></p>"},{"location":"API/classes/RasterDEMTileSource/#settiles","title":"setTiles()","text":"<p>setTiles(<code>tiles</code>: <code>string</code>[]): <code>this</code></p> <p>Defined in: src/source/raster_tile_source.ts:147</p> <p>Sets the source <code>tiles</code> property and re-renders the map.</p>"},{"location":"API/classes/RasterDEMTileSource/#parameters_8","title":"Parameters","text":"Parameter Type Description <code>tiles</code> <code>string</code>[] An array of one or more tile source URLs, as in the raster tiles spec (See the Style Specification"},{"location":"API/classes/RasterDEMTileSource/#returns_12","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/RasterDEMTileSource/#inherited-from_12","title":"Inherited from","text":"<p><code>RasterTileSource</code>.<code>setTiles</code></p>"},{"location":"API/classes/RasterDEMTileSource/#seturl","title":"setUrl()","text":"<p>setUrl(<code>url</code>: <code>string</code>): <code>this</code></p> <p>Defined in: src/source/raster_tile_source.ts:160</p> <p>Sets the source <code>url</code> property and re-renders the map.</p>"},{"location":"API/classes/RasterDEMTileSource/#parameters_9","title":"Parameters","text":"Parameter Type Description <code>url</code> <code>string</code> A URL to a TileJSON resource. Supported protocols are <code>http:</code> and <code>https:</code>."},{"location":"API/classes/RasterDEMTileSource/#returns_13","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/RasterDEMTileSource/#inherited-from_13","title":"Inherited from","text":"<p><code>RasterTileSource</code>.<code>setUrl</code></p>"},{"location":"API/classes/RasterDEMTileSource/#properties","title":"Properties","text":""},{"location":"API/classes/RasterDEMTileSource/#id","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/source/raster_tile_source.ts:54</p> <p>The id for the source. Must not be used by any existing source.</p>"},{"location":"API/classes/RasterDEMTileSource/#implementation-of_7","title":"Implementation of","text":"<p><code>Source</code>.<code>id</code></p>"},{"location":"API/classes/RasterDEMTileSource/#inherited-from_14","title":"Inherited from","text":"<p><code>RasterTileSource</code>.<code>id</code></p>"},{"location":"API/classes/RasterDEMTileSource/#maxzoom","title":"maxzoom","text":"<p>maxzoom: <code>number</code></p> <p>Defined in: src/source/raster_tile_source.ts:56</p> <p>The maximum zoom level for the source.</p>"},{"location":"API/classes/RasterDEMTileSource/#implementation-of_8","title":"Implementation of","text":"<p><code>Source</code>.<code>maxzoom</code></p>"},{"location":"API/classes/RasterDEMTileSource/#inherited-from_15","title":"Inherited from","text":"<p><code>RasterTileSource</code>.<code>maxzoom</code></p>"},{"location":"API/classes/RasterDEMTileSource/#minzoom","title":"minzoom","text":"<p>minzoom: <code>number</code></p> <p>Defined in: src/source/raster_tile_source.ts:55</p> <p>The minimum zoom level for the source.</p>"},{"location":"API/classes/RasterDEMTileSource/#implementation-of_9","title":"Implementation of","text":"<p><code>Source</code>.<code>minzoom</code></p>"},{"location":"API/classes/RasterDEMTileSource/#inherited-from_16","title":"Inherited from","text":"<p><code>RasterTileSource</code>.<code>minzoom</code></p>"},{"location":"API/classes/RasterDEMTileSource/#roundzoom","title":"roundZoom","text":"<p>roundZoom: <code>boolean</code></p> <p>Defined in: src/source/raster_tile_source.ts:63</p> <p><code>true</code> if zoom levels are rounded to the nearest integer in the source data, <code>false</code> if they are floor-ed to the nearest integer.</p>"},{"location":"API/classes/RasterDEMTileSource/#implementation-of_10","title":"Implementation of","text":"<p><code>Source</code>.<code>roundZoom</code></p>"},{"location":"API/classes/RasterDEMTileSource/#inherited-from_17","title":"Inherited from","text":"<p><code>RasterTileSource</code>.<code>roundZoom</code></p>"},{"location":"API/classes/RasterDEMTileSource/#tilesize","title":"tileSize","text":"<p>tileSize: <code>number</code></p> <p>Defined in: src/source/raster_tile_source.ts:59</p> <p>The tile size for the source.</p>"},{"location":"API/classes/RasterDEMTileSource/#implementation-of_11","title":"Implementation of","text":"<p><code>Source</code>.<code>tileSize</code></p>"},{"location":"API/classes/RasterDEMTileSource/#inherited-from_18","title":"Inherited from","text":"<p><code>RasterTileSource</code>.<code>tileSize</code></p>"},{"location":"API/classes/RasterTileSource/","title":"RasterTileSource","text":"<p>Defined in: src/source/raster_tile_source.ts:52</p> <p>A source containing raster tiles (See the raster source documentation for detailed documentation of options.)</p>"},{"location":"API/classes/RasterTileSource/#examples","title":"Examples","text":"<pre><code>map.addSource('raster-source', {\n    'type': 'raster',\n    'tiles': ['https://tiles.stadiamaps.com/tiles/stamen_watercolor/{z}/{x}/{y}.jpg'],\n    'tileSize': 256, // Set this to match tile server output to avoid blurry rendering\n});\n</code></pre> <pre><code>map.addSource('wms-test-source', {\n     'type': 'raster',\n// use the tiles option to specify a WMS tile source URL\n     'tiles': [\n         'https://img.nj.gov/imagerywms/Natural2015?bbox={bbox-epsg-3857}&amp;format=image/png&amp;service=WMS&amp;version=1.1.1&amp;request=GetMap&amp;srs=EPSG:3857&amp;transparent=true&amp;width=256&amp;height=256&amp;layers=Natural2015'\n     ],\n     'tileSize': 256 // Important for WMS if tiles are 256px\n});\n</code></pre>"},{"location":"API/classes/RasterTileSource/#see","title":"See","text":"<ul> <li>Add a raster tile source</li> <li>Add a WMS source</li> <li>Display a satellite map</li> </ul>"},{"location":"API/classes/RasterTileSource/#extends","title":"Extends","text":"<ul> <li><code>Evented</code></li> </ul>"},{"location":"API/classes/RasterTileSource/#extended-by","title":"Extended by","text":"<ul> <li><code>RasterDEMTileSource</code></li> </ul>"},{"location":"API/classes/RasterTileSource/#implements","title":"Implements","text":"<ul> <li><code>Source</code></li> </ul>"},{"location":"API/classes/RasterTileSource/#methods","title":"Methods","text":""},{"location":"API/classes/RasterTileSource/#aborttile","title":"abortTile()","text":"<p>abortTile(<code>tile</code>: <code>Tile</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Defined in: src/source/raster_tile_source.ts:214</p> <p>Allows to abort a tile loading.</p>"},{"location":"API/classes/RasterTileSource/#parameters","title":"Parameters","text":"Parameter Type Description <code>tile</code> <code>Tile</code> The tile to abort"},{"location":"API/classes/RasterTileSource/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"API/classes/RasterTileSource/#implementation-of","title":"Implementation of","text":"<p><code>Source</code>.<code>abortTile</code></p>"},{"location":"API/classes/RasterTileSource/#hastile","title":"hasTile()","text":"<p>hasTile(<code>tileID</code>: <code>OverscaledTileID</code>): <code>boolean</code></p> <p>Defined in: src/source/raster_tile_source.ts:173</p> <p>True is the tile is part of the source, false otherwise.</p>"},{"location":"API/classes/RasterTileSource/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>tileID</code> <code>OverscaledTileID</code> The tile ID"},{"location":"API/classes/RasterTileSource/#returns_1","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/RasterTileSource/#implementation-of_1","title":"Implementation of","text":"<p><code>Source</code>.<code>hasTile</code></p>"},{"location":"API/classes/RasterTileSource/#hastransition","title":"hasTransition()","text":"<p>hasTransition(): <code>boolean</code></p> <p>Defined in: src/source/raster_tile_source.ts:227</p> <p>True if the source has transition, false otherwise.</p>"},{"location":"API/classes/RasterTileSource/#returns_2","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/RasterTileSource/#implementation-of_2","title":"Implementation of","text":"<p><code>Source</code>.<code>hasTransition</code></p>"},{"location":"API/classes/RasterTileSource/#listens","title":"listens()","text":"<p>listens(<code>type</code>: <code>string</code>): <code>boolean</code></p> <p>Defined in: src/util/evented.ts:165</p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/RasterTileSource/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/RasterTileSource/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/RasterTileSource/#inherited-from","title":"Inherited from","text":"<p><code>Evented</code>.<code>listens</code></p>"},{"location":"API/classes/RasterTileSource/#loaded","title":"loaded()","text":"<p>loaded(): <code>boolean</code></p> <p>Defined in: src/source/raster_tile_source.ts:115</p> <p>True if the source is loaded, false otherwise.</p>"},{"location":"API/classes/RasterTileSource/#returns_4","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/RasterTileSource/#implementation-of_3","title":"Implementation of","text":"<p><code>Source</code>.<code>loaded</code></p>"},{"location":"API/classes/RasterTileSource/#loadtile","title":"loadTile()","text":"<p>loadTile(<code>tile</code>: <code>Tile</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Defined in: src/source/raster_tile_source.ts:177</p> <p>This method does the heavy lifting of loading a tile. In most cases it will defer the work to the relevant worker source.</p>"},{"location":"API/classes/RasterTileSource/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>tile</code> <code>Tile</code> The tile to load"},{"location":"API/classes/RasterTileSource/#returns_5","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"API/classes/RasterTileSource/#implementation-of_4","title":"Implementation of","text":"<p><code>Source</code>.<code>loadTile</code></p>"},{"location":"API/classes/RasterTileSource/#off","title":"off()","text":"<p>off(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>RasterTileSource</code></p> <p>Defined in: src/util/evented.ts:90</p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/RasterTileSource/#parameters_4","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/RasterTileSource/#returns_6","title":"Returns","text":"<p><code>RasterTileSource</code></p>"},{"location":"API/classes/RasterTileSource/#inherited-from_1","title":"Inherited from","text":"<p><code>Evented</code>.<code>off</code></p>"},{"location":"API/classes/RasterTileSource/#on","title":"on()","text":"<p>on(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>Subscription</code></p> <p>Defined in: src/util/evented.ts:73</p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/RasterTileSource/#parameters_5","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/RasterTileSource/#returns_7","title":"Returns","text":"<p><code>Subscription</code></p>"},{"location":"API/classes/RasterTileSource/#inherited-from_2","title":"Inherited from","text":"<p><code>Evented</code>.<code>on</code></p>"},{"location":"API/classes/RasterTileSource/#onadd","title":"onAdd()","text":"<p>onAdd(<code>map</code>: <code>Map</code>): <code>void</code></p> <p>Defined in: src/source/raster_tile_source.ts:119</p> <p>This method is called when the source is added to the map.</p>"},{"location":"API/classes/RasterTileSource/#parameters_6","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> The map instance"},{"location":"API/classes/RasterTileSource/#returns_8","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/RasterTileSource/#implementation-of_5","title":"Implementation of","text":"<p><code>Source</code>.<code>onAdd</code></p>"},{"location":"API/classes/RasterTileSource/#once","title":"once()","text":"<p>once(<code>type</code>: <code>string</code>, <code>listener?</code>: <code>Listener</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>RasterTileSource</code></p> <p>Defined in: src/util/evented.ts:106</p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/RasterTileSource/#parameters_7","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/RasterTileSource/#returns_9","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>RasterTileSource</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/RasterTileSource/#inherited-from_3","title":"Inherited from","text":"<p><code>Evented</code>.<code>once</code></p>"},{"location":"API/classes/RasterTileSource/#onremove","title":"onRemove()","text":"<p>onRemove(): <code>void</code></p> <p>Defined in: src/source/raster_tile_source.ts:124</p> <p>This method is called when the source is removed from the map.</p>"},{"location":"API/classes/RasterTileSource/#returns_10","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/RasterTileSource/#implementation-of_6","title":"Implementation of","text":"<p><code>Source</code>.<code>onRemove</code></p>"},{"location":"API/classes/RasterTileSource/#serialize","title":"serialize()","text":"<p>serialize(): <code>RasterSourceSpecification</code> | <code>RasterDEMSourceSpecification</code></p> <p>Defined in: src/source/raster_tile_source.ts:169</p>"},{"location":"API/classes/RasterTileSource/#returns_11","title":"Returns","text":"<p><code>RasterSourceSpecification</code> | <code>RasterDEMSourceSpecification</code></p> <p>A plain (stringifiable) JS object representing the current state of the source. Creating a source using the returned object as the <code>options</code> should result in a Source that is equivalent to this one.</p>"},{"location":"API/classes/RasterTileSource/#implementation-of_7","title":"Implementation of","text":"<p><code>Source</code>.<code>serialize</code></p>"},{"location":"API/classes/RasterTileSource/#seteventedparent","title":"setEventedParent()","text":"<p>setEventedParent(<code>parent?</code>: <code>Evented</code>, <code>data?</code>: <code>any</code>): <code>RasterTileSource</code></p> <p>Defined in: src/util/evented.ts:176</p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/RasterTileSource/#parameters_8","title":"Parameters","text":"Parameter Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/RasterTileSource/#returns_12","title":"Returns","text":"<p><code>RasterTileSource</code></p>"},{"location":"API/classes/RasterTileSource/#inherited-from_4","title":"Inherited from","text":"<p><code>Evented</code>.<code>setEventedParent</code></p>"},{"location":"API/classes/RasterTileSource/#settiles","title":"setTiles()","text":"<p>setTiles(<code>tiles</code>: <code>string</code>[]): <code>this</code></p> <p>Defined in: src/source/raster_tile_source.ts:147</p> <p>Sets the source <code>tiles</code> property and re-renders the map.</p>"},{"location":"API/classes/RasterTileSource/#parameters_9","title":"Parameters","text":"Parameter Type Description <code>tiles</code> <code>string</code>[] An array of one or more tile source URLs, as in the raster tiles spec (See the Style Specification"},{"location":"API/classes/RasterTileSource/#returns_13","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/RasterTileSource/#seturl","title":"setUrl()","text":"<p>setUrl(<code>url</code>: <code>string</code>): <code>this</code></p> <p>Defined in: src/source/raster_tile_source.ts:160</p> <p>Sets the source <code>url</code> property and re-renders the map.</p>"},{"location":"API/classes/RasterTileSource/#parameters_10","title":"Parameters","text":"Parameter Type Description <code>url</code> <code>string</code> A URL to a TileJSON resource. Supported protocols are <code>http:</code> and <code>https:</code>."},{"location":"API/classes/RasterTileSource/#returns_14","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/RasterTileSource/#unloadtile","title":"unloadTile()","text":"<p>unloadTile(<code>tile</code>: <code>Tile</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Defined in: src/source/raster_tile_source.ts:221</p> <p>Allows to unload a tile.</p>"},{"location":"API/classes/RasterTileSource/#parameters_11","title":"Parameters","text":"Parameter Type Description <code>tile</code> <code>Tile</code> The tile to unload"},{"location":"API/classes/RasterTileSource/#returns_15","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"API/classes/RasterTileSource/#implementation-of_8","title":"Implementation of","text":"<p><code>Source</code>.<code>unloadTile</code></p>"},{"location":"API/classes/RasterTileSource/#properties","title":"Properties","text":""},{"location":"API/classes/RasterTileSource/#id","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/source/raster_tile_source.ts:54</p> <p>The id for the source. Must not be used by any existing source.</p>"},{"location":"API/classes/RasterTileSource/#implementation-of_9","title":"Implementation of","text":"<p><code>Source</code>.<code>id</code></p>"},{"location":"API/classes/RasterTileSource/#maxzoom","title":"maxzoom","text":"<p>maxzoom: <code>number</code></p> <p>Defined in: src/source/raster_tile_source.ts:56</p> <p>The maximum zoom level for the source.</p>"},{"location":"API/classes/RasterTileSource/#implementation-of_10","title":"Implementation of","text":"<p><code>Source</code>.<code>maxzoom</code></p>"},{"location":"API/classes/RasterTileSource/#minzoom","title":"minzoom","text":"<p>minzoom: <code>number</code></p> <p>Defined in: src/source/raster_tile_source.ts:55</p> <p>The minimum zoom level for the source.</p>"},{"location":"API/classes/RasterTileSource/#implementation-of_11","title":"Implementation of","text":"<p><code>Source</code>.<code>minzoom</code></p>"},{"location":"API/classes/RasterTileSource/#roundzoom","title":"roundZoom","text":"<p>roundZoom: <code>boolean</code></p> <p>Defined in: src/source/raster_tile_source.ts:63</p> <p><code>true</code> if zoom levels are rounded to the nearest integer in the source data, <code>false</code> if they are floor-ed to the nearest integer.</p>"},{"location":"API/classes/RasterTileSource/#implementation-of_12","title":"Implementation of","text":"<p><code>Source</code>.<code>roundZoom</code></p>"},{"location":"API/classes/RasterTileSource/#tilesize","title":"tileSize","text":"<p>tileSize: <code>number</code></p> <p>Defined in: src/source/raster_tile_source.ts:59</p> <p>The tile size for the source.</p>"},{"location":"API/classes/RasterTileSource/#implementation-of_13","title":"Implementation of","text":"<p><code>Source</code>.<code>tileSize</code></p>"},{"location":"API/classes/ScaleControl/","title":"ScaleControl","text":"<p>Defined in: src/ui/control/scale_control.ts:48</p> <p>A <code>ScaleControl</code> control displays the ratio of a distance on the map to the corresponding distance on the ground.</p>"},{"location":"API/classes/ScaleControl/#example","title":"Example","text":"<pre><code>let scale = new ScaleControl({\n    maxWidth: 80,\n    unit: 'imperial'\n});\nmap.addControl(scale);\n\nscale.setUnit('metric');\n</code></pre>"},{"location":"API/classes/ScaleControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/ScaleControl/#constructors","title":"Constructors","text":""},{"location":"API/classes/ScaleControl/#constructor","title":"Constructor","text":"<p>new ScaleControl(<code>options?</code>: <code>ScaleControlOptions</code>): <code>ScaleControl</code></p> <p>Defined in: src/ui/control/scale_control.ts:56</p>"},{"location":"API/classes/ScaleControl/#parameters","title":"Parameters","text":"Parameter Type Description <code>options?</code> <code>ScaleControlOptions</code> the control's options"},{"location":"API/classes/ScaleControl/#returns","title":"Returns","text":"<p><code>ScaleControl</code></p>"},{"location":"API/classes/ScaleControl/#methods","title":"Methods","text":""},{"location":"API/classes/ScaleControl/#getdefaultposition","title":"getDefaultPosition()","text":"<p>getDefaultPosition(): <code>ControlPosition</code></p> <p>Defined in: src/ui/control/scale_control.ts:60</p> <p>Optionally provide a default position for this control. If this method is implemented and Map.addControl is called without the <code>position</code> parameter, the value returned by getDefaultPosition will be used as the control's position.</p>"},{"location":"API/classes/ScaleControl/#returns_1","title":"Returns","text":"<p><code>ControlPosition</code></p> <p>a control position, one of the values valid in addControl.</p>"},{"location":"API/classes/ScaleControl/#implementation-of","title":"Implementation of","text":"<p><code>IControl</code>.<code>getDefaultPosition</code></p>"},{"location":"API/classes/ScaleControl/#onadd","title":"onAdd()","text":"<p>onAdd(<code>map</code>: <code>Map</code>): <code>HTMLElement</code></p> <p>Defined in: src/ui/control/scale_control.ts:69</p> <p>Register a control on the map and give it a chance to register event listeners and resources. This method is called by Map.addControl internally.</p>"},{"location":"API/classes/ScaleControl/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> the Map this control will be added to"},{"location":"API/classes/ScaleControl/#returns_2","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The control's container element. This should be created by the control and returned by onAdd without being attached to the DOM: the map will insert the control's element into the DOM as necessary.</p>"},{"location":"API/classes/ScaleControl/#implementation-of_1","title":"Implementation of","text":"<p><code>IControl</code>.<code>onAdd</code></p>"},{"location":"API/classes/ScaleControl/#onremove","title":"onRemove()","text":"<p>onRemove(): <code>void</code></p> <p>Defined in: src/ui/control/scale_control.ts:80</p> <p>Unregister a control on the map and give it a chance to detach event listeners and resources. This method is called by Map.removeControl internally.</p>"},{"location":"API/classes/ScaleControl/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/ScaleControl/#implementation-of_2","title":"Implementation of","text":"<p><code>IControl</code>.<code>onRemove</code></p>"},{"location":"API/classes/ScaleControl/#setunit","title":"setUnit()","text":"<p>setUnit(<code>unit</code>: <code>Unit</code>): <code>void</code></p> <p>Defined in: src/ui/control/scale_control.ts:91</p> <p>Set the scale's unit of the distance</p>"},{"location":"API/classes/ScaleControl/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>unit</code> <code>Unit</code> Unit of the distance (<code>'imperial'</code>, <code>'metric'</code> or <code>'nautical'</code>)."},{"location":"API/classes/ScaleControl/#returns_4","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/ScrollZoomHandler/","title":"ScrollZoomHandler","text":"<p>Defined in: src/ui/handler/scroll_zoom.ts:36</p> <p>The <code>ScrollZoomHandler</code> allows the user to zoom the map by scrolling.</p>"},{"location":"API/classes/ScrollZoomHandler/#implements","title":"Implements","text":"<ul> <li><code>Handler</code></li> </ul>"},{"location":"API/classes/ScrollZoomHandler/#methods","title":"Methods","text":""},{"location":"API/classes/ScrollZoomHandler/#_shouldbeprevented","title":"_shouldBePrevented()","text":"<p>_shouldBePrevented(<code>e</code>: <code>WheelEvent</code>): <code>boolean</code></p> <p>Defined in: src/ui/handler/scroll_zoom.ts:160</p> <p>Determines whether or not the gesture is blocked due to cooperativeGestures.</p>"},{"location":"API/classes/ScrollZoomHandler/#parameters","title":"Parameters","text":"Parameter Type <code>e</code> <code>WheelEvent</code>"},{"location":"API/classes/ScrollZoomHandler/#returns","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/ScrollZoomHandler/#disable","title":"disable()","text":"<p>disable(): <code>void</code></p> <p>Defined in: src/ui/handler/scroll_zoom.ts:152</p> <p>Disables the \"scroll to zoom\" interaction.</p>"},{"location":"API/classes/ScrollZoomHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/ScrollZoomHandler/#example","title":"Example","text":"<pre><code>map.scrollZoom.disable();\n</code></pre>"},{"location":"API/classes/ScrollZoomHandler/#implementation-of","title":"Implementation of","text":"<p><code>Handler.disable</code></p>"},{"location":"API/classes/ScrollZoomHandler/#enable","title":"enable()","text":"<p>enable(<code>options?</code>: <code>boolean</code> | <code>AroundCenterOptions</code>): <code>void</code></p> <p>Defined in: src/ui/handler/scroll_zoom.ts:138</p> <p>Enables the \"scroll to zoom\" interaction.</p>"},{"location":"API/classes/ScrollZoomHandler/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>options?</code> <code>boolean</code> | <code>AroundCenterOptions</code> Options object."},{"location":"API/classes/ScrollZoomHandler/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/ScrollZoomHandler/#example_1","title":"Example","text":"<pre><code>map.scrollZoom.enable();\nmap.scrollZoom.enable({ around: 'center' })\n</code></pre>"},{"location":"API/classes/ScrollZoomHandler/#implementation-of_1","title":"Implementation of","text":"<p><code>Handler.enable</code></p>"},{"location":"API/classes/ScrollZoomHandler/#isactive","title":"isActive()","text":"<p>isActive(): <code>boolean</code></p> <p>Defined in: src/ui/handler/scroll_zoom.ts:120</p> <p>This is used to indicate if the handler is currently active or not. In case a handler is active, it will block other handlers from getting the relevant events. There is an allow list of handlers that can be active at the same time, which is configured when adding a handler.</p>"},{"location":"API/classes/ScrollZoomHandler/#returns_3","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/ScrollZoomHandler/#implementation-of_2","title":"Implementation of","text":"<p><code>Handler</code>.<code>isActive</code></p>"},{"location":"API/classes/ScrollZoomHandler/#isenabled","title":"isEnabled()","text":"<p>isEnabled(): <code>boolean</code></p> <p>Defined in: src/ui/handler/scroll_zoom.ts:111</p> <p>Returns a Boolean indicating whether the \"scroll to zoom\" interaction is enabled.</p>"},{"location":"API/classes/ScrollZoomHandler/#returns_4","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"scroll to zoom\" interaction is enabled.</p>"},{"location":"API/classes/ScrollZoomHandler/#implementation-of_3","title":"Implementation of","text":"<p><code>Handler.isEnabled</code></p>"},{"location":"API/classes/ScrollZoomHandler/#renderframe","title":"renderFrame()","text":"<p>renderFrame(): <code>object</code></p> <p>Defined in: src/ui/handler/scroll_zoom.ts:269</p> <p><code>renderFrame</code> is the only non-dom event. It is called during render frames and can be used to smooth camera changes (see scroll handler).</p>"},{"location":"API/classes/ScrollZoomHandler/#returns_5","title":"Returns","text":"<p><code>object</code></p>"},{"location":"API/classes/ScrollZoomHandler/#around","title":"around","text":"<p>around: <code>Point</code></p>"},{"location":"API/classes/ScrollZoomHandler/#needsrenderframe","title":"needsRenderFrame","text":"<p>needsRenderFrame: <code>boolean</code> = <code>!finished</code></p>"},{"location":"API/classes/ScrollZoomHandler/#noinertia","title":"noInertia","text":"<p>noInertia: <code>boolean</code> = <code>true</code></p>"},{"location":"API/classes/ScrollZoomHandler/#originalevent","title":"originalEvent","text":"<p>originalEvent: <code>any</code></p>"},{"location":"API/classes/ScrollZoomHandler/#zoomdelta","title":"zoomDelta","text":"<p>zoomDelta: <code>number</code></p>"},{"location":"API/classes/ScrollZoomHandler/#implementation-of_4","title":"Implementation of","text":"<p><code>Handler</code>.<code>renderFrame</code></p>"},{"location":"API/classes/ScrollZoomHandler/#reset","title":"reset()","text":"<p>reset(): <code>void</code></p> <p>Defined in: src/ui/handler/scroll_zoom.ts:387</p> <p><code>reset</code> can be called by the manager at any time and must reset everything to it's original state</p>"},{"location":"API/classes/ScrollZoomHandler/#returns_6","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/ScrollZoomHandler/#implementation-of_5","title":"Implementation of","text":"<p><code>Handler</code>.<code>reset</code></p>"},{"location":"API/classes/ScrollZoomHandler/#setwheelzoomrate","title":"setWheelZoomRate()","text":"<p>setWheelZoomRate(<code>wheelZoomRate</code>: <code>number</code>): <code>void</code></p> <p>Defined in: src/ui/handler/scroll_zoom.ts:103</p> <p>Set the zoom rate of a mouse wheel</p>"},{"location":"API/classes/ScrollZoomHandler/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>wheelZoomRate</code> <code>number</code> 1/450 The rate used to scale mouse wheel movement to a zoom value."},{"location":"API/classes/ScrollZoomHandler/#returns_7","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/ScrollZoomHandler/#example_2","title":"Example","text":"<p>Slow down zoom of mouse wheel <pre><code>map.scrollZoom.setWheelZoomRate(1/600);\n</code></pre></p>"},{"location":"API/classes/ScrollZoomHandler/#setzoomrate","title":"setZoomRate()","text":"<p>setZoomRate(<code>zoomRate</code>: <code>number</code>): <code>void</code></p> <p>Defined in: src/ui/handler/scroll_zoom.ts:90</p> <p>Set the zoom rate of a trackpad</p>"},{"location":"API/classes/ScrollZoomHandler/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>zoomRate</code> <code>number</code> 1/100 The rate used to scale trackpad movement to a zoom value."},{"location":"API/classes/ScrollZoomHandler/#returns_8","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/ScrollZoomHandler/#example_3","title":"Example","text":"<p>Speed up trackpad zoom <pre><code>map.scrollZoom.setZoomRate(1/25);\n</code></pre></p>"},{"location":"API/classes/Style/","title":"Style","text":"<p>Defined in: src/style/style.ts:205</p> <p>The Style base class</p>"},{"location":"API/classes/Style/#extends","title":"Extends","text":"<ul> <li><code>Evented</code></li> </ul>"},{"location":"API/classes/Style/#methods","title":"Methods","text":""},{"location":"API/classes/Style/#addlayer","title":"addLayer()","text":"<p>addLayer(<code>layerObject</code>: <code>AddLayerObject</code>, <code>before?</code>: <code>string</code>, <code>options?</code>: <code>StyleSetterOptions</code>): <code>this</code></p> <p>Defined in: src/style/style.ts:1055</p> <p>Add a layer to the map style. The layer will be inserted before the layer with ID <code>before</code>, or appended if <code>before</code> is omitted.</p>"},{"location":"API/classes/Style/#parameters","title":"Parameters","text":"Parameter Type Description <code>layerObject</code> <code>AddLayerObject</code> The style layer to add. <code>before?</code> <code>string</code> ID of an existing layer to insert before <code>options?</code> <code>StyleSetterOptions</code> Style setter options."},{"location":"API/classes/Style/#returns","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Style/#addsprite","title":"addSprite()","text":"<p>addSprite(<code>id</code>: <code>string</code>, <code>url</code>: <code>string</code>, <code>options</code>: <code>StyleSetterOptions</code>, <code>completion?</code>: (<code>err</code>: <code>Error</code>) =&gt; <code>void</code>): <code>void</code></p> <p>Defined in: src/style/style.ts:1918</p> <p>Add a sprite.</p>"},{"location":"API/classes/Style/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> The id of the desired sprite <code>url</code> <code>string</code> The url to load the desired sprite from <code>options</code> <code>StyleSetterOptions</code> The style setter options <code>completion?</code> (<code>err</code>: <code>Error</code>) =&gt; <code>void</code> The completion handler"},{"location":"API/classes/Style/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/Style/#getfilter","title":"getFilter()","text":"<p>getFilter(<code>layer</code>: <code>string</code>): <code>void</code> | <code>FilterSpecification</code></p> <p>Defined in: src/style/style.ts:1274</p> <p>Get a layer's filter object</p>"},{"location":"API/classes/Style/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>layer</code> <code>string</code> the layer to inspect"},{"location":"API/classes/Style/#returns_2","title":"Returns","text":"<p><code>void</code> | <code>FilterSpecification</code></p> <p>the layer's filter, if any</p>"},{"location":"API/classes/Style/#getlayer","title":"getLayer()","text":"<p>getLayer(<code>id</code>: <code>string</code>): <code>StyleLayer</code></p> <p>Defined in: src/style/style.ts:1199</p> <p>Return the style layer object with the given <code>id</code>.</p>"},{"location":"API/classes/Style/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> id of the desired layer"},{"location":"API/classes/Style/#returns_3","title":"Returns","text":"<p><code>StyleLayer</code></p> <p>a layer, if one with the given <code>id</code> exists</p>"},{"location":"API/classes/Style/#getlayersorder","title":"getLayersOrder()","text":"<p>getLayersOrder(): <code>string</code>[]</p> <p>Defined in: src/style/style.ts:1208</p> <p>Return the ids of all layers currently in the style, including custom layers, in order.</p>"},{"location":"API/classes/Style/#returns_4","title":"Returns","text":"<p><code>string</code>[]</p> <p>ids of layers, in order</p>"},{"location":"API/classes/Style/#getlayoutproperty","title":"getLayoutProperty()","text":"<p>getLayoutProperty(<code>layerId</code>: <code>string</code>, <code>name</code>: <code>string</code>): <code>any</code></p> <p>Defined in: src/style/style.ts:1299</p> <p>Get a layout property's value from a given layer</p>"},{"location":"API/classes/Style/#parameters_4","title":"Parameters","text":"Parameter Type Description <code>layerId</code> <code>string</code> the layer to inspect <code>name</code> <code>string</code> the name of the layout property"},{"location":"API/classes/Style/#returns_5","title":"Returns","text":"<p><code>any</code></p> <p>the property value</p>"},{"location":"API/classes/Style/#getsource","title":"getSource()","text":"<p>getSource(<code>id</code>: <code>string</code>): <code>Source</code></p> <p>Defined in: src/style/style.ts:1044</p> <p>Get a source by ID.</p>"},{"location":"API/classes/Style/#parameters_5","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> ID of the desired source"},{"location":"API/classes/Style/#returns_6","title":"Returns","text":"<p><code>Source</code></p> <p>source</p>"},{"location":"API/classes/Style/#getsprite","title":"getSprite()","text":"<p>getSprite(): <code>object</code>[]</p> <p>Defined in: src/style/style.ts:1971</p> <p>Get the current sprite value.</p>"},{"location":"API/classes/Style/#returns_7","title":"Returns","text":"<p><code>object</code>[]</p> <p>empty array when no sprite is set; id-url pairs otherwise</p>"},{"location":"API/classes/Style/#haslayer","title":"hasLayer()","text":"<p>hasLayer(<code>id</code>: <code>string</code>): <code>boolean</code></p> <p>Defined in: src/style/style.ts:1218</p> <p>Checks if a specific layer is present within the style.</p>"},{"location":"API/classes/Style/#parameters_6","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> the id of the desired layer"},{"location":"API/classes/Style/#returns_8","title":"Returns","text":"<p><code>boolean</code></p> <p>a boolean specifying if the given layer is present</p>"},{"location":"API/classes/Style/#listens","title":"listens()","text":"<p>listens(<code>type</code>: <code>string</code>): <code>boolean</code></p> <p>Defined in: src/util/evented.ts:165</p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/Style/#parameters_7","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/Style/#returns_9","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/Style/#inherited-from","title":"Inherited from","text":"<p><code>Evented</code>.<code>listens</code></p>"},{"location":"API/classes/Style/#movelayer","title":"moveLayer()","text":"<p>moveLayer(<code>id</code>: <code>string</code>, <code>before?</code>: <code>string</code>): <code>void</code></p> <p>Defined in: src/style/style.ts:1130</p> <p>Moves a layer to a different z-position. The layer will be inserted before the layer with ID <code>before</code>, or appended if <code>before</code> is omitted.</p>"},{"location":"API/classes/Style/#parameters_8","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> ID of the layer to move <code>before?</code> <code>string</code> ID of an existing layer to insert before"},{"location":"API/classes/Style/#returns_10","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/Style/#off","title":"off()","text":"<p>off(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>Style</code></p> <p>Defined in: src/util/evented.ts:90</p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/Style/#parameters_9","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/Style/#returns_11","title":"Returns","text":"<p><code>Style</code></p>"},{"location":"API/classes/Style/#inherited-from_1","title":"Inherited from","text":"<p><code>Evented</code>.<code>off</code></p>"},{"location":"API/classes/Style/#on","title":"on()","text":"<p>on(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>Subscription</code></p> <p>Defined in: src/util/evented.ts:73</p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/Style/#parameters_10","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/Style/#returns_12","title":"Returns","text":"<p><code>Subscription</code></p>"},{"location":"API/classes/Style/#inherited-from_2","title":"Inherited from","text":"<p><code>Evented</code>.<code>on</code></p>"},{"location":"API/classes/Style/#once","title":"once()","text":"<p>once(<code>type</code>: <code>string</code>, <code>listener?</code>: <code>Listener</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>Style</code></p> <p>Defined in: src/util/evented.ts:106</p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/Style/#parameters_11","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/Style/#returns_13","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>Style</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/Style/#inherited-from_3","title":"Inherited from","text":"<p><code>Evented</code>.<code>once</code></p>"},{"location":"API/classes/Style/#removelayer","title":"removeLayer()","text":"<p>removeLayer(<code>id</code>: <code>string</code>): <code>void</code></p> <p>Defined in: src/style/style.ts:1163</p> <p>Remove the layer with the given id from the style. A ErrorEvent event will be fired if no such layer exists.</p>"},{"location":"API/classes/Style/#parameters_12","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> id of the layer to remove"},{"location":"API/classes/Style/#returns_14","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/Style/#removesource","title":"removeSource()","text":"<p>removeSource(<code>id</code>: <code>string</code>): <code>this</code></p> <p>Defined in: src/style/style.ts:1002</p> <p>Remove a source from this stylesheet, given its id.</p>"},{"location":"API/classes/Style/#parameters_13","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> id of the source to remove"},{"location":"API/classes/Style/#returns_15","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/Style/#throws","title":"Throws","text":"<p>if no source is found with the given ID</p>"},{"location":"API/classes/Style/#removesprite","title":"removeSprite()","text":"<p>removeSprite(<code>id</code>: <code>string</code>): <code>void</code></p> <p>Defined in: src/style/style.ts:1939</p> <p>Remove a sprite by its id. When the last sprite is removed, the whole <code>this.stylesheet.sprite</code> object becomes <code>undefined</code>. This falsy <code>undefined</code> value later prevents attempts to load the sprite when it's absent.</p>"},{"location":"API/classes/Style/#parameters_14","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> the id of the sprite to remove"},{"location":"API/classes/Style/#returns_16","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/Style/#seteventedparent","title":"setEventedParent()","text":"<p>setEventedParent(<code>parent?</code>: <code>Evented</code>, <code>data?</code>: <code>any</code>): <code>Style</code></p> <p>Defined in: src/util/evented.ts:176</p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/Style/#parameters_15","title":"Parameters","text":"Parameter Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/Style/#returns_17","title":"Returns","text":"<p><code>Style</code></p>"},{"location":"API/classes/Style/#inherited-from_4","title":"Inherited from","text":"<p><code>Evented</code>.<code>setEventedParent</code></p>"},{"location":"API/classes/Style/#setgeojsonsourcedata","title":"setGeoJSONSourceData()","text":"<p>setGeoJSONSourceData(<code>id</code>: <code>string</code>, <code>data</code>: <code>string</code> | <code>GeoJSON</code>&lt;<code>Geometry</code>, {[<code>name</code>: <code>string</code>]: <code>any</code>; }&gt;): <code>void</code></p> <p>Defined in: src/style/style.ts:1028</p> <p>Set the data of a GeoJSON source, given its id.</p>"},{"location":"API/classes/Style/#parameters_16","title":"Parameters","text":"Parameter Type Description <code>id</code> <code>string</code> id of the source <code>data</code> <code>string</code> | <code>GeoJSON</code>&lt;<code>Geometry</code>, {[<code>name</code>: <code>string</code>]: <code>any</code>; }&gt; GeoJSON source"},{"location":"API/classes/Style/#returns_18","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/Style/#setsprite","title":"setSprite()","text":"<p>setSprite(<code>sprite</code>: <code>SpriteSpecification</code>, <code>options</code>: <code>StyleSetterOptions</code>, <code>completion?</code>: (<code>err</code>: <code>Error</code>) =&gt; <code>void</code>): <code>void</code></p> <p>Defined in: src/style/style.ts:1982</p> <p>Set a new value for the style's sprite.</p>"},{"location":"API/classes/Style/#parameters_17","title":"Parameters","text":"Parameter Type Description <code>sprite</code> <code>SpriteSpecification</code> new sprite value <code>options</code> <code>StyleSetterOptions</code> style setter options <code>completion?</code> (<code>err</code>: <code>Error</code>) =&gt; <code>void</code> the completion handler"},{"location":"API/classes/Style/#returns_19","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/Style/#setstate","title":"setState()","text":"<p>setState(<code>nextState</code>: <code>StyleSpecification</code>, <code>options</code>: <code>StyleSwapOptions</code> &amp; <code>StyleSetterOptions</code>): <code>boolean</code></p> <p>Defined in: src/style/style.ts:825</p> <p>Update this style's state to match the given style JSON, performing only the necessary mutations.</p> <p>May throw an Error ('Unimplemented: METHOD') if the mapbox-gl-style-spec diff algorithm produces an operation that is not supported.</p>"},{"location":"API/classes/Style/#parameters_18","title":"Parameters","text":"Parameter Type <code>nextState</code> <code>StyleSpecification</code> <code>options</code> <code>StyleSwapOptions</code> &amp; <code>StyleSetterOptions</code>"},{"location":"API/classes/Style/#returns_20","title":"Returns","text":"<p><code>boolean</code></p> <p>true if any changes were made; false otherwise</p>"},{"location":"API/classes/TerrainControl/","title":"TerrainControl","text":"<p>Defined in: src/ui/control/terrain_control.ts:20</p> <p>A <code>TerrainControl</code> control contains a button for turning the terrain on and off.</p>"},{"location":"API/classes/TerrainControl/#example","title":"Example","text":"<pre><code>let map = new Map({TerrainControl: false})\n    .addControl(new TerrainControl({\n        source: \"terrain\"\n    }));\n</code></pre>"},{"location":"API/classes/TerrainControl/#implements","title":"Implements","text":"<ul> <li><code>IControl</code></li> </ul>"},{"location":"API/classes/TerrainControl/#constructors","title":"Constructors","text":""},{"location":"API/classes/TerrainControl/#constructor","title":"Constructor","text":"<p>new TerrainControl(<code>options</code>: <code>TerrainSpecification</code>): <code>TerrainControl</code></p> <p>Defined in: src/ui/control/terrain_control.ts:29</p>"},{"location":"API/classes/TerrainControl/#parameters","title":"Parameters","text":"Parameter Type Description <code>options</code> <code>TerrainSpecification</code> the control's options"},{"location":"API/classes/TerrainControl/#returns","title":"Returns","text":"<p><code>TerrainControl</code></p>"},{"location":"API/classes/TerrainControl/#methods","title":"Methods","text":""},{"location":"API/classes/TerrainControl/#onadd","title":"onAdd()","text":"<p>onAdd(<code>map</code>: <code>Map</code>): <code>HTMLElement</code></p> <p>Defined in: src/ui/control/terrain_control.ts:34</p> <p>Register a control on the map and give it a chance to register event listeners and resources. This method is called by Map.addControl internally.</p>"},{"location":"API/classes/TerrainControl/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> the Map this control will be added to"},{"location":"API/classes/TerrainControl/#returns_1","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The control's container element. This should be created by the control and returned by onAdd without being attached to the DOM: the map will insert the control's element into the DOM as necessary.</p>"},{"location":"API/classes/TerrainControl/#implementation-of","title":"Implementation of","text":"<p><code>IControl</code>.<code>onAdd</code></p>"},{"location":"API/classes/TerrainControl/#onremove","title":"onRemove()","text":"<p>onRemove(): <code>void</code></p> <p>Defined in: src/ui/control/terrain_control.ts:48</p> <p>Unregister a control on the map and give it a chance to detach event listeners and resources. This method is called by Map.removeControl internally.</p>"},{"location":"API/classes/TerrainControl/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/TerrainControl/#implementation-of_1","title":"Implementation of","text":"<p><code>IControl</code>.<code>onRemove</code></p>"},{"location":"API/classes/TwoFingersTouchPitchHandler/","title":"TwoFingersTouchPitchHandler","text":"<p>Defined in: src/ui/handler/two_fingers_touch.ts:253</p> <p>The <code>TwoFingersTouchPitchHandler</code> allows the user to pitch the map by dragging up and down with two fingers.</p>"},{"location":"API/classes/TwoFingersTouchPitchHandler/#extends","title":"Extends","text":"<ul> <li><code>TwoFingersTouchHandler</code></li> </ul>"},{"location":"API/classes/TwoFingersTouchPitchHandler/#methods","title":"Methods","text":""},{"location":"API/classes/TwoFingersTouchPitchHandler/#disable","title":"disable()","text":"<p>disable(): <code>void</code></p> <p>Defined in: src/ui/handler/two_fingers_touch.ts:108</p> <p>Disables the \"drag to pitch\" interaction.</p>"},{"location":"API/classes/TwoFingersTouchPitchHandler/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/TwoFingersTouchPitchHandler/#example","title":"Example","text":"<pre><code>map.touchPitch.disable();\n</code></pre>"},{"location":"API/classes/TwoFingersTouchPitchHandler/#inherited-from","title":"Inherited from","text":"<p><code>TwoFingersTouchHandler.disable</code></p>"},{"location":"API/classes/TwoFingersTouchPitchHandler/#enable","title":"enable()","text":"<p>enable(<code>options?</code>: <code>boolean</code> | <code>AroundCenterOptions</code>): <code>void</code></p> <p>Defined in: src/ui/handler/two_fingers_touch.ts:95</p> <p>Enables the \"drag to pitch\" interaction.</p>"},{"location":"API/classes/TwoFingersTouchPitchHandler/#parameters","title":"Parameters","text":"Parameter Type <code>options?</code> <code>boolean</code> | <code>AroundCenterOptions</code>"},{"location":"API/classes/TwoFingersTouchPitchHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/TwoFingersTouchPitchHandler/#example_1","title":"Example","text":"<pre><code>map.touchPitch.enable();\n</code></pre>"},{"location":"API/classes/TwoFingersTouchPitchHandler/#inherited-from_1","title":"Inherited from","text":"<p><code>TwoFingersTouchHandler.enable</code></p>"},{"location":"API/classes/TwoFingersTouchPitchHandler/#isactive","title":"isActive()","text":"<p>isActive(): <code>boolean</code></p> <p>Defined in: src/ui/handler/two_fingers_touch.ts:127</p> <p>Returns a Boolean indicating whether the \"drag to pitch\" interaction is active, i.e. currently being used.</p>"},{"location":"API/classes/TwoFingersTouchPitchHandler/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to pitch\" interaction is active.</p>"},{"location":"API/classes/TwoFingersTouchPitchHandler/#inherited-from_2","title":"Inherited from","text":"<p><code>TwoFingersTouchHandler.isActive</code></p>"},{"location":"API/classes/TwoFingersTouchPitchHandler/#isenabled","title":"isEnabled()","text":"<p>isEnabled(): <code>boolean</code></p> <p>Defined in: src/ui/handler/two_fingers_touch.ts:118</p> <p>Returns a Boolean indicating whether the \"drag to pitch\" interaction is enabled.</p>"},{"location":"API/classes/TwoFingersTouchPitchHandler/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to pitch\" interaction is enabled.</p>"},{"location":"API/classes/TwoFingersTouchPitchHandler/#inherited-from_3","title":"Inherited from","text":"<p><code>TwoFingersTouchHandler.isEnabled</code></p>"},{"location":"API/classes/TwoFingersTouchRotateHandler/","title":"TwoFingersTouchRotateHandler","text":"<p>Defined in: src/ui/handler/two_fingers_touch.ts:192</p> <p>The <code>TwoFingersTouchHandler</code>s allows the user to rotate the map two fingers</p>"},{"location":"API/classes/TwoFingersTouchRotateHandler/#extends","title":"Extends","text":"<ul> <li><code>TwoFingersTouchHandler</code></li> </ul>"},{"location":"API/classes/TwoFingersTouchRotateHandler/#methods","title":"Methods","text":""},{"location":"API/classes/TwoFingersTouchRotateHandler/#disable","title":"disable()","text":"<p>disable(): <code>void</code></p> <p>Defined in: src/ui/handler/two_fingers_touch.ts:108</p> <p>Disables the \"drag to pitch\" interaction.</p>"},{"location":"API/classes/TwoFingersTouchRotateHandler/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/TwoFingersTouchRotateHandler/#example","title":"Example","text":"<pre><code>map.touchPitch.disable();\n</code></pre>"},{"location":"API/classes/TwoFingersTouchRotateHandler/#inherited-from","title":"Inherited from","text":"<p><code>TwoFingersTouchHandler.disable</code></p>"},{"location":"API/classes/TwoFingersTouchRotateHandler/#enable","title":"enable()","text":"<p>enable(<code>options?</code>: <code>boolean</code> | <code>AroundCenterOptions</code>): <code>void</code></p> <p>Defined in: src/ui/handler/two_fingers_touch.ts:95</p> <p>Enables the \"drag to pitch\" interaction.</p>"},{"location":"API/classes/TwoFingersTouchRotateHandler/#parameters","title":"Parameters","text":"Parameter Type <code>options?</code> <code>boolean</code> | <code>AroundCenterOptions</code>"},{"location":"API/classes/TwoFingersTouchRotateHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/TwoFingersTouchRotateHandler/#example_1","title":"Example","text":"<pre><code>map.touchPitch.enable();\n</code></pre>"},{"location":"API/classes/TwoFingersTouchRotateHandler/#inherited-from_1","title":"Inherited from","text":"<p><code>TwoFingersTouchHandler.enable</code></p>"},{"location":"API/classes/TwoFingersTouchRotateHandler/#isactive","title":"isActive()","text":"<p>isActive(): <code>boolean</code></p> <p>Defined in: src/ui/handler/two_fingers_touch.ts:127</p> <p>Returns a Boolean indicating whether the \"drag to pitch\" interaction is active, i.e. currently being used.</p>"},{"location":"API/classes/TwoFingersTouchRotateHandler/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to pitch\" interaction is active.</p>"},{"location":"API/classes/TwoFingersTouchRotateHandler/#inherited-from_2","title":"Inherited from","text":"<p><code>TwoFingersTouchHandler.isActive</code></p>"},{"location":"API/classes/TwoFingersTouchRotateHandler/#isenabled","title":"isEnabled()","text":"<p>isEnabled(): <code>boolean</code></p> <p>Defined in: src/ui/handler/two_fingers_touch.ts:118</p> <p>Returns a Boolean indicating whether the \"drag to pitch\" interaction is enabled.</p>"},{"location":"API/classes/TwoFingersTouchRotateHandler/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to pitch\" interaction is enabled.</p>"},{"location":"API/classes/TwoFingersTouchRotateHandler/#inherited-from_3","title":"Inherited from","text":"<p><code>TwoFingersTouchHandler.isEnabled</code></p>"},{"location":"API/classes/TwoFingersTouchZoomHandler/","title":"TwoFingersTouchZoomHandler","text":"<p>Defined in: src/ui/handler/two_fingers_touch.ts:152</p> <p>The <code>TwoFingersTouchHandler</code>s allows the user to zoom the map two fingers</p>"},{"location":"API/classes/TwoFingersTouchZoomHandler/#extends","title":"Extends","text":"<ul> <li><code>TwoFingersTouchHandler</code></li> </ul>"},{"location":"API/classes/TwoFingersTouchZoomHandler/#methods","title":"Methods","text":""},{"location":"API/classes/TwoFingersTouchZoomHandler/#disable","title":"disable()","text":"<p>disable(): <code>void</code></p> <p>Defined in: src/ui/handler/two_fingers_touch.ts:108</p> <p>Disables the \"drag to pitch\" interaction.</p>"},{"location":"API/classes/TwoFingersTouchZoomHandler/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/TwoFingersTouchZoomHandler/#example","title":"Example","text":"<pre><code>map.touchPitch.disable();\n</code></pre>"},{"location":"API/classes/TwoFingersTouchZoomHandler/#inherited-from","title":"Inherited from","text":"<p><code>TwoFingersTouchHandler.disable</code></p>"},{"location":"API/classes/TwoFingersTouchZoomHandler/#enable","title":"enable()","text":"<p>enable(<code>options?</code>: <code>boolean</code> | <code>AroundCenterOptions</code>): <code>void</code></p> <p>Defined in: src/ui/handler/two_fingers_touch.ts:95</p> <p>Enables the \"drag to pitch\" interaction.</p>"},{"location":"API/classes/TwoFingersTouchZoomHandler/#parameters","title":"Parameters","text":"Parameter Type <code>options?</code> <code>boolean</code> | <code>AroundCenterOptions</code>"},{"location":"API/classes/TwoFingersTouchZoomHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/TwoFingersTouchZoomHandler/#example_1","title":"Example","text":"<pre><code>map.touchPitch.enable();\n</code></pre>"},{"location":"API/classes/TwoFingersTouchZoomHandler/#inherited-from_1","title":"Inherited from","text":"<p><code>TwoFingersTouchHandler.enable</code></p>"},{"location":"API/classes/TwoFingersTouchZoomHandler/#isactive","title":"isActive()","text":"<p>isActive(): <code>boolean</code></p> <p>Defined in: src/ui/handler/two_fingers_touch.ts:127</p> <p>Returns a Boolean indicating whether the \"drag to pitch\" interaction is active, i.e. currently being used.</p>"},{"location":"API/classes/TwoFingersTouchZoomHandler/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to pitch\" interaction is active.</p>"},{"location":"API/classes/TwoFingersTouchZoomHandler/#inherited-from_2","title":"Inherited from","text":"<p><code>TwoFingersTouchHandler.isActive</code></p>"},{"location":"API/classes/TwoFingersTouchZoomHandler/#isenabled","title":"isEnabled()","text":"<p>isEnabled(): <code>boolean</code></p> <p>Defined in: src/ui/handler/two_fingers_touch.ts:118</p> <p>Returns a Boolean indicating whether the \"drag to pitch\" interaction is enabled.</p>"},{"location":"API/classes/TwoFingersTouchZoomHandler/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"drag to pitch\" interaction is enabled.</p>"},{"location":"API/classes/TwoFingersTouchZoomHandler/#inherited-from_3","title":"Inherited from","text":"<p><code>TwoFingersTouchHandler.isEnabled</code></p>"},{"location":"API/classes/TwoFingersTouchZoomRotateHandler/","title":"TwoFingersTouchZoomRotateHandler","text":"<p>Defined in: src/ui/handler/shim/two_fingers_touch.ts:13</p> <p>The <code>TwoFingersTouchZoomRotateHandler</code> allows the user to zoom and rotate the map by pinching on a touchscreen.</p> <p>They can zoom with one finger by double tapping and dragging. On the second tap, hold the finger down and drag up or down to zoom in or out.</p>"},{"location":"API/classes/TwoFingersTouchZoomRotateHandler/#methods","title":"Methods","text":""},{"location":"API/classes/TwoFingersTouchZoomRotateHandler/#disable","title":"disable()","text":"<p>disable(): <code>void</code></p> <p>Defined in: src/ui/handler/shim/two_fingers_touch.ts:58</p> <p>Disables the \"pinch to rotate and zoom\" interaction.</p>"},{"location":"API/classes/TwoFingersTouchZoomRotateHandler/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/TwoFingersTouchZoomRotateHandler/#example","title":"Example","text":"<pre><code>map.touchZoomRotate.disable();\n</code></pre>"},{"location":"API/classes/TwoFingersTouchZoomRotateHandler/#disablerotation","title":"disableRotation()","text":"<p>disableRotation(): <code>void</code></p> <p>Defined in: src/ui/handler/shim/two_fingers_touch.ts:94</p> <p>Disables the \"pinch to rotate\" interaction, leaving the \"pinch to zoom\" interaction enabled.</p>"},{"location":"API/classes/TwoFingersTouchZoomRotateHandler/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/TwoFingersTouchZoomRotateHandler/#example_1","title":"Example","text":"<pre><code>map.touchZoomRotate.disableRotation();\n</code></pre>"},{"location":"API/classes/TwoFingersTouchZoomRotateHandler/#enable","title":"enable()","text":"<p>enable(<code>options?</code>: <code>boolean</code> | <code>AroundCenterOptions</code>): <code>void</code></p> <p>Defined in: src/ui/handler/shim/two_fingers_touch.ts:43</p> <p>Enables the \"pinch to rotate and zoom\" interaction.</p>"},{"location":"API/classes/TwoFingersTouchZoomRotateHandler/#parameters","title":"Parameters","text":"Parameter Type Description <code>options?</code> <code>boolean</code> | <code>AroundCenterOptions</code> Options object."},{"location":"API/classes/TwoFingersTouchZoomRotateHandler/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/TwoFingersTouchZoomRotateHandler/#example_2","title":"Example","text":"<pre><code>map.touchZoomRotate.enable();\nmap.touchZoomRotate.enable({ around: 'center' });\n</code></pre>"},{"location":"API/classes/TwoFingersTouchZoomRotateHandler/#enablerotation","title":"enableRotation()","text":"<p>enableRotation(): <code>void</code></p> <p>Defined in: src/ui/handler/shim/two_fingers_touch.ts:108</p> <p>Enables the \"pinch to rotate\" interaction.</p>"},{"location":"API/classes/TwoFingersTouchZoomRotateHandler/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/TwoFingersTouchZoomRotateHandler/#example_3","title":"Example","text":"<pre><code>map.touchZoomRotate.enable();\nmap.touchZoomRotate.enableRotation();\n</code></pre>"},{"location":"API/classes/TwoFingersTouchZoomRotateHandler/#isactive","title":"isActive()","text":"<p>isActive(): <code>boolean</code></p> <p>Defined in: src/ui/handler/shim/two_fingers_touch.ts:81</p> <p>Returns true if the handler is enabled and has detected the start of a zoom/rotate gesture.</p>"},{"location":"API/classes/TwoFingersTouchZoomRotateHandler/#returns_4","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the handler is active, <code>false</code> otherwise</p>"},{"location":"API/classes/TwoFingersTouchZoomRotateHandler/#isenabled","title":"isEnabled()","text":"<p>isEnabled(): <code>boolean</code></p> <p>Defined in: src/ui/handler/shim/two_fingers_touch.ts:70</p> <p>Returns a Boolean indicating whether the \"pinch to rotate and zoom\" interaction is enabled.</p>"},{"location":"API/classes/TwoFingersTouchZoomRotateHandler/#returns_5","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if the \"pinch to rotate and zoom\" interaction is enabled.</p>"},{"location":"API/classes/VectorTileSource/","title":"VectorTileSource","text":"<p>Defined in: src/source/vector_tile_source.ts:57</p> <p>A source containing vector tiles in Mapbox Vector Tile format. (See the Style Specification for detailed documentation of options.)</p>"},{"location":"API/classes/VectorTileSource/#examples","title":"Examples","text":"<pre><code>map.addSource('some id', {\n    type: 'vector',\n    url: 'https://demotiles.maplibre.org/tiles/tiles.json'\n});\n</code></pre> <pre><code>map.addSource('some id', {\n    type: 'vector',\n    tiles: ['https://d25uarhxywzl1j.cloudfront.net/v0.1/{z}/{x}/{y}.mvt'],\n    minzoom: 6,\n    maxzoom: 14\n});\n</code></pre> <pre><code>map.getSource('some id').setUrl(\"https://demotiles.maplibre.org/tiles/tiles.json\");\n</code></pre> <pre><code>map.getSource('some id').setTiles(['https://d25uarhxywzl1j.cloudfront.net/v0.1/{z}/{x}/{y}.mvt']);\n</code></pre>"},{"location":"API/classes/VectorTileSource/#see","title":"See","text":"<p>Add a vector tile source</p>"},{"location":"API/classes/VectorTileSource/#extends","title":"Extends","text":"<ul> <li><code>Evented</code></li> </ul>"},{"location":"API/classes/VectorTileSource/#implements","title":"Implements","text":"<ul> <li><code>Source</code></li> </ul>"},{"location":"API/classes/VectorTileSource/#methods","title":"Methods","text":""},{"location":"API/classes/VectorTileSource/#aborttile","title":"abortTile()","text":"<p>abortTile(<code>tile</code>: <code>Tile</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Defined in: src/source/vector_tile_source.ts:256</p> <p>Allows to abort a tile loading.</p>"},{"location":"API/classes/VectorTileSource/#parameters","title":"Parameters","text":"Parameter Type Description <code>tile</code> <code>Tile</code> The tile to abort"},{"location":"API/classes/VectorTileSource/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"API/classes/VectorTileSource/#implementation-of","title":"Implementation of","text":"<p><code>Source</code>.<code>abortTile</code></p>"},{"location":"API/classes/VectorTileSource/#hastile","title":"hasTile()","text":"<p>hasTile(<code>tileID</code>: <code>OverscaledTileID</code>): <code>boolean</code></p> <p>Defined in: src/source/vector_tile_source.ts:135</p> <p>True is the tile is part of the source, false otherwise.</p>"},{"location":"API/classes/VectorTileSource/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>tileID</code> <code>OverscaledTileID</code> The tile ID"},{"location":"API/classes/VectorTileSource/#returns_1","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/VectorTileSource/#implementation-of_1","title":"Implementation of","text":"<p><code>Source</code>.<code>hasTile</code></p>"},{"location":"API/classes/VectorTileSource/#hastransition","title":"hasTransition()","text":"<p>hasTransition(): <code>boolean</code></p> <p>Defined in: src/source/vector_tile_source.ts:282</p> <p>True if the source has transition, false otherwise.</p>"},{"location":"API/classes/VectorTileSource/#returns_2","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/VectorTileSource/#implementation-of_2","title":"Implementation of","text":"<p><code>Source</code>.<code>hasTransition</code></p>"},{"location":"API/classes/VectorTileSource/#listens","title":"listens()","text":"<p>listens(<code>type</code>: <code>string</code>): <code>boolean</code></p> <p>Defined in: src/util/evented.ts:165</p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/VectorTileSource/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/VectorTileSource/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/VectorTileSource/#inherited-from","title":"Inherited from","text":"<p><code>Evented</code>.<code>listens</code></p>"},{"location":"API/classes/VectorTileSource/#loaded","title":"loaded()","text":"<p>loaded(): <code>boolean</code></p> <p>Defined in: src/source/vector_tile_source.ts:131</p> <p>True if the source is loaded, false otherwise.</p>"},{"location":"API/classes/VectorTileSource/#returns_4","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/VectorTileSource/#implementation-of_3","title":"Implementation of","text":"<p><code>Source</code>.<code>loaded</code></p>"},{"location":"API/classes/VectorTileSource/#loadtile","title":"loadTile()","text":"<p>loadTile(<code>tile</code>: <code>Tile</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Defined in: src/source/vector_tile_source.ts:192</p> <p>This method does the heavy lifting of loading a tile. In most cases it will defer the work to the relevant worker source.</p>"},{"location":"API/classes/VectorTileSource/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>tile</code> <code>Tile</code> The tile to load"},{"location":"API/classes/VectorTileSource/#returns_5","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"API/classes/VectorTileSource/#implementation-of_4","title":"Implementation of","text":"<p><code>Source</code>.<code>loadTile</code></p>"},{"location":"API/classes/VectorTileSource/#off","title":"off()","text":"<p>off(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>VectorTileSource</code></p> <p>Defined in: src/util/evented.ts:90</p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/VectorTileSource/#parameters_4","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/VectorTileSource/#returns_6","title":"Returns","text":"<p><code>VectorTileSource</code></p>"},{"location":"API/classes/VectorTileSource/#inherited-from_1","title":"Inherited from","text":"<p><code>Evented</code>.<code>off</code></p>"},{"location":"API/classes/VectorTileSource/#on","title":"on()","text":"<p>on(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>Subscription</code></p> <p>Defined in: src/util/evented.ts:73</p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/VectorTileSource/#parameters_5","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/VectorTileSource/#returns_7","title":"Returns","text":"<p><code>Subscription</code></p>"},{"location":"API/classes/VectorTileSource/#inherited-from_2","title":"Inherited from","text":"<p><code>Evented</code>.<code>on</code></p>"},{"location":"API/classes/VectorTileSource/#onadd","title":"onAdd()","text":"<p>onAdd(<code>map</code>: <code>Map</code>): <code>void</code></p> <p>Defined in: src/source/vector_tile_source.ts:139</p> <p>This method is called when the source is added to the map.</p>"},{"location":"API/classes/VectorTileSource/#parameters_6","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> The map instance"},{"location":"API/classes/VectorTileSource/#returns_8","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/VectorTileSource/#implementation-of_5","title":"Implementation of","text":"<p><code>Source</code>.<code>onAdd</code></p>"},{"location":"API/classes/VectorTileSource/#once","title":"once()","text":"<p>once(<code>type</code>: <code>string</code>, <code>listener?</code>: <code>Listener</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>VectorTileSource</code></p> <p>Defined in: src/util/evented.ts:106</p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/VectorTileSource/#parameters_7","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/VectorTileSource/#returns_9","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>VectorTileSource</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/VectorTileSource/#inherited-from_3","title":"Inherited from","text":"<p><code>Evented</code>.<code>once</code></p>"},{"location":"API/classes/VectorTileSource/#onremove","title":"onRemove()","text":"<p>onRemove(): <code>void</code></p> <p>Defined in: src/source/vector_tile_source.ts:181</p> <p>This method is called when the source is removed from the map.</p>"},{"location":"API/classes/VectorTileSource/#returns_10","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/VectorTileSource/#implementation-of_6","title":"Implementation of","text":"<p><code>Source</code>.<code>onRemove</code></p>"},{"location":"API/classes/VectorTileSource/#serialize","title":"serialize()","text":"<p>serialize(): <code>VectorSourceSpecification</code></p> <p>Defined in: src/source/vector_tile_source.ts:188</p>"},{"location":"API/classes/VectorTileSource/#returns_11","title":"Returns","text":"<p><code>VectorSourceSpecification</code></p> <p>A plain (stringifiable) JS object representing the current state of the source. Creating a source using the returned object as the <code>options</code> should result in a Source that is equivalent to this one.</p>"},{"location":"API/classes/VectorTileSource/#implementation-of_7","title":"Implementation of","text":"<p><code>Source</code>.<code>serialize</code></p>"},{"location":"API/classes/VectorTileSource/#seteventedparent","title":"setEventedParent()","text":"<p>setEventedParent(<code>parent?</code>: <code>Evented</code>, <code>data?</code>: <code>any</code>): <code>VectorTileSource</code></p> <p>Defined in: src/util/evented.ts:176</p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/VectorTileSource/#parameters_8","title":"Parameters","text":"Parameter Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/VectorTileSource/#returns_12","title":"Returns","text":"<p><code>VectorTileSource</code></p>"},{"location":"API/classes/VectorTileSource/#inherited-from_4","title":"Inherited from","text":"<p><code>Evented</code>.<code>setEventedParent</code></p>"},{"location":"API/classes/VectorTileSource/#settiles","title":"setTiles()","text":"<p>setTiles(<code>tiles</code>: <code>string</code>[]): <code>this</code></p> <p>Defined in: src/source/vector_tile_source.ts:159</p> <p>Sets the source <code>tiles</code> property and re-renders the map.</p>"},{"location":"API/classes/VectorTileSource/#parameters_9","title":"Parameters","text":"Parameter Type Description <code>tiles</code> <code>string</code>[] An array of one or more tile source URLs, as in the TileJSON spec."},{"location":"API/classes/VectorTileSource/#returns_13","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/VectorTileSource/#seturl","title":"setUrl()","text":"<p>setUrl(<code>url</code>: <code>string</code>): <code>this</code></p> <p>Defined in: src/source/vector_tile_source.ts:172</p> <p>Sets the source <code>url</code> property and re-renders the map.</p>"},{"location":"API/classes/VectorTileSource/#parameters_10","title":"Parameters","text":"Parameter Type Description <code>url</code> <code>string</code> A URL to a TileJSON resource. Supported protocols are <code>http:</code> and <code>https:</code>."},{"location":"API/classes/VectorTileSource/#returns_14","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/VectorTileSource/#unloadtile","title":"unloadTile()","text":"<p>unloadTile(<code>tile</code>: <code>Tile</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Defined in: src/source/vector_tile_source.ts:269</p> <p>Allows to unload a tile.</p>"},{"location":"API/classes/VectorTileSource/#parameters_11","title":"Parameters","text":"Parameter Type Description <code>tile</code> <code>Tile</code> The tile to unload"},{"location":"API/classes/VectorTileSource/#returns_15","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"API/classes/VectorTileSource/#implementation-of_8","title":"Implementation of","text":"<p><code>Source</code>.<code>unloadTile</code></p>"},{"location":"API/classes/VectorTileSource/#properties","title":"Properties","text":""},{"location":"API/classes/VectorTileSource/#id","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/source/vector_tile_source.ts:59</p> <p>The id for the source. Must not be used by any existing source.</p>"},{"location":"API/classes/VectorTileSource/#implementation-of_9","title":"Implementation of","text":"<p><code>Source</code>.<code>id</code></p>"},{"location":"API/classes/VectorTileSource/#istileclipped","title":"isTileClipped","text":"<p>isTileClipped: <code>boolean</code></p> <p>Defined in: src/source/vector_tile_source.ts:75</p> <p><code>false</code> if tiles can be drawn outside their boundaries, <code>true</code> if they cannot.</p>"},{"location":"API/classes/VectorTileSource/#implementation-of_10","title":"Implementation of","text":"<p><code>Source</code>.<code>isTileClipped</code></p>"},{"location":"API/classes/VectorTileSource/#maxzoom","title":"maxzoom","text":"<p>maxzoom: <code>number</code></p> <p>Defined in: src/source/vector_tile_source.ts:61</p> <p>The maximum zoom level for the source.</p>"},{"location":"API/classes/VectorTileSource/#implementation-of_11","title":"Implementation of","text":"<p><code>Source</code>.<code>maxzoom</code></p>"},{"location":"API/classes/VectorTileSource/#minzoom","title":"minzoom","text":"<p>minzoom: <code>number</code></p> <p>Defined in: src/source/vector_tile_source.ts:60</p> <p>The minimum zoom level for the source.</p>"},{"location":"API/classes/VectorTileSource/#implementation-of_12","title":"Implementation of","text":"<p><code>Source</code>.<code>minzoom</code></p>"},{"location":"API/classes/VectorTileSource/#reparseoverscaled","title":"reparseOverscaled","text":"<p>reparseOverscaled: <code>boolean</code></p> <p>Defined in: src/source/vector_tile_source.ts:74</p> <p><code>true</code> if tiles should be sent back to the worker for each overzoomed zoom level, <code>false</code> if not.</p>"},{"location":"API/classes/VectorTileSource/#implementation-of_13","title":"Implementation of","text":"<p><code>Source</code>.<code>reparseOverscaled</code></p>"},{"location":"API/classes/VectorTileSource/#tilesize","title":"tileSize","text":"<p>tileSize: <code>number</code></p> <p>Defined in: src/source/vector_tile_source.ts:64</p> <p>The tile size for the source.</p>"},{"location":"API/classes/VectorTileSource/#implementation-of_14","title":"Implementation of","text":"<p><code>Source</code>.<code>tileSize</code></p>"},{"location":"API/classes/VideoSource/","title":"VideoSource","text":"<p>Defined in: src/source/video_source.ts:54</p> <p>A data source containing video. (See the Style Specification for detailed documentation of options.)</p>"},{"location":"API/classes/VideoSource/#example","title":"Example","text":"<pre><code>// add to map\nmap.addSource('some id', {\n   type: 'video',\n   url: [\n       'https://www.mapbox.com/blog/assets/baltimore-smoke.mp4',\n       'https://www.mapbox.com/blog/assets/baltimore-smoke.webm'\n   ],\n   coordinates: [\n       [-76.54, 39.18],\n       [-76.52, 39.18],\n       [-76.52, 39.17],\n       [-76.54, 39.17]\n   ]\n});\n\n// update\nlet mySource = map.getSource('some id');\nmySource.setCoordinates([\n    [-76.54335737228394, 39.18579907229748],\n    [-76.52803659439087, 39.1838364847587],\n    [-76.5295386314392, 39.17683392507606],\n    [-76.54520273208618, 39.17876344106642]\n]);\n\nmap.removeSource('some id');  // remove\n</code></pre>"},{"location":"API/classes/VideoSource/#see","title":"See","text":"<p>Add a video</p> <p>Note that when rendered as a raster layer, the layer's <code>raster-fade-duration</code> property will cause the video to fade in. This happens when playback is started, paused and resumed, or when the video's coordinates are updated. To avoid this behavior, set the layer's <code>raster-fade-duration</code> property to <code>0</code>.</p>"},{"location":"API/classes/VideoSource/#extends","title":"Extends","text":"<ul> <li><code>ImageSource</code></li> </ul>"},{"location":"API/classes/VideoSource/#methods","title":"Methods","text":""},{"location":"API/classes/VideoSource/#getvideo","title":"getVideo()","text":"<p>getVideo(): <code>HTMLVideoElement</code></p> <p>Defined in: src/source/video_source.ts:135</p> <p>Returns the HTML <code>video</code> element.</p>"},{"location":"API/classes/VideoSource/#returns","title":"Returns","text":"<p><code>HTMLVideoElement</code></p> <p>The HTML <code>video</code> element.</p>"},{"location":"API/classes/VideoSource/#listens","title":"listens()","text":"<p>listens(<code>type</code>: <code>string</code>): <code>boolean</code></p> <p>Defined in: src/util/evented.ts:165</p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/classes/VideoSource/#parameters","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/classes/VideoSource/#returns_1","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/classes/VideoSource/#inherited-from","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>listens</code></p>"},{"location":"API/classes/VideoSource/#loaded","title":"loaded()","text":"<p>loaded(): <code>boolean</code></p> <p>Defined in: src/source/image_source.ts:164</p> <p>True if the source is loaded, false otherwise.</p>"},{"location":"API/classes/VideoSource/#returns_2","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/classes/VideoSource/#inherited-from_1","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>loaded</code></p>"},{"location":"API/classes/VideoSource/#loadtile","title":"loadTile()","text":"<p>loadTile(<code>tile</code>: <code>Tile</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Defined in: src/source/image_source.ts:276</p> <p>This method does the heavy lifting of loading a tile. In most cases it will defer the work to the relevant worker source.</p>"},{"location":"API/classes/VideoSource/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>tile</code> <code>Tile</code> The tile to load"},{"location":"API/classes/VideoSource/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"API/classes/VideoSource/#inherited-from_2","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>loadTile</code></p>"},{"location":"API/classes/VideoSource/#off","title":"off()","text":"<p>off(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>VideoSource</code></p> <p>Defined in: src/util/evented.ts:90</p> <p>Removes a previously registered event listener.</p>"},{"location":"API/classes/VideoSource/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/classes/VideoSource/#returns_4","title":"Returns","text":"<p><code>VideoSource</code></p>"},{"location":"API/classes/VideoSource/#inherited-from_3","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>off</code></p>"},{"location":"API/classes/VideoSource/#on","title":"on()","text":"<p>on(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>Subscription</code></p> <p>Defined in: src/util/evented.ts:73</p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/classes/VideoSource/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/classes/VideoSource/#returns_5","title":"Returns","text":"<p><code>Subscription</code></p>"},{"location":"API/classes/VideoSource/#inherited-from_4","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>on</code></p>"},{"location":"API/classes/VideoSource/#once","title":"once()","text":"<p>once(<code>type</code>: <code>string</code>, <code>listener?</code>: <code>Listener</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>VideoSource</code></p> <p>Defined in: src/util/evented.ts:106</p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/classes/VideoSource/#parameters_4","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/classes/VideoSource/#returns_6","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>VideoSource</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/classes/VideoSource/#inherited-from_5","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>once</code></p>"},{"location":"API/classes/VideoSource/#onremove","title":"onRemove()","text":"<p>onRemove(): <code>void</code></p> <p>Defined in: src/source/image_source.ts:201</p> <p>This method is called when the source is removed from the map.</p>"},{"location":"API/classes/VideoSource/#returns_7","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/VideoSource/#inherited-from_6","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>onRemove</code></p>"},{"location":"API/classes/VideoSource/#pause","title":"pause()","text":"<p>pause(): <code>void</code></p> <p>Defined in: src/source/video_source.ts:103</p> <p>Pauses the video.</p>"},{"location":"API/classes/VideoSource/#returns_8","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/VideoSource/#play","title":"play()","text":"<p>play(): <code>void</code></p> <p>Defined in: src/source/video_source.ts:112</p> <p>Plays the video.</p>"},{"location":"API/classes/VideoSource/#returns_9","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/VideoSource/#prepare","title":"prepare()","text":"<p>prepare(): <code>this</code></p> <p>Defined in: src/source/video_source.ts:152</p> <p>Sets the video's coordinates and re-renders the map.</p>"},{"location":"API/classes/VideoSource/#returns_10","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/VideoSource/#overrides","title":"Overrides","text":"<p><code>ImageSource</code>.<code>prepare</code></p>"},{"location":"API/classes/VideoSource/#seek","title":"seek()","text":"<p>seek(<code>seconds</code>: <code>number</code>): <code>void</code></p> <p>Defined in: src/source/video_source.ts:121</p> <p>Sets playback to a timestamp, in seconds.</p>"},{"location":"API/classes/VideoSource/#parameters_5","title":"Parameters","text":"Parameter Type <code>seconds</code> <code>number</code>"},{"location":"API/classes/VideoSource/#returns_11","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/classes/VideoSource/#setcoordinates","title":"setCoordinates()","text":"<p>setCoordinates(<code>coordinates</code>: <code>Coordinates</code>): <code>this</code></p> <p>Defined in: src/source/image_source.ts:216</p> <p>Sets the image's coordinates and re-renders the map.</p>"},{"location":"API/classes/VideoSource/#parameters_6","title":"Parameters","text":"Parameter Type Description <code>coordinates</code> <code>Coordinates</code> Four geographical coordinates, represented as arrays of longitude and latitude numbers, which define the corners of the image. The coordinates start at the top left corner of the image and proceed in clockwise order. They do not have to represent a rectangle."},{"location":"API/classes/VideoSource/#returns_12","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/VideoSource/#inherited-from_7","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>setCoordinates</code></p>"},{"location":"API/classes/VideoSource/#seteventedparent","title":"setEventedParent()","text":"<p>setEventedParent(<code>parent?</code>: <code>Evented</code>, <code>data?</code>: <code>any</code>): <code>VideoSource</code></p> <p>Defined in: src/util/evented.ts:176</p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/classes/VideoSource/#parameters_7","title":"Parameters","text":"Parameter Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/classes/VideoSource/#returns_13","title":"Returns","text":"<p><code>VideoSource</code></p>"},{"location":"API/classes/VideoSource/#inherited-from_8","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>setEventedParent</code></p>"},{"location":"API/classes/VideoSource/#updateimage","title":"updateImage()","text":"<p>updateImage(<code>options</code>: <code>UpdateImageOptions</code>): <code>this</code></p> <p>Defined in: src/source/image_source.ts:174</p> <p>Updates the image URL and, optionally, the coordinates. To avoid having the image flash after changing, set the <code>raster-fade-duration</code> paint property on the raster layer to 0.</p>"},{"location":"API/classes/VideoSource/#parameters_8","title":"Parameters","text":"Parameter Type Description <code>options</code> <code>UpdateImageOptions</code> The options object."},{"location":"API/classes/VideoSource/#returns_14","title":"Returns","text":"<p><code>this</code></p>"},{"location":"API/classes/VideoSource/#inherited-from_9","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>updateImage</code></p>"},{"location":"API/classes/VideoSource/#properties","title":"Properties","text":""},{"location":"API/classes/VideoSource/#id","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/source/image_source.ts:95</p> <p>The id for the source. Must not be used by any existing source.</p>"},{"location":"API/classes/VideoSource/#inherited-from_10","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>id</code></p>"},{"location":"API/classes/VideoSource/#maxzoom","title":"maxzoom","text":"<p>maxzoom: <code>number</code></p> <p>Defined in: src/source/image_source.ts:97</p> <p>The maximum zoom level for the source.</p>"},{"location":"API/classes/VideoSource/#inherited-from_11","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>maxzoom</code></p>"},{"location":"API/classes/VideoSource/#minzoom","title":"minzoom","text":"<p>minzoom: <code>number</code></p> <p>Defined in: src/source/image_source.ts:96</p> <p>The minimum zoom level for the source.</p>"},{"location":"API/classes/VideoSource/#inherited-from_12","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>minzoom</code></p>"},{"location":"API/classes/VideoSource/#terraintileranges","title":"terrainTileRanges","text":"<p>terrainTileRanges: <code>object</code></p> <p>Defined in: src/source/image_source.ts:104</p> <p>This object is used to store the range of terrain tiles that overlap with this tile. It is relevant for image tiles, as the image exceeds single tile boundaries.</p>"},{"location":"API/classes/VideoSource/#index-signature","title":"Index Signature","text":"<p>[<code>zoom</code>: <code>string</code>]: <code>CanonicalTileRange</code></p>"},{"location":"API/classes/VideoSource/#inherited-from_13","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>terrainTileRanges</code></p>"},{"location":"API/classes/VideoSource/#tilesize","title":"tileSize","text":"<p>tileSize: <code>number</code></p> <p>Defined in: src/source/image_source.ts:98</p> <p>The tile size for the source.</p>"},{"location":"API/classes/VideoSource/#inherited-from_14","title":"Inherited from","text":"<p><code>ImageSource</code>.<code>tileSize</code></p>"},{"location":"API/enumerations/MessageType/","title":"MessageType","text":"<p>Defined in: src/util/actor_messages.ts:103</p> <p>All the possible message types that can be sent to and from the worker</p>"},{"location":"API/enumerations/MessageType/#enumeration-members","title":"Enumeration Members","text":""},{"location":"API/enumerations/MessageType/#aborttile","title":"abortTile","text":"<p>abortTile: <code>\"AT\"</code></p> <p>Defined in: src/util/actor_messages.ts:125</p>"},{"location":"API/enumerations/MessageType/#getclusterchildren","title":"getClusterChildren","text":"<p>getClusterChildren: <code>\"GCC\"</code></p> <p>Defined in: src/util/actor_messages.ts:106</p>"},{"location":"API/enumerations/MessageType/#getclusterexpansionzoom","title":"getClusterExpansionZoom","text":"<p>getClusterExpansionZoom: <code>\"GCEZ\"</code></p> <p>Defined in: src/util/actor_messages.ts:105</p>"},{"location":"API/enumerations/MessageType/#getclusterleaves","title":"getClusterLeaves","text":"<p>getClusterLeaves: <code>\"GCL\"</code></p> <p>Defined in: src/util/actor_messages.ts:107</p>"},{"location":"API/enumerations/MessageType/#getdashes","title":"getDashes","text":"<p>getDashes: <code>\"GDA\"</code></p> <p>Defined in: src/util/actor_messages.ts:113</p>"},{"location":"API/enumerations/MessageType/#getdata","title":"getData","text":"<p>getData: <code>\"GD\"</code></p> <p>Defined in: src/util/actor_messages.ts:109</p>"},{"location":"API/enumerations/MessageType/#getglyphs","title":"getGlyphs","text":"<p>getGlyphs: <code>\"GG\"</code></p> <p>Defined in: src/util/actor_messages.ts:112</p>"},{"location":"API/enumerations/MessageType/#getimages","title":"getImages","text":"<p>getImages: <code>\"GI\"</code></p> <p>Defined in: src/util/actor_messages.ts:114</p>"},{"location":"API/enumerations/MessageType/#getresource","title":"getResource","text":"<p>getResource: <code>\"GR\"</code></p> <p>Defined in: src/util/actor_messages.ts:127</p>"},{"location":"API/enumerations/MessageType/#importscript","title":"importScript","text":"<p>importScript: <code>\"IS\"</code></p> <p>Defined in: src/util/actor_messages.ts:123</p>"},{"location":"API/enumerations/MessageType/#loaddata","title":"loadData","text":"<p>loadData: <code>\"LD\"</code></p> <p>Defined in: src/util/actor_messages.ts:108</p>"},{"location":"API/enumerations/MessageType/#loaddemtile","title":"loadDEMTile","text":"<p>loadDEMTile: <code>\"LDT\"</code></p> <p>Defined in: src/util/actor_messages.ts:104</p>"},{"location":"API/enumerations/MessageType/#loadtile","title":"loadTile","text":"<p>loadTile: <code>\"LT\"</code></p> <p>Defined in: src/util/actor_messages.ts:110</p>"},{"location":"API/enumerations/MessageType/#reloadtile","title":"reloadTile","text":"<p>reloadTile: <code>\"RT\"</code></p> <p>Defined in: src/util/actor_messages.ts:111</p>"},{"location":"API/enumerations/MessageType/#removedemtile","title":"removeDEMTile","text":"<p>removeDEMTile: <code>\"RDT\"</code></p> <p>Defined in: src/util/actor_messages.ts:126</p>"},{"location":"API/enumerations/MessageType/#removemap","title":"removeMap","text":"<p>removeMap: <code>\"RM\"</code></p> <p>Defined in: src/util/actor_messages.ts:122</p>"},{"location":"API/enumerations/MessageType/#removesource","title":"removeSource","text":"<p>removeSource: <code>\"RS\"</code></p> <p>Defined in: src/util/actor_messages.ts:121</p>"},{"location":"API/enumerations/MessageType/#removetile","title":"removeTile","text":"<p>removeTile: <code>\"RMT\"</code></p> <p>Defined in: src/util/actor_messages.ts:124</p>"},{"location":"API/enumerations/MessageType/#setimages","title":"setImages","text":"<p>setImages: <code>\"SI\"</code></p> <p>Defined in: src/util/actor_messages.ts:115</p>"},{"location":"API/enumerations/MessageType/#setlayers","title":"setLayers","text":"<p>setLayers: <code>\"SL\"</code></p> <p>Defined in: src/util/actor_messages.ts:117</p>"},{"location":"API/enumerations/MessageType/#setreferrer","title":"setReferrer","text":"<p>setReferrer: <code>\"SR\"</code></p> <p>Defined in: src/util/actor_messages.ts:120</p>"},{"location":"API/enumerations/MessageType/#syncrtlpluginstate","title":"syncRTLPluginState","text":"<p>syncRTLPluginState: <code>\"SRPS\"</code></p> <p>Defined in: src/util/actor_messages.ts:119</p>"},{"location":"API/enumerations/MessageType/#updateglobalstate","title":"updateGlobalState","text":"<p>updateGlobalState: <code>\"UGS\"</code></p> <p>Defined in: src/util/actor_messages.ts:116</p>"},{"location":"API/enumerations/MessageType/#updatelayers","title":"updateLayers","text":"<p>updateLayers: <code>\"UL\"</code></p> <p>Defined in: src/util/actor_messages.ts:118</p>"},{"location":"API/enumerations/ResourceType/","title":"ResourceType","text":"<p>Defined in: src/util/request_manager.ts:6</p> <p>A type of MapLibre resource.</p>"},{"location":"API/enumerations/ResourceType/#enumeration-members","title":"Enumeration Members","text":""},{"location":"API/enumerations/ResourceType/#glyphs","title":"Glyphs","text":"<p>Glyphs: <code>\"Glyphs\"</code></p> <p>Defined in: src/util/request_manager.ts:7</p>"},{"location":"API/enumerations/ResourceType/#image","title":"Image","text":"<p>Image: <code>\"Image\"</code></p> <p>Defined in: src/util/request_manager.ts:8</p>"},{"location":"API/enumerations/ResourceType/#source","title":"Source","text":"<p>Source: <code>\"Source\"</code></p> <p>Defined in: src/util/request_manager.ts:9</p>"},{"location":"API/enumerations/ResourceType/#spriteimage","title":"SpriteImage","text":"<p>SpriteImage: <code>\"SpriteImage\"</code></p> <p>Defined in: src/util/request_manager.ts:10</p>"},{"location":"API/enumerations/ResourceType/#spritejson","title":"SpriteJSON","text":"<p>SpriteJSON: <code>\"SpriteJSON\"</code></p> <p>Defined in: src/util/request_manager.ts:11</p>"},{"location":"API/enumerations/ResourceType/#style","title":"Style","text":"<p>Style: <code>\"Style\"</code></p> <p>Defined in: src/util/request_manager.ts:12</p>"},{"location":"API/enumerations/ResourceType/#tile","title":"Tile","text":"<p>Tile: <code>\"Tile\"</code></p> <p>Defined in: src/util/request_manager.ts:13</p>"},{"location":"API/enumerations/ResourceType/#unknown","title":"Unknown","text":"<p>Unknown: <code>\"Unknown\"</code></p> <p>Defined in: src/util/request_manager.ts:14</p>"},{"location":"API/enumerations/TextFit/","title":"TextFit","text":"<p>Defined in: src/style/style_image.ts:37</p> <p>Enumeration of possible values for StyleImageMetadata.textFitWidth and textFitHeight.</p>"},{"location":"API/enumerations/TextFit/#enumeration-members","title":"Enumeration Members","text":""},{"location":"API/enumerations/TextFit/#proportional","title":"proportional","text":"<p>proportional: <code>\"proportional\"</code></p> <p>Defined in: src/style/style_image.ts:52</p> <p>The image will be resized on the specified axis to fit the content rectangle to the target text and will resize the other axis to maintain the aspect ratio of the content rectangle.</p>"},{"location":"API/enumerations/TextFit/#stretchonly","title":"stretchOnly","text":"<p>stretchOnly: <code>\"stretchOnly\"</code></p> <p>Defined in: src/style/style_image.ts:47</p> <p>The image will be resized on the specified axis to fit the content rectangle to the target text, but will not fall below the aspect ratio of the original content rectangle if the other axis is set to proportional.</p>"},{"location":"API/enumerations/TextFit/#stretchorshrink","title":"stretchOrShrink","text":"<p>stretchOrShrink: <code>\"stretchOrShrink\"</code></p> <p>Defined in: src/style/style_image.ts:42</p> <p>The image will be resized on the specified axis to tightly fit the content rectangle to target text. This is the same as not being defined.</p>"},{"location":"API/functions/addProtocol/","title":"addProtocol()","text":"<p>addProtocol(<code>customProtocol</code>: <code>string</code>, <code>loadFn</code>: <code>AddProtocolAction</code>): <code>void</code></p> <p>Defined in: src/source/protocol_crud.ts:33</p> <p>Adds a custom load resource function that will be called when using a URL that starts with a custom url schema. This will happen in the main thread, and workers might call it if they don't know how to handle the protocol. The example below will be triggered for custom:// urls defined in the sources list in the style definitions. The function passed will receive the request parameters and should return with the resulting resource, for example a pbf vector tile, non-compressed, represented as ArrayBuffer.</p>"},{"location":"API/functions/addProtocol/#parameters","title":"Parameters","text":"Parameter Type Description <code>customProtocol</code> <code>string</code> the protocol to hook, for example 'custom' <code>loadFn</code> <code>AddProtocolAction</code> the function to use when trying to fetch a tile specified by the customProtocol"},{"location":"API/functions/addProtocol/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/functions/addProtocol/#example","title":"Example","text":"<pre><code>// This will fetch a file using the fetch API (this is obviously a non interesting example...)\naddProtocol('custom', async (params, abortController) =&gt; {\n     const t = await fetch(`https://${params.url.split(\"://\")[1]}`);\n     if (t.status == 200) {\n         const buffer = await t.arrayBuffer();\n         return {data: buffer}\n     } else {\n         throw new Error(`Tile fetch error: ${t.statusText}`);\n     }\n });\n// the following is an example of a way to return an error when trying to load a tile\naddProtocol('custom2', async (params, abortController) =&gt; {\n     throw new Error('someErrorMessage');\n});\n</code></pre>"},{"location":"API/functions/addSourceType/","title":"addSourceType()","text":"<p>addSourceType(<code>name</code>: <code>string</code>, <code>SourceType</code>: <code>SourceClass</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Defined in: src/source/source.ts:186</p> <p>Adds a custom source type, making it available for use with Map.addSource.</p>"},{"location":"API/functions/addSourceType/#parameters","title":"Parameters","text":"Parameter Type Description <code>name</code> <code>string</code> The name of the source type; source definition objects use this name in the <code>{type: ...}</code> field. <code>SourceType</code> <code>SourceClass</code> A SourceClass - which is a constructor for the <code>Source</code> interface."},{"location":"API/functions/addSourceType/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p> <p>a promise that is resolved when the source type is ready or rejected with an error.</p>"},{"location":"API/functions/clearPrewarmedResources/","title":"clearPrewarmedResources()","text":"<p>clearPrewarmedResources(): <code>void</code></p> <p>Defined in: src/util/global_worker_pool.ts:54</p> <p>Clears up resources that have previously been created by <code>prewarm()</code>. Note that this is typically not necessary. You should only call this function if you expect the user of your app to not return to a Map view at any point in your application.</p>"},{"location":"API/functions/clearPrewarmedResources/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/functions/clearPrewarmedResources/#example","title":"Example","text":"<pre><code>clearPrewarmedResources()\n</code></pre>"},{"location":"API/functions/createTileMesh/","title":"createTileMesh()","text":"<p>createTileMesh(<code>options</code>: <code>CreateTileMeshOptions</code>, <code>forceIndicesSize?</code>: <code>IndicesType</code>): <code>TileMesh</code></p> <p>Defined in: src/util/create_tile_mesh.ts:117</p> <p>Creates a mesh of a quad that covers the entire tile (covering positions in range 0..EXTENT), is optionally subdivided into finer quads, optionally includes a border and optionally extends to the north and/or special pole vertices. Additionally the resulting mesh indices type can be specified using <code>forceIndicesSize</code>.</p>"},{"location":"API/functions/createTileMesh/#parameters","title":"Parameters","text":"Parameter Type Description <code>options</code> <code>CreateTileMeshOptions</code> Specify options for tile mesh creation such as granularity or border. <code>forceIndicesSize?</code> <code>IndicesType</code> Specifies what indices type to use. The values '32bit' and '16bit' force their respective indices size. If undefined, the mesh may use either size, and will pick 16 bit indices if possible. If '16bit' is specified and the mesh exceeds 65536 vertices, an exception is thrown."},{"location":"API/functions/createTileMesh/#returns","title":"Returns","text":"<p><code>TileMesh</code></p> <p>Typed arrays of the mesh vertices and indices.</p>"},{"location":"API/functions/createTileMesh/#example","title":"Example","text":"<pre><code>// Creating a mesh for a tile that can be used for raster layers, hillshade, etc.\nconst meshBuffers = createTileMesh({\n    granularity: map.style.projection.subdivisionGranularity.tile.getGranularityForZoomLevel(tileID.z),\n    generateBorders: true,\n    extendToNorthPole: tileID.y === 0,\n    extendToSouthPole: tileID.y === (1 &lt;&lt; tileID.z) - 1,\n}, '16bit');\n</code></pre>"},{"location":"API/functions/getMaxParallelImageRequests/","title":"getMaxParallelImageRequests()","text":"<p>getMaxParallelImageRequests(): <code>number</code></p> <p>Defined in: src/index.ts:147</p> <p>Gets and sets the maximum number of images (raster tiles, sprites, icons) to load in parallel, which affects performance in raster-heavy maps. 16 by default.</p>"},{"location":"API/functions/getMaxParallelImageRequests/#returns","title":"Returns","text":"<p><code>number</code></p> <p>Number of parallel requests currently configured.</p>"},{"location":"API/functions/getMaxParallelImageRequests/#example","title":"Example","text":"<pre><code>getMaxParallelImageRequests();\n</code></pre>"},{"location":"API/functions/getRTLTextPluginStatus/","title":"getRTLTextPluginStatus()","text":"<p>getRTLTextPluginStatus(): <code>string</code></p> <p>Defined in: src/index.ts:106</p> <p>Gets the map's RTL text plugin status. The status can be <code>unavailable</code> (i.e. not requested or removed), <code>loading</code>, <code>loaded</code> or <code>error</code>. If the status is <code>loaded</code> and the plugin is requested again, an error will be thrown.</p>"},{"location":"API/functions/getRTLTextPluginStatus/#returns","title":"Returns","text":"<p><code>string</code></p>"},{"location":"API/functions/getRTLTextPluginStatus/#example","title":"Example","text":"<pre><code>const pluginStatus = getRTLTextPluginStatus();\n</code></pre>"},{"location":"API/functions/getVersion/","title":"getVersion()","text":"<p>getVersion(): <code>string</code></p> <p>Defined in: src/index.ts:113</p> <p>Returns the package version of the library</p>"},{"location":"API/functions/getVersion/#returns","title":"Returns","text":"<p><code>string</code></p> <p>Package version of the library</p>"},{"location":"API/functions/getWorkerCount/","title":"getWorkerCount()","text":"<p>getWorkerCount(): <code>number</code></p> <p>Defined in: src/index.ts:125</p> <p>Gets the number of web workers instantiated on a page with GL JS maps. By default, workerCount is 1 except for Safari browser where it is set to half the number of CPU cores (capped at 3). Make sure to set this property before creating any map instances for it to have effect.</p>"},{"location":"API/functions/getWorkerCount/#returns","title":"Returns","text":"<p><code>number</code></p> <p>Number of workers currently configured.</p>"},{"location":"API/functions/getWorkerCount/#example","title":"Example","text":"<pre><code>const workerCount = getWorkerCount()\n</code></pre>"},{"location":"API/functions/getWorkerUrl/","title":"getWorkerUrl()","text":"<p>getWorkerUrl(): <code>string</code></p> <p>Defined in: src/index.ts:162</p> <p>Gets the worker url</p>"},{"location":"API/functions/getWorkerUrl/#returns","title":"Returns","text":"<p><code>string</code></p> <p>The worker url</p>"},{"location":"API/functions/importScriptInWorkers/","title":"importScriptInWorkers()","text":"<p>importScriptInWorkers(<code>workerUrl</code>: <code>string</code>): <code>Promise</code>&lt;<code>void</code>[]&gt;</p> <p>Defined in: src/index.ts:198</p> <p>Allows loading javascript code in the worker thread. Note that since this is using some very internal classes and flows it is considered experimental and can break at any point.</p> <p>It can be useful for the following examples: 1. Using <code>self.addProtocol</code> in the worker thread - note that you might need to also register the protocol on the main thread. 2. Using <code>self.registerWorkerSource(workerSource: WorkerSource)</code> to register a worker source, which should come with <code>addSourceType</code> usually. 3. using <code>self.actor.registerMessageHandler</code> to override some internal worker operations</p>"},{"location":"API/functions/importScriptInWorkers/#parameters","title":"Parameters","text":"Parameter Type Description <code>workerUrl</code> <code>string</code> the worker url e.g. a url of a javascript file to load in the worker"},{"location":"API/functions/importScriptInWorkers/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>[]&gt;</p>"},{"location":"API/functions/importScriptInWorkers/#example","title":"Example","text":"<pre><code>// below is an example of sending a js file to the worker to load the method there\n// Note that you'll need to call the global function `addProtocol` in the worker to register the protocol there.\n// add-protocol-worker.js\nasync function loadFn(params, abortController) {\n    const t = await fetch(`https://${params.url.split(\"://\")[1]}`);\n    if (t.status == 200) {\n        const buffer = await t.arrayBuffer();\n        return {data: buffer}\n    } else {\n        throw new Error(`Tile fetch error: ${t.statusText}`);\n    }\n}\nself.addProtocol('custom', loadFn);\n\n// main.js\nimportScriptInWorkers('add-protocol-worker.js');\n</code></pre>"},{"location":"API/functions/isTimeFrozen/","title":"isTimeFrozen()","text":"<p>isTimeFrozen(): <code>boolean</code></p> <p>Defined in: src/util/time_control.ts:103</p> <p>Returns whether time is currently frozen.</p>"},{"location":"API/functions/isTimeFrozen/#returns","title":"Returns","text":"<p><code>boolean</code></p> <p>True if time is frozen via setNow(), false otherwise</p>"},{"location":"API/functions/isTimeFrozen/#example","title":"Example","text":"<pre><code>setNow(1000);\nconsole.log(isTimeFrozen()); // true\nrestoreNow();\nconsole.log(isTimeFrozen()); // false\n</code></pre>"},{"location":"API/functions/prewarm/","title":"prewarm()","text":"<p>prewarm(): <code>void</code></p> <p>Defined in: src/util/global_worker_pool.ts:38</p> <p>Initializes resources like WebWorkers that can be shared across maps to lower load times in some situations. <code>setWorkerUrl()</code> and <code>setWorkerCount()</code>, if being used, must be set before <code>prewarm()</code> is called to have an effect.</p> <p>By default, the lifecycle of these resources is managed automatically, and they are lazily initialized when a Map is first created. By invoking <code>prewarm()</code>, these resources will be created ahead of time, and will not be cleared when the last Map is removed from the page. This allows them to be re-used by new Map instances that are created later. They can be manually cleared by calling <code>clearPrewarmedResources()</code>. This is only necessary if your web page remains active but stops using maps altogether.</p> <p>This is primarily useful when using GL-JS maps in a single page app, wherein a user would navigate between various views that can cause Map instances to constantly be created and destroyed.</p>"},{"location":"API/functions/prewarm/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/functions/prewarm/#example","title":"Example","text":"<pre><code>prewarm()\n</code></pre>"},{"location":"API/functions/removeProtocol/","title":"removeProtocol()","text":"<p>removeProtocol(<code>customProtocol</code>: <code>string</code>): <code>void</code></p> <p>Defined in: src/source/protocol_crud.ts:46</p> <p>Removes a previously added protocol in the main thread.</p>"},{"location":"API/functions/removeProtocol/#parameters","title":"Parameters","text":"Parameter Type Description <code>customProtocol</code> <code>string</code> the custom protocol to remove registration for"},{"location":"API/functions/removeProtocol/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/functions/removeProtocol/#example","title":"Example","text":"<pre><code>removeProtocol('custom');\n</code></pre>"},{"location":"API/functions/restoreNow/","title":"restoreNow()","text":"<p>restoreNow(): <code>void</code></p> <p>Defined in: src/util/time_control.ts:88</p> <p>Restores normal time flow after freezing with setNow(). Call this after finishing deterministic rendering operations.</p>"},{"location":"API/functions/restoreNow/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/functions/restoreNow/#example","title":"Example","text":"<pre><code>// After video export, resume normal time\nsetNow(0);\n// ... export frames ...\nrestoreNow(); // Map animations resume normally\n</code></pre>"},{"location":"API/functions/setMaxParallelImageRequests/","title":"setMaxParallelImageRequests()","text":"<p>setMaxParallelImageRequests(<code>numRequests</code>: <code>number</code>): <code>void</code></p> <p>Defined in: src/index.ts:157</p> <p>Sets the maximum number of images (raster tiles, sprites, icons) to load in parallel, which affects performance in raster-heavy maps. 16 by default.</p>"},{"location":"API/functions/setMaxParallelImageRequests/#parameters","title":"Parameters","text":"Parameter Type <code>numRequests</code> <code>number</code>"},{"location":"API/functions/setMaxParallelImageRequests/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/functions/setMaxParallelImageRequests/#example","title":"Example","text":"<pre><code>setMaxParallelImageRequests(10);\n</code></pre>"},{"location":"API/functions/setNow/","title":"setNow()","text":"<p>setNow(<code>timestamp</code>: <code>number</code>): <code>void</code></p> <p>Defined in: src/util/time_control.ts:72</p> <p>Freezes time at a specific timestamp for deterministic rendering. Useful for frame-by-frame video capture where each frame needs a consistent time value.</p>"},{"location":"API/functions/setNow/#parameters","title":"Parameters","text":"Parameter Type Description <code>timestamp</code> <code>number</code> Time in milliseconds to freeze at"},{"location":"API/functions/setNow/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/functions/setNow/#example","title":"Example","text":"<pre><code>// Freeze time for video export at 60fps\nsetNow(0);           // First frame\n// ... render frame ...\nsetNow(16.67);       // Second frame\n// ... render frame ...\nsetNow(33.34);       // Third frame\n// ... done ...\nrestoreNow();        // Resume normal time\n</code></pre>"},{"location":"API/functions/setRTLTextPlugin/","title":"setRTLTextPlugin()","text":"<p>setRTLTextPlugin(<code>pluginURL</code>: <code>string</code>, <code>lazy</code>: <code>boolean</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Defined in: src/index.ts:93</p> <p>Sets the map's RTL text plugin. Necessary for supporting the Arabic and Hebrew languages, which are written right-to-left.</p>"},{"location":"API/functions/setRTLTextPlugin/#parameters","title":"Parameters","text":"Parameter Type Description <code>pluginURL</code> <code>string</code> URL pointing to the Mapbox RTL text plugin source. <code>lazy</code> <code>boolean</code> If set to <code>true</code>, maplibre will defer loading the plugin until rtl text is encountered, rtl text will then be rendered only after the plugin finishes loading."},{"location":"API/functions/setRTLTextPlugin/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"API/functions/setRTLTextPlugin/#example","title":"Example","text":"<pre><code>setRTLTextPlugin('https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.3.0/dist/mapbox-gl-rtl-text.js', false);\n</code></pre>"},{"location":"API/functions/setRTLTextPlugin/#see","title":"See","text":"<p>Add support for right-to-left scripts</p>"},{"location":"API/functions/setWorkerCount/","title":"setWorkerCount()","text":"<p>setWorkerCount(<code>count</code>: <code>number</code>): <code>void</code></p> <p>Defined in: src/index.ts:136</p> <p>Sets the number of web workers instantiated on a page with GL JS maps. By default, workerCount is 1 except for Safari browser where it is set to half the number of CPU cores (capped at 3). Make sure to set this property before creating any map instances for it to have effect.</p>"},{"location":"API/functions/setWorkerCount/#parameters","title":"Parameters","text":"Parameter Type <code>count</code> <code>number</code>"},{"location":"API/functions/setWorkerCount/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/functions/setWorkerCount/#example","title":"Example","text":"<pre><code>setWorkerCount(2);\n</code></pre>"},{"location":"API/functions/setWorkerUrl/","title":"setWorkerUrl()","text":"<p>setWorkerUrl(<code>value</code>: <code>string</code>): <code>void</code></p> <p>Defined in: src/index.ts:166</p> <p>Sets the worker url</p>"},{"location":"API/functions/setWorkerUrl/#parameters","title":"Parameters","text":"Parameter Type <code>value</code> <code>string</code>"},{"location":"API/functions/setWorkerUrl/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/Actor/","title":"Actor","text":"<p>Defined in: src/util/actor.ts:56</p> <p>An implementation of the Actor design pattern that maintains the relationship between asynchronous tasks and the objects that spin them off - in this case, tasks like parsing parts of styles, owned by the styles</p>"},{"location":"API/interfaces/Actor/#implements","title":"Implements","text":"<ul> <li><code>IActor</code></li> </ul>"},{"location":"API/interfaces/Actor/#methods","title":"Methods","text":""},{"location":"API/interfaces/Actor/#sendasync","title":"sendAsync()","text":"<p>sendAsync&lt;<code>T</code>&gt;(<code>message</code>: <code>ActorMessage</code>&lt;<code>T</code>&gt;, <code>abortController?</code>: <code>AbortController</code>): <code>Promise</code>&lt;<code>RequestResponseMessageMap</code>[<code>T</code>][<code>1</code>]&gt;</p> <p>Defined in: src/util/actor.ts:97</p> <p>Sends a message from a main-thread map to a Worker or from a Worker back to a main-thread map instance.</p>"},{"location":"API/interfaces/Actor/#type-parameters","title":"Type Parameters","text":"Type Parameter <code>T</code> extends <code>MessageType</code>"},{"location":"API/interfaces/Actor/#parameters","title":"Parameters","text":"Parameter Type Description <code>message</code> <code>ActorMessage</code>&lt;<code>T</code>&gt; the message to send <code>abortController?</code> <code>AbortController</code> an optional AbortController to abort the request"},{"location":"API/interfaces/Actor/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>RequestResponseMessageMap</code>[<code>T</code>][<code>1</code>]&gt;</p> <p>a promise that will be resolved with the response data</p>"},{"location":"API/interfaces/Actor/#implementation-of","title":"Implementation of","text":"<p><code>IActor.sendAsync</code></p>"},{"location":"API/interfaces/AlphaImage/","title":"AlphaImage","text":"<p>Defined in: src/util/image.ts:88</p> <p>An image with alpha color value</p>"},{"location":"API/interfaces/CustomLayerInterface/","title":"CustomLayerInterface","text":"<p>Defined in: src/style/style_layer/custom_style_layer.ts:188</p> <p>Interface for custom style layers. This is a specification for implementers to model: it is not an exported method or class.</p> <p>Custom layers allow a user to render directly into the map's GL context using the map's camera. These layers can be added between any regular layers using Map.addLayer.</p> <p>Custom layers must have a unique <code>id</code> and must have the <code>type</code> of <code>\"custom\"</code>. They must implement <code>render</code> and may implement <code>prerender</code>, <code>onAdd</code> and <code>onRemove</code>. They can trigger rendering using Map.triggerRepaint and they should appropriately handle MapContextEvent with <code>webglcontextlost</code> and <code>webglcontextrestored</code>.</p> <p>The <code>renderingMode</code> property controls whether the layer is treated as a <code>\"2d\"</code> or <code>\"3d\"</code> map layer. Use:</p> <ul> <li><code>\"renderingMode\": \"3d\"</code> to use the depth buffer and share it with other layers</li> <li><code>\"renderingMode\": \"2d\"</code> to add a layer with no depth. If you need to use the depth buffer for a <code>\"2d\"</code> layer you must use an offscreen   framebuffer and CustomLayerInterface.prerender</li> </ul>"},{"location":"API/interfaces/CustomLayerInterface/#example","title":"Example","text":"<p>Custom layer implemented as ES6 class <pre><code>class NullIslandLayer {\n    constructor() {\n        this.id = 'null-island';\n        this.type = 'custom';\n        this.renderingMode = '2d';\n    }\n\n     onAdd(map: maplibregl.Map, gl: WebGLRenderingContext | WebGL2RenderingContext) {\n        const vertexSource = `\n        uniform mat4 u_matrix;\n        void main() {\n            gl_Position = u_matrix * vec4(0.5, 0.5, 0.0, 1.0);\n            gl_PointSize = 20.0;\n        }`;\n\n        const fragmentSource = `\n        void main() {\n            fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        }`;\n\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, vertexSource);\n        gl.compileShader(vertexShader);\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, fragmentSource);\n        gl.compileShader(fragmentShader);\n\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, vertexShader);\n        gl.attachShader(this.program, fragmentShader);\n        gl.linkProgram(this.program);\n    }\n\n    render({\n     gl,\n     modelViewProjectionMatrix: matrix\n     }: {\n     gl: WebGLRenderingContext | WebGL2RenderingContext;\n     modelViewProjectionMatrix: Float32Array;\n     }) {\n        gl.useProgram(this.program);\n        gl.uniformMatrix4fv(gl.getUniformLocation(this.program, \"u_matrix\"), false, matrix);\n        gl.drawArrays(gl.POINTS, 0, 1);\n    }\n}\n\nmap.on('load', () =&gt; {\n    map.addLayer(new NullIslandLayer());\n});\n</code></pre></p>"},{"location":"API/interfaces/CustomLayerInterface/#methods","title":"Methods","text":""},{"location":"API/interfaces/CustomLayerInterface/#onadd","title":"onAdd()?","text":"<p><code>optional</code> onAdd(<code>map</code>: <code>Map</code>, <code>gl</code>: <code>WebGLRenderingContext</code> | <code>WebGL2RenderingContext</code>): <code>void</code></p> <p>Defined in: src/style/style_layer/custom_style_layer.ts:231</p> <p>Optional method called when the layer has been added to the Map with Map.addLayer. This gives the layer a chance to initialize gl resources and register event listeners.</p>"},{"location":"API/interfaces/CustomLayerInterface/#parameters","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> The Map this custom layer was just added to. <code>gl</code> <code>WebGLRenderingContext</code> | <code>WebGL2RenderingContext</code> The gl context for the map."},{"location":"API/interfaces/CustomLayerInterface/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/CustomLayerInterface/#onremove","title":"onRemove()?","text":"<p><code>optional</code> onRemove(<code>map</code>: <code>Map</code>, <code>gl</code>: <code>WebGLRenderingContext</code> | <code>WebGL2RenderingContext</code>): <code>void</code></p> <p>Defined in: src/style/style_layer/custom_style_layer.ts:239</p> <p>Optional method called when the layer has been removed from the Map with Map.removeLayer. This gives the layer a chance to clean up gl resources and event listeners.</p>"},{"location":"API/interfaces/CustomLayerInterface/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> The Map this custom layer was just added to. <code>gl</code> <code>WebGLRenderingContext</code> | <code>WebGL2RenderingContext</code> The gl context for the map."},{"location":"API/interfaces/CustomLayerInterface/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/CustomLayerInterface/#properties","title":"Properties","text":""},{"location":"API/interfaces/CustomLayerInterface/#id","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/style/style_layer/custom_style_layer.ts:192</p> <p>A unique layer id.</p>"},{"location":"API/interfaces/CustomLayerInterface/#prerender","title":"prerender?","text":"<p><code>optional</code> prerender: <code>CustomRenderMethod</code></p> <p>Defined in: src/style/style_layer/custom_style_layer.ts:223</p> <p>Optional method called during a render frame to allow a layer to prepare resources or render into a texture.</p> <p>The layer cannot make any assumptions about the current GL state and must bind a framebuffer before rendering.</p>"},{"location":"API/interfaces/CustomLayerInterface/#render","title":"render","text":"<p>render: <code>CustomRenderMethod</code></p> <p>Defined in: src/style/style_layer/custom_style_layer.ts:217</p> <p>Called during a render frame allowing the layer to draw into the GL context.</p> <p>The layer can assume blending and depth state is set to allow the layer to properly blend and clip other layers. The layer cannot make any other assumptions about the current GL state.</p> <p>If the layer needs to render to a texture, it should implement the <code>prerender</code> method to do this and only use the <code>render</code> method for drawing directly into the main framebuffer.</p> <p>The blend function is set to <code>gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA)</code>. This expects colors to be provided in premultiplied alpha form where the <code>r</code>, <code>g</code> and <code>b</code> values are already multiplied by the <code>a</code> value. If you are unable to provide colors in premultiplied form you may want to change the blend function to <code>gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA)</code>.</p>"},{"location":"API/interfaces/CustomLayerInterface/#renderingmode","title":"renderingMode?","text":"<p><code>optional</code> renderingMode: <code>\"2d\"</code> | <code>\"3d\"</code></p> <p>Defined in: src/style/style_layer/custom_style_layer.ts:200</p> <p>Either <code>\"2d\"</code> or <code>\"3d\"</code>. Defaults to <code>\"2d\"</code>.</p>"},{"location":"API/interfaces/CustomLayerInterface/#type","title":"type","text":"<p>type: <code>\"custom\"</code></p> <p>Defined in: src/style/style_layer/custom_style_layer.ts:196</p> <p>The layer's type. Must be <code>\"custom\"</code>.</p>"},{"location":"API/interfaces/Dispatcher/","title":"Dispatcher","text":"<p>Defined in: src/util/dispatcher.ts:12</p> <p>Responsible for sending messages from a Source to an associated worker source (usually with the same name).</p>"},{"location":"API/interfaces/Dispatcher/#methods","title":"Methods","text":""},{"location":"API/interfaces/Dispatcher/#broadcast","title":"broadcast()","text":"<p>broadcast&lt;<code>T</code>&gt;(<code>type</code>: <code>T</code>, <code>data</code>: <code>RequestResponseMessageMap</code>[<code>T</code>][<code>0</code>]): <code>Promise</code>&lt;<code>RequestResponseMessageMap</code>[<code>T</code>][<code>1</code>][]&gt;</p> <p>Defined in: src/util/dispatcher.ts:36</p> <p>Broadcast a message to all Workers.</p>"},{"location":"API/interfaces/Dispatcher/#type-parameters","title":"Type Parameters","text":"Type Parameter <code>T</code> extends <code>MessageType</code>"},{"location":"API/interfaces/Dispatcher/#parameters","title":"Parameters","text":"Parameter Type <code>type</code> <code>T</code> <code>data</code> <code>RequestResponseMessageMap</code>[<code>T</code>][<code>0</code>]"},{"location":"API/interfaces/Dispatcher/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>RequestResponseMessageMap</code>[<code>T</code>][<code>1</code>][]&gt;</p>"},{"location":"API/interfaces/Dispatcher/#getactor","title":"getActor()","text":"<p>getActor(): <code>Actor</code></p> <p>Defined in: src/util/dispatcher.ts:48</p> <p>Acquires an actor to dispatch messages to. The actors are distributed in round-robin fashion.</p>"},{"location":"API/interfaces/Dispatcher/#returns_1","title":"Returns","text":"<p><code>Actor</code></p> <p>An actor object backed by a web worker for processing messages.</p>"},{"location":"API/interfaces/ErrorEvent/","title":"ErrorEvent","text":"<p>Defined in: src/util/evented.ts:46</p> <p>An error event</p>"},{"location":"API/interfaces/ErrorEvent/#extends","title":"Extends","text":"<ul> <li><code>Event</code></li> </ul>"},{"location":"API/interfaces/FeatureIndex/","title":"FeatureIndex","text":"<p>Defined in: src/data/feature_index.ts:57</p> <p>An in memory index class to allow fast interaction with features</p>"},{"location":"API/interfaces/GeoJSONFeature/","title":"GeoJSONFeature","text":"<p>Defined in: src/util/vectortile_to_geojson.ts:28</p> <p>A geojson feature</p>"},{"location":"API/interfaces/Handler/","title":"Handler","text":"<p>Defined in: src/ui/handler_manager.ts:43</p> <p>Handlers interpret dom events and return camera changes that should be applied to the map (<code>HandlerResult</code>s). The camera changes are all deltas. The handler itself should have no knowledge of the map's current state. This makes it easier to merge multiple results and keeps handlers simpler. For example, if there is a mousedown and mousemove, the mousePan handler would return a <code>panDelta</code> on the mousemove.</p>"},{"location":"API/interfaces/Handler/#methods","title":"Methods","text":""},{"location":"API/interfaces/Handler/#isactive","title":"isActive()","text":"<p>isActive(): <code>boolean</code></p> <p>Defined in: src/ui/handler_manager.ts:52</p> <p>This is used to indicate if the handler is currently active or not. In case a handler is active, it will block other handlers from getting the relevant events. There is an allow list of handlers that can be active at the same time, which is configured when adding a handler.</p>"},{"location":"API/interfaces/Handler/#returns","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/interfaces/Handler/#reset","title":"reset()","text":"<p>reset(): <code>void</code></p> <p>Defined in: src/ui/handler_manager.ts:56</p> <p><code>reset</code> can be called by the manager at any time and must reset everything to it's original state</p>"},{"location":"API/interfaces/Handler/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/Handler/#properties","title":"Properties","text":""},{"location":"API/interfaces/Handler/#renderframe","title":"renderFrame()?","text":"<p><code>readonly</code> <code>optional</code> renderFrame: () =&gt; <code>void</code> | <code>HandlerResult</code></p> <p>Defined in: src/ui/handler_manager.ts:78</p> <p><code>renderFrame</code> is the only non-dom event. It is called during render frames and can be used to smooth camera changes (see scroll handler).</p>"},{"location":"API/interfaces/Handler/#returns_2","title":"Returns","text":"<p><code>void</code> | <code>HandlerResult</code></p>"},{"location":"API/interfaces/IActor/","title":"IActor","text":"<p>Defined in: src/util/actor.ts:42</p> <p>This interface allowing to substitute only the sendAsync method of the Actor class.</p>"},{"location":"API/interfaces/IControl/","title":"IControl","text":"<p>Defined in: src/ui/control/control.ts:37</p> <p>Interface for interactive controls added to the map. This is a specification for implementers to model: it is not an exported method or class.</p> <p>Controls must implement <code>onAdd</code> and <code>onRemove</code>, and must own an element, which is often a <code>div</code> element. To use MapLibre GL JS's default control styling, add the <code>maplibregl-ctrl</code> class to your control's node.</p>"},{"location":"API/interfaces/IControl/#example","title":"Example","text":"<pre><code>class HelloWorldControl: IControl {\n    onAdd(map) {\n        this._map = map;\n        this._container = document.createElement('div');\n        this._container.className = 'maplibregl-ctrl';\n        this._container.textContent = 'Hello, world';\n        return this._container;\n    }\n\n    onRemove() {\n        this._container.parentNode.removeChild(this._container);\n        this._map = undefined;\n    }\n}\n</code></pre>"},{"location":"API/interfaces/IControl/#methods","title":"Methods","text":""},{"location":"API/interfaces/IControl/#onadd","title":"onAdd()","text":"<p>onAdd(<code>map</code>: <code>Map</code>): <code>HTMLElement</code></p> <p>Defined in: src/ui/control/control.ts:49</p> <p>Register a control on the map and give it a chance to register event listeners and resources. This method is called by Map.addControl internally.</p>"},{"location":"API/interfaces/IControl/#parameters","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> the Map this control will be added to"},{"location":"API/interfaces/IControl/#returns","title":"Returns","text":"<p><code>HTMLElement</code></p> <p>The control's container element. This should be created by the control and returned by onAdd without being attached to the DOM: the map will insert the control's element into the DOM as necessary.</p>"},{"location":"API/interfaces/IControl/#onremove","title":"onRemove()","text":"<p>onRemove(<code>map</code>: <code>Map</code>): <code>void</code></p> <p>Defined in: src/ui/control/control.ts:57</p> <p>Unregister a control on the map and give it a chance to detach event listeners and resources. This method is called by Map.removeControl internally.</p>"},{"location":"API/interfaces/IControl/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> the Map this control will be removed from"},{"location":"API/interfaces/IControl/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/IControl/#properties","title":"Properties","text":""},{"location":"API/interfaces/IControl/#getdefaultposition","title":"getDefaultPosition()?","text":"<p><code>readonly</code> <code>optional</code> getDefaultPosition: () =&gt; <code>ControlPosition</code></p> <p>Defined in: src/ui/control/control.ts:66</p> <p>Optionally provide a default position for this control. If this method is implemented and Map.addControl is called without the <code>position</code> parameter, the value returned by getDefaultPosition will be used as the control's position.</p>"},{"location":"API/interfaces/IControl/#returns_2","title":"Returns","text":"<p><code>ControlPosition</code></p> <p>a control position, one of the values valid in addControl.</p>"},{"location":"API/interfaces/ImageAtlas/","title":"ImageAtlas","text":"<p>Defined in: src/render/image_atlas.ts:74</p> <p>A class holding all the images</p>"},{"location":"API/interfaces/MapEventType/","title":"MapEventType","text":"<p>Defined in: src/ui/events.ts:151</p> <p><code>MapEventType</code> - a mapping between the event name and the event value. These events are used with the Map.on method. When using a <code>layerId</code> with Map.on method, please refer to MapLayerEventType. The following example can be used for all the events.</p>"},{"location":"API/interfaces/MapEventType/#example","title":"Example","text":"<pre><code>// Initialize the map\nlet map = new Map({ // map options });\n// Set an event listener\nmap.on('the-event-name', () =&gt; {\n  console.log('An event has occurred!');\n});\n</code></pre>"},{"location":"API/interfaces/MapEventType/#properties","title":"Properties","text":""},{"location":"API/interfaces/MapEventType/#boxzoomcancel","title":"boxzoomcancel","text":"<p>boxzoomcancel: <code>MapLibreZoomEvent</code></p> <p>Defined in: src/ui/events.ts:253</p> <p>Fired when the user cancels a \"box zoom\" interaction, or when the bounding box does not meet the minimum size threshold. See BoxZoomHandler.</p>"},{"location":"API/interfaces/MapEventType/#boxzoomend","title":"boxzoomend","text":"<p>boxzoomend: <code>MapLibreZoomEvent</code></p> <p>Defined in: src/ui/events.ts:261</p> <p>Fired when a \"box zoom\" interaction ends.  See BoxZoomHandler.</p>"},{"location":"API/interfaces/MapEventType/#boxzoomstart","title":"boxzoomstart","text":"<p>boxzoomstart: <code>MapLibreZoomEvent</code></p> <p>Defined in: src/ui/events.ts:257</p> <p>Fired when a \"box zoom\" interaction starts. See BoxZoomHandler.</p>"},{"location":"API/interfaces/MapEventType/#click","title":"click","text":"<p>click: <code>MapMouseEvent</code></p> <p>Defined in: src/ui/events.ts:287</p> <p>Fired when a pointing device (usually a mouse) is pressed and released at the same point on the map.</p>"},{"location":"API/interfaces/MapEventType/#see","title":"See","text":"<ul> <li>Measure distances</li> <li>Center the map on a clicked symbol</li> </ul>"},{"location":"API/interfaces/MapEventType/#contextmenu","title":"contextmenu","text":"<p>contextmenu: <code>MapMouseEvent</code></p> <p>Defined in: src/ui/events.ts:291</p> <p>Fired when the right button of the mouse is clicked or the context menu key is pressed within the map.</p>"},{"location":"API/interfaces/MapEventType/#cooperativegestureprevented","title":"cooperativegestureprevented","text":"<p>cooperativegestureprevented: <code>MapLibreEvent</code>&lt;<code>TouchEvent</code> | <code>WheelEvent</code>&gt; &amp; <code>object</code></p> <p>Defined in: src/ui/events.ts:422</p> <p>Fired whenever the cooperativeGestures option prevents a gesture from being handled by the map. This is useful for showing your own UI when this happens.</p>"},{"location":"API/interfaces/MapEventType/#type-declaration","title":"Type Declaration","text":""},{"location":"API/interfaces/MapEventType/#gesturetype","title":"gestureType","text":"<p>gestureType: <code>\"wheel_zoom\"</code> | <code>\"touch_pan\"</code></p>"},{"location":"API/interfaces/MapEventType/#data","title":"data","text":"<p>data: <code>MapDataEvent</code></p> <p>Defined in: src/ui/events.ts:212</p> <p>Fired when any map data loads or changes. See MapDataEvent for more information.</p>"},{"location":"API/interfaces/MapEventType/#see_1","title":"See","text":"<p>Display HTML clusters with custom properties</p>"},{"location":"API/interfaces/MapEventType/#dataabort","title":"dataabort","text":"<p>dataabort: <code>MapDataEvent</code></p> <p>Defined in: src/ui/events.ts:244</p> <p>Fired when a request for one of the map's sources' tiles or data is aborted.</p>"},{"location":"API/interfaces/MapEventType/#dataloading","title":"dataloading","text":"<p>dataloading: <code>MapDataEvent</code></p> <p>Defined in: src/ui/events.ts:207</p> <p>Fired when any map data (style, source, tile, etc) begins loading or changing asynchronously. All <code>dataloading</code> events are followed by a <code>data</code>, <code>dataabort</code> or <code>error</code> event.</p>"},{"location":"API/interfaces/MapEventType/#dblclick","title":"dblclick","text":"<p>dblclick: <code>MapMouseEvent</code></p> <p>Defined in: src/ui/events.ts:298</p> <p>Fired when a pointing device (usually a mouse) is pressed and released twice at the same point on the map in rapid succession.</p> <p>Note</p> <p>Under normal conditions, this event will be preceded by two <code>click</code> events.</p>"},{"location":"API/interfaces/MapEventType/#drag","title":"drag","text":"<p>drag: <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code>&gt;</p> <p>Defined in: src/ui/events.ts:388</p> <p>Fired repeatedly during a \"drag to pan\" interaction. See DragPanHandler.</p>"},{"location":"API/interfaces/MapEventType/#dragend","title":"dragend","text":"<p>dragend: <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code>&gt;</p> <p>Defined in: src/ui/events.ts:393</p> <p>Fired when a \"drag to pan\" interaction ends. See DragPanHandler.</p>"},{"location":"API/interfaces/MapEventType/#see_2","title":"See","text":"<p>Create a draggable marker</p>"},{"location":"API/interfaces/MapEventType/#dragstart","title":"dragstart","text":"<p>dragstart: <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code>&gt;</p> <p>Defined in: src/ui/events.ts:384</p> <p>Fired when a \"drag to pan\" interaction starts. See DragPanHandler.</p>"},{"location":"API/interfaces/MapEventType/#error","title":"error","text":"<p>error: <code>ErrorEvent</code></p> <p>Defined in: src/ui/events.ts:158</p> <p>Fired when an error occurs. This is GL JS's primary error reporting mechanism. We use an event instead of <code>throw</code> to better accommodate asynchronous operations. If no listeners are bound to the <code>error</code> event, the error will be printed to the console.</p>"},{"location":"API/interfaces/MapEventType/#idle","title":"idle","text":"<p>idle: <code>MapLibreEvent</code></p> <p>Defined in: src/ui/events.ts:176</p> <p>Fired after the last frame rendered before the map enters an \"idle\" state:</p> <ul> <li>No camera transitions are in progress</li> <li>All currently requested tiles have loaded</li> <li>All fade/transition animations have completed</li> </ul>"},{"location":"API/interfaces/MapEventType/#load","title":"load","text":"<p>load: <code>MapLibreEvent</code></p> <p>Defined in: src/ui/events.ts:167</p> <p>Fired immediately after all necessary resources have been downloaded and the first visually complete rendering of the map has occurred.</p>"},{"location":"API/interfaces/MapEventType/#see_3","title":"See","text":"<ul> <li>Draw GeoJSON points</li> <li>Add live realtime data</li> <li>Animate a point</li> </ul>"},{"location":"API/interfaces/MapEventType/#mousedown","title":"mousedown","text":"<p>mousedown: <code>MapMouseEvent</code></p> <p>Defined in: src/ui/events.ts:319</p> <p>Fired when a pointing device (usually a mouse) is pressed within the map.</p>"},{"location":"API/interfaces/MapEventType/#see_4","title":"See","text":"<p>Create a draggable point</p>"},{"location":"API/interfaces/MapEventType/#mousemove","title":"mousemove","text":"<p>mousemove: <code>MapMouseEvent</code></p> <p>Defined in: src/ui/events.ts:307</p> <p>Fired when a pointing device (usually a mouse) is moved while the cursor is inside the map. As you move the cursor across the map, the event will fire every time the cursor changes position within the map.</p>"},{"location":"API/interfaces/MapEventType/#see_5","title":"See","text":"<ul> <li>Get coordinates of the mouse pointer</li> <li>Highlight features under the mouse pointer</li> <li>Display a popup on over</li> </ul>"},{"location":"API/interfaces/MapEventType/#mouseout","title":"mouseout","text":"<p>mouseout: <code>MapMouseEvent</code></p> <p>Defined in: src/ui/events.ts:323</p> <p>Fired when a point device (usually a mouse) leaves the map's canvas.</p>"},{"location":"API/interfaces/MapEventType/#mouseover","title":"mouseover","text":"<p>mouseover: <code>MapMouseEvent</code></p> <p>Defined in: src/ui/events.ts:333</p> <p>Fired when a pointing device (usually a mouse) is moved within the map. As you move the cursor across a web page containing a map, the event will fire each time it enters the map or any child elements.</p>"},{"location":"API/interfaces/MapEventType/#see_6","title":"See","text":"<ul> <li>Get coordinates of the mouse pointer</li> <li>Highlight features under the mouse pointer</li> <li>Display a popup on hover</li> </ul>"},{"location":"API/interfaces/MapEventType/#mouseup","title":"mouseup","text":"<p>mouseup: <code>MapMouseEvent</code></p> <p>Defined in: src/ui/events.ts:313</p> <p>Fired when a pointing device (usually a mouse) is released within the map.</p>"},{"location":"API/interfaces/MapEventType/#see_7","title":"See","text":"<p>Create a draggable point</p>"},{"location":"API/interfaces/MapEventType/#move","title":"move","text":"<p>move: <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>WheelEvent</code>&gt;</p> <p>Defined in: src/ui/events.ts:346</p> <p>Fired repeatedly during an animated transition from one view to another, as the result of either user interaction or methods such as Map.flyTo.</p>"},{"location":"API/interfaces/MapEventType/#see_8","title":"See","text":"<p>Display HTML clusters with custom properties</p>"},{"location":"API/interfaces/MapEventType/#moveend","title":"moveend","text":"<p>moveend: <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>WheelEvent</code>&gt;</p> <p>Defined in: src/ui/events.ts:353</p> <p>Fired just after the map completes a transition from one view to another, as the result of either user interaction or methods such as Map.jumpTo.</p>"},{"location":"API/interfaces/MapEventType/#see_9","title":"See","text":"<p>Display HTML clusters with custom properties</p>"},{"location":"API/interfaces/MapEventType/#movestart","title":"movestart","text":"<p>movestart: <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>WheelEvent</code>&gt;</p> <p>Defined in: src/ui/events.ts:339</p> <p>Fired just before the map begins a transition from one view to another, as the result of either user interaction or methods such as Map.jumpTo.</p>"},{"location":"API/interfaces/MapEventType/#pitch","title":"pitch","text":"<p>pitch: <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code>&gt;</p> <p>Defined in: src/ui/events.ts:404</p> <p>Fired repeatedly during the map's pitch (tilt) animation between one state and another as the result of either user interaction or methods such as Map.flyTo.</p>"},{"location":"API/interfaces/MapEventType/#pitchend","title":"pitchend","text":"<p>pitchend: <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code>&gt;</p> <p>Defined in: src/ui/events.ts:409</p> <p>Fired immediately after the map's pitch (tilt) finishes changing as the result of either user interaction or methods such as Map.flyTo.</p>"},{"location":"API/interfaces/MapEventType/#pitchstart","title":"pitchstart","text":"<p>pitchstart: <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code>&gt;</p> <p>Defined in: src/ui/events.ts:398</p> <p>Fired whenever the map's pitch (tilt) begins a change as the result of either user interaction or methods such as Map.flyTo .</p>"},{"location":"API/interfaces/MapEventType/#projectiontransition","title":"projectiontransition","text":"<p>projectiontransition: <code>MapProjectionEvent</code></p> <p>Defined in: src/ui/events.ts:428</p> <p>Fired when map's projection is modified in other ways than by map being moved.</p>"},{"location":"API/interfaces/MapEventType/#remove","title":"remove","text":"<p>remove: <code>MapLibreEvent</code></p> <p>Defined in: src/ui/events.ts:180</p> <p>Fired immediately after the map has been removed with Map.remove.</p>"},{"location":"API/interfaces/MapEventType/#render","title":"render","text":"<p>render: <code>MapLibreEvent</code></p> <p>Defined in: src/ui/events.ts:189</p> <p>Fired whenever the map is drawn to the screen, as the result of</p> <ul> <li>a change to the map's position, zoom, pitch, or bearing</li> <li>a change to the map's style</li> <li>a change to a GeoJSON source</li> <li>the loading of a vector tile, GeoJSON file, glyph, or sprite</li> </ul>"},{"location":"API/interfaces/MapEventType/#resize","title":"resize","text":"<p>resize: <code>MapLibreEvent</code></p> <p>Defined in: src/ui/events.ts:193</p> <p>Fired immediately after the map has been resized.</p>"},{"location":"API/interfaces/MapEventType/#rotate","title":"rotate","text":"<p>rotate: <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code>&gt;</p> <p>Defined in: src/ui/events.ts:376</p> <p>Fired repeatedly during a \"drag to rotate\" interaction. See DragRotateHandler.</p>"},{"location":"API/interfaces/MapEventType/#rotateend","title":"rotateend","text":"<p>rotateend: <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code>&gt;</p> <p>Defined in: src/ui/events.ts:380</p> <p>Fired when a \"drag to rotate\" interaction ends. See DragRotateHandler.</p>"},{"location":"API/interfaces/MapEventType/#rotatestart","title":"rotatestart","text":"<p>rotatestart: <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code>&gt;</p> <p>Defined in: src/ui/events.ts:372</p> <p>Fired when a \"drag to rotate\" interaction starts. See DragRotateHandler.</p>"},{"location":"API/interfaces/MapEventType/#sourcedata","title":"sourcedata","text":"<p>sourcedata: <code>MapSourceDataEvent</code></p> <p>Defined in: src/ui/events.ts:229</p> <p>Fired when one of the map's sources loads or changes, including if a tile belonging to a source loads or changes.</p>"},{"location":"API/interfaces/MapEventType/#sourcedataabort","title":"sourcedataabort","text":"<p>sourcedataabort: <code>MapSourceDataEvent</code></p> <p>Defined in: src/ui/events.ts:248</p> <p>Fired when a request for one of the map's sources' data is aborted.</p>"},{"location":"API/interfaces/MapEventType/#sourcedataloading","title":"sourcedataloading","text":"<p>sourcedataloading: <code>MapSourceDataEvent</code></p> <p>Defined in: src/ui/events.ts:218</p> <p>Fired when one of the map's sources begins loading or changing asynchronously. All <code>sourcedataloading</code> events are followed by a <code>sourcedata</code>, <code>sourcedataabort</code> or <code>error</code> event.</p>"},{"location":"API/interfaces/MapEventType/#styledata","title":"styledata","text":"<p>styledata: <code>MapStyleDataEvent</code></p> <p>Defined in: src/ui/events.ts:233</p> <p>Fired when the map's style loads or changes.</p>"},{"location":"API/interfaces/MapEventType/#styledataloading","title":"styledataloading","text":"<p>styledataloading: <code>MapStyleDataEvent</code></p> <p>Defined in: src/ui/events.ts:224</p> <p>Fired when the map's style begins loading or changing asynchronously. All <code>styledataloading</code> events are followed by a <code>styledata</code> or <code>error</code> event.</p>"},{"location":"API/interfaces/MapEventType/#styleimagemissing","title":"styleimagemissing","text":"<p>styleimagemissing: <code>MapStyleImageMissingEvent</code></p> <p>Defined in: src/ui/events.ts:240</p> <p>Fired when an icon or pattern needed by the style is missing. The missing image can be added with Map.addImage within this event listener callback to prevent the image from being skipped. This event can be used to dynamically generate icons and patterns.</p>"},{"location":"API/interfaces/MapEventType/#see_10","title":"See","text":"<p>Generate and add a missing icon to the map</p>"},{"location":"API/interfaces/MapEventType/#terrain","title":"terrain","text":"<p>terrain: <code>MapTerrainEvent</code></p> <p>Defined in: src/ui/events.ts:417</p> <p>Fired when terrain is changed</p>"},{"location":"API/interfaces/MapEventType/#touchcancel","title":"touchcancel","text":"<p>touchcancel: <code>MapTouchEvent</code></p> <p>Defined in: src/ui/events.ts:265</p> <p>Fired when a <code>touchcancel</code> event occurs within the map.</p>"},{"location":"API/interfaces/MapEventType/#touchend","title":"touchend","text":"<p>touchend: <code>MapTouchEvent</code></p> <p>Defined in: src/ui/events.ts:275</p> <p>Fired when a <code>touchend</code> event occurs within the map.</p>"},{"location":"API/interfaces/MapEventType/#see_11","title":"See","text":"<p>Create a draggable point</p>"},{"location":"API/interfaces/MapEventType/#touchmove","title":"touchmove","text":"<p>touchmove: <code>MapTouchEvent</code></p> <p>Defined in: src/ui/events.ts:270</p> <p>Fired when a <code>touchmove</code> event occurs within the map.</p>"},{"location":"API/interfaces/MapEventType/#see_12","title":"See","text":"<p>Create a draggable point</p>"},{"location":"API/interfaces/MapEventType/#touchstart","title":"touchstart","text":"<p>touchstart: <code>MapTouchEvent</code></p> <p>Defined in: src/ui/events.ts:280</p> <p>Fired when a <code>touchstart</code> event occurs within the map.</p>"},{"location":"API/interfaces/MapEventType/#see_13","title":"See","text":"<p>Create a draggable point</p>"},{"location":"API/interfaces/MapEventType/#webglcontextlost","title":"webglcontextlost","text":"<p>webglcontextlost: <code>MapContextEvent</code></p> <p>Defined in: src/ui/events.ts:197</p> <p>Fired when the WebGL context is lost.</p>"},{"location":"API/interfaces/MapEventType/#webglcontextrestored","title":"webglcontextrestored","text":"<p>webglcontextrestored: <code>MapContextEvent</code></p> <p>Defined in: src/ui/events.ts:201</p> <p>Fired when the WebGL context is restored.</p>"},{"location":"API/interfaces/MapEventType/#wheel","title":"wheel","text":"<p>wheel: <code>MapWheelEvent</code></p> <p>Defined in: src/ui/events.ts:413</p> <p>Fired when a <code>wheel</code> event occurs within the map.</p>"},{"location":"API/interfaces/MapEventType/#zoom","title":"zoom","text":"<p>zoom: <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>WheelEvent</code>&gt;</p> <p>Defined in: src/ui/events.ts:363</p> <p>Fired repeatedly during an animated transition from one zoom level to another, as the result of either user interaction or methods such as Map.flyTo.</p>"},{"location":"API/interfaces/MapEventType/#zoomend","title":"zoomend","text":"<p>zoomend: <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>WheelEvent</code>&gt;</p> <p>Defined in: src/ui/events.ts:368</p> <p>Fired just after the map completes a transition from one zoom level to another, as the result of either user interaction or methods such as Map.flyTo.</p>"},{"location":"API/interfaces/MapEventType/#zoomstart","title":"zoomstart","text":"<p>zoomstart: <code>MapLibreEvent</code>&lt;<code>MouseEvent</code> | <code>TouchEvent</code> | <code>WheelEvent</code>&gt;</p> <p>Defined in: src/ui/events.ts:358</p> <p>Fired just before the map begins a transition from one zoom level to another, as the result of either user interaction or methods such as Map.flyTo.</p>"},{"location":"API/interfaces/OverscaledTileID/","title":"OverscaledTileID","text":"<p>Defined in: src/source/tile_id.ts:89</p> <p>An overscaled tile identifier</p>"},{"location":"API/interfaces/OverscaledTileID/#methods","title":"Methods","text":""},{"location":"API/interfaces/OverscaledTileID/#scaledto","title":"scaledTo()","text":"<p>scaledTo(<code>targetZ</code>: <code>number</code>): <code>OverscaledTileID</code></p> <p>Defined in: src/source/tile_id.ts:126</p> <p>Returns a new <code>OverscaledTileID</code> representing the tile at the target zoom level. When targetZ is greater than the current canonical z, the canonical coordinates are unchanged. When targetZ is less than the current canonical z, the canonical coordinates are updated.</p>"},{"location":"API/interfaces/OverscaledTileID/#parameters","title":"Parameters","text":"Parameter Type Description <code>targetZ</code> <code>number</code> the zoom level to scale to. Must be less than or equal to this.overscaledZ"},{"location":"API/interfaces/OverscaledTileID/#returns","title":"Returns","text":"<p><code>OverscaledTileID</code></p> <p>a new OverscaledTileID representing the tile at the target zoom level</p>"},{"location":"API/interfaces/OverscaledTileID/#throws","title":"Throws","text":"<p>if targetZ is greater than this.overscaledZ</p>"},{"location":"API/interfaces/OverscaledTileID/#properties","title":"Properties","text":""},{"location":"API/interfaces/OverscaledTileID/#terrainrttposmatrix32f","title":"terrainRttPosMatrix32f","text":"<p>terrainRttPosMatrix32f: <code>mat4</code> = <code>null</code></p> <p>Defined in: src/source/tile_id.ts:100</p> <p>This matrix is used during terrain's render-to-texture stage only. If the render-to-texture stage is active, this matrix will be present and should be used, otherwise this matrix will be null. The matrix should be float32 in order to avoid slow WebGL calls in Chrome.</p>"},{"location":"API/interfaces/Source/","title":"Source","text":"<p>Defined in: src/source/source.ts:30</p> <p>The <code>Source</code> interface must be implemented by each source type, including \"core\" types (<code>vector</code>, <code>raster</code>, <code>video</code>, etc.) and all custom, third-party types.</p> <p>Event <code>data</code> - Fired with <code>{dataType: 'source', sourceDataType: 'metadata'}</code> to indicate that any necessary metadata has been loaded so that it's okay to call <code>loadTile</code>; and with <code>{dataType: 'source', sourceDataType: 'content'}</code> to indicate that the source data has changed, so that any current caches should be flushed.</p>"},{"location":"API/interfaces/Source/#methods","title":"Methods","text":""},{"location":"API/interfaces/Source/#aborttile","title":"abortTile()?","text":"<p><code>optional</code> abortTile(<code>tile</code>: <code>Tile</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Defined in: src/source/source.ts:104</p> <p>Allows to abort a tile loading.</p>"},{"location":"API/interfaces/Source/#parameters","title":"Parameters","text":"Parameter Type Description <code>tile</code> <code>Tile</code> The tile to abort"},{"location":"API/interfaces/Source/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"API/interfaces/Source/#fire","title":"fire()","text":"<p>fire(<code>event</code>: <code>Event</code>): <code>unknown</code></p> <p>Defined in: src/source/source.ts:78</p> <p>An ability to fire an event to all the listeners, see Evented</p>"},{"location":"API/interfaces/Source/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>event</code> <code>Event</code> The event to fire"},{"location":"API/interfaces/Source/#returns_1","title":"Returns","text":"<p><code>unknown</code></p>"},{"location":"API/interfaces/Source/#hastile","title":"hasTile()?","text":"<p><code>optional</code> hasTile(<code>tileID</code>: <code>OverscaledTileID</code>): <code>boolean</code></p> <p>Defined in: src/source/source.ts:99</p> <p>True is the tile is part of the source, false otherwise.</p>"},{"location":"API/interfaces/Source/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>tileID</code> <code>OverscaledTileID</code> The tile ID"},{"location":"API/interfaces/Source/#returns_2","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/interfaces/Source/#hastransition","title":"hasTransition()","text":"<p>hasTransition(): <code>boolean</code></p> <p>Defined in: src/source/source.ts:69</p> <p>True if the source has transition, false otherwise.</p>"},{"location":"API/interfaces/Source/#returns_3","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/interfaces/Source/#loaded","title":"loaded()","text":"<p>loaded(): <code>boolean</code></p> <p>Defined in: src/source/source.ts:73</p> <p>True if the source is loaded, false otherwise.</p>"},{"location":"API/interfaces/Source/#returns_4","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"API/interfaces/Source/#loadtile","title":"loadTile()","text":"<p>loadTile(<code>tile</code>: <code>Tile</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Defined in: src/source/source.ts:94</p> <p>This method does the heavy lifting of loading a tile. In most cases it will defer the work to the relevant worker source.</p>"},{"location":"API/interfaces/Source/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>tile</code> <code>Tile</code> The tile to load"},{"location":"API/interfaces/Source/#returns_5","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"API/interfaces/Source/#onadd","title":"onAdd()?","text":"<p><code>optional</code> onAdd(<code>map</code>: <code>Map</code>): <code>void</code></p> <p>Defined in: src/source/source.ts:83</p> <p>This method is called when the source is added to the map.</p>"},{"location":"API/interfaces/Source/#parameters_4","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> The map instance"},{"location":"API/interfaces/Source/#returns_6","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/Source/#onremove","title":"onRemove()?","text":"<p><code>optional</code> onRemove(<code>map</code>: <code>Map</code>): <code>void</code></p> <p>Defined in: src/source/source.ts:88</p> <p>This method is called when the source is removed from the map.</p>"},{"location":"API/interfaces/Source/#parameters_5","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> The map instance"},{"location":"API/interfaces/Source/#returns_7","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/Source/#prepare","title":"prepare()?","text":"<p><code>optional</code> prepare(): <code>void</code></p> <p>Defined in: src/source/source.ts:119</p> <p>Allows to execute a prepare step before the source is used.</p>"},{"location":"API/interfaces/Source/#returns_8","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/Source/#serialize","title":"serialize()","text":"<p>serialize(): <code>any</code></p> <p>Defined in: src/source/source.ts:115</p>"},{"location":"API/interfaces/Source/#returns_9","title":"Returns","text":"<p><code>any</code></p> <p>A plain (stringifiable) JS object representing the current state of the source. Creating a source using the returned object as the <code>options</code> should result in a Source that is equivalent to this one.</p>"},{"location":"API/interfaces/Source/#unloadtile","title":"unloadTile()?","text":"<p><code>optional</code> unloadTile(<code>tile</code>: <code>Tile</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Defined in: src/source/source.ts:109</p> <p>Allows to unload a tile.</p>"},{"location":"API/interfaces/Source/#parameters_6","title":"Parameters","text":"Parameter Type Description <code>tile</code> <code>Tile</code> The tile to unload"},{"location":"API/interfaces/Source/#returns_10","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"API/interfaces/Source/#properties","title":"Properties","text":""},{"location":"API/interfaces/Source/#attribution","title":"attribution?","text":"<p><code>optional</code> attribution: <code>string</code></p> <p>Defined in: src/source/source.ts:51</p> <p>The attribution for the source.</p>"},{"location":"API/interfaces/Source/#calculatetilezoom","title":"calculateTileZoom?","text":"<p><code>optional</code> calculateTileZoom: <code>CalculateTileZoomFunction</code></p> <p>Defined in: src/source/source.ts:123</p> <p>Optional function to redefine how tiles are loaded at high pitch angles.</p>"},{"location":"API/interfaces/Source/#id","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/source/source.ts:35</p> <p>The id for the source. Must not be used by any existing source.</p>"},{"location":"API/interfaces/Source/#istileclipped","title":"isTileClipped?","text":"<p><code>optional</code> isTileClipped: <code>boolean</code></p> <p>Defined in: src/source/source.ts:59</p> <p><code>false</code> if tiles can be drawn outside their boundaries, <code>true</code> if they cannot.</p>"},{"location":"API/interfaces/Source/#maxzoom","title":"maxzoom","text":"<p>maxzoom: <code>number</code></p> <p>Defined in: src/source/source.ts:43</p> <p>The maximum zoom level for the source.</p>"},{"location":"API/interfaces/Source/#minzoom","title":"minzoom","text":"<p>minzoom: <code>number</code></p> <p>Defined in: src/source/source.ts:39</p> <p>The minimum zoom level for the source.</p>"},{"location":"API/interfaces/Source/#reparseoverscaled","title":"reparseOverscaled?","text":"<p><code>optional</code> reparseOverscaled: <code>boolean</code></p> <p>Defined in: src/source/source.ts:64</p> <p><code>true</code> if tiles should be sent back to the worker for each overzoomed zoom level, <code>false</code> if not.</p>"},{"location":"API/interfaces/Source/#roundzoom","title":"roundZoom?","text":"<p><code>optional</code> roundZoom: <code>boolean</code></p> <p>Defined in: src/source/source.ts:55</p> <p><code>true</code> if zoom levels are rounded to the nearest integer in the source data, <code>false</code> if they are floor-ed to the nearest integer.</p>"},{"location":"API/interfaces/Source/#tilesize","title":"tileSize","text":"<p>tileSize: <code>number</code></p> <p>Defined in: src/source/source.ts:47</p> <p>The tile size for the source.</p>"},{"location":"API/interfaces/StyleImageInterface/","title":"StyleImageInterface","text":"<p>Defined in: src/style/style_image.ts:148</p> <p>Interface for dynamically generated style images. This is a specification for implementers to model: it is not an exported method or class.</p> <p>Images implementing this interface can be redrawn for every frame. They can be used to animate icons and patterns or make them respond to user input. Style images can implement a StyleImageInterface.render method. The method is called every frame and can be used to update the image.</p>"},{"location":"API/interfaces/StyleImageInterface/#see","title":"See","text":"<p>Add an animated icon to the map.</p>"},{"location":"API/interfaces/StyleImageInterface/#example","title":"Example","text":"<pre><code>let flashingSquare = {\n    width: 64,\n    height: 64,\n    data: new Uint8Array(64 * 64 * 4),\n\n    onAdd: function(map) {\n        this.map = map;\n    },\n\n    render: function() {\n        // keep repainting while the icon is on the map\n        this.map.triggerRepaint();\n\n        // alternate between black and white based on the time\n        let value = Math.round(Date.now() / 1000) % 2 === 0  ? 255 : 0;\n\n        // check if image needs to be changed\n        if (value !== this.previousValue) {\n            this.previousValue = value;\n\n            let bytesPerPixel = 4;\n            for (let x = 0; x &lt; this.width; x++) {\n                for (let y = 0; y &lt; this.height; y++) {\n                    let offset = (y * this.width + x) * bytesPerPixel;\n                    this.data[offset + 0] = value;\n                    this.data[offset + 1] = value;\n                    this.data[offset + 2] = value;\n                    this.data[offset + 3] = 255;\n                }\n            }\n\n            // return true to indicate that the image changed\n            return true;\n        }\n    }\n }\n\n map.addImage('flashing_square', flashingSquare);\n</code></pre>"},{"location":"API/interfaces/StyleImageInterface/#properties","title":"Properties","text":""},{"location":"API/interfaces/StyleImageInterface/#onadd","title":"onAdd()?","text":"<p><code>optional</code> onAdd: (<code>map</code>: <code>Map</code>, <code>id</code>: <code>string</code>) =&gt; <code>void</code></p> <p>Defined in: src/style/style_image.ts:170</p> <p>Optional method called when the layer has been added to the Map with Map.addImage.</p>"},{"location":"API/interfaces/StyleImageInterface/#parameters","title":"Parameters","text":"Parameter Type Description <code>map</code> <code>Map</code> The Map this custom layer was just added to. <code>id</code> <code>string</code> -"},{"location":"API/interfaces/StyleImageInterface/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/StyleImageInterface/#onremove","title":"onRemove()?","text":"<p><code>optional</code> onRemove: () =&gt; <code>void</code></p> <p>Defined in: src/style/style_image.ts:175</p> <p>Optional method called when the icon is removed from the map with Map.removeImage. This gives the image a chance to clean up resources and event listeners.</p>"},{"location":"API/interfaces/StyleImageInterface/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/StyleImageInterface/#render","title":"render()?","text":"<p><code>optional</code> render: () =&gt; <code>boolean</code></p> <p>Defined in: src/style/style_image.ts:164</p> <p>This method is called once before every frame where the icon will be used. The method can optionally update the image's <code>data</code> member with a new image.</p> <p>If the method updates the image it must return <code>true</code> to commit the change. If the method returns <code>false</code> or nothing the image is assumed to not have changed.</p> <p>If updates are infrequent it maybe easier to use Map.updateImage to update the image instead of implementing this method.</p>"},{"location":"API/interfaces/StyleImageInterface/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if this method updated the image. <code>false</code> if the image was not changed.</p>"},{"location":"API/interfaces/StyleLayer/","title":"StyleLayer","text":"<p>Defined in: src/style/style_layer.ts:81</p> <p>A base class for style layers</p>"},{"location":"API/interfaces/StyleLayer/#extends","title":"Extends","text":"<ul> <li><code>Evented</code></li> </ul>"},{"location":"API/interfaces/StyleLayer/#methods","title":"Methods","text":""},{"location":"API/interfaces/StyleLayer/#getlayoutaffectingglobalstaterefs","title":"getLayoutAffectingGlobalStateRefs()","text":"<p>getLayoutAffectingGlobalStateRefs(): <code>Set</code>&lt;<code>string</code>&gt;</p> <p>Defined in: src/style/style_layer.ts:179</p> <p>Get list of global state references that are used within layout or filter properties. This is used to determine if layer source need to be reloaded when global state property changes.</p>"},{"location":"API/interfaces/StyleLayer/#returns","title":"Returns","text":"<p><code>Set</code>&lt;<code>string</code>&gt;</p>"},{"location":"API/interfaces/StyleLayer/#getpaintaffectingglobalstaterefs","title":"getPaintAffectingGlobalStateRefs()","text":"<p>getPaintAffectingGlobalStateRefs(): <code>Map</code>&lt;<code>string</code>, <code>object</code>[]&gt;</p> <p>Defined in: src/style/style_layer.ts:204</p> <p>Get list of global state references that are used within paint properties. This is used to determine if layer needs to be repainted when global state property changes.</p>"},{"location":"API/interfaces/StyleLayer/#returns_1","title":"Returns","text":"<p><code>Map</code>&lt;<code>string</code>, <code>object</code>[]&gt;</p>"},{"location":"API/interfaces/StyleLayer/#listens","title":"listens()","text":"<p>listens(<code>type</code>: <code>string</code>): <code>boolean</code></p> <p>Defined in: src/util/evented.ts:165</p> <p>Returns a true if this instance of Evented or any forwardeed instances of Evented have a listener for the specified type.</p>"},{"location":"API/interfaces/StyleLayer/#parameters","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type"},{"location":"API/interfaces/StyleLayer/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p><code>true</code> if there is at least one registered listener for specified event type, <code>false</code> otherwise</p>"},{"location":"API/interfaces/StyleLayer/#inherited-from","title":"Inherited from","text":"<p><code>Evented</code>.<code>listens</code></p>"},{"location":"API/interfaces/StyleLayer/#off","title":"off()","text":"<p>off(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>StyleLayer</code></p> <p>Defined in: src/util/evented.ts:90</p> <p>Removes a previously registered event listener.</p>"},{"location":"API/interfaces/StyleLayer/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to remove listeners for. <code>listener</code> <code>Listener</code> The listener function to remove."},{"location":"API/interfaces/StyleLayer/#returns_3","title":"Returns","text":"<p><code>StyleLayer</code></p>"},{"location":"API/interfaces/StyleLayer/#inherited-from_1","title":"Inherited from","text":"<p><code>Evented</code>.<code>off</code></p>"},{"location":"API/interfaces/StyleLayer/#on","title":"on()","text":"<p>on(<code>type</code>: <code>string</code>, <code>listener</code>: <code>Listener</code>): <code>Subscription</code></p> <p>Defined in: src/util/evented.ts:73</p> <p>Adds a listener to a specified event type.</p>"},{"location":"API/interfaces/StyleLayer/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to add a listen for. <code>listener</code> <code>Listener</code> The function to be called when the event is fired. The listener function is called with the data object passed to <code>fire</code>, extended with <code>target</code> and <code>type</code> properties."},{"location":"API/interfaces/StyleLayer/#returns_4","title":"Returns","text":"<p><code>Subscription</code></p>"},{"location":"API/interfaces/StyleLayer/#inherited-from_2","title":"Inherited from","text":"<p><code>Evented</code>.<code>on</code></p>"},{"location":"API/interfaces/StyleLayer/#once","title":"once()","text":"<p>once(<code>type</code>: <code>string</code>, <code>listener?</code>: <code>Listener</code>): <code>Promise</code>&lt;<code>any</code>&gt; | <code>StyleLayer</code></p> <p>Defined in: src/util/evented.ts:106</p> <p>Adds a listener that will be called only once to a specified event type.</p> <p>The listener will be called first time the event fires after the listener is registered.</p>"},{"location":"API/interfaces/StyleLayer/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>type</code> <code>string</code> The event type to listen for. <code>listener?</code> <code>Listener</code> The function to be called when the event is fired the first time."},{"location":"API/interfaces/StyleLayer/#returns_5","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt; | <code>StyleLayer</code></p> <p><code>this</code> or a promise if a listener is not provided</p>"},{"location":"API/interfaces/StyleLayer/#inherited-from_3","title":"Inherited from","text":"<p><code>Evented</code>.<code>once</code></p>"},{"location":"API/interfaces/StyleLayer/#seteventedparent","title":"setEventedParent()","text":"<p>setEventedParent(<code>parent?</code>: <code>Evented</code>, <code>data?</code>: <code>any</code>): <code>StyleLayer</code></p> <p>Defined in: src/util/evented.ts:176</p> <p>Bubble all events fired by this instance of Evented to this parent instance of Evented.</p>"},{"location":"API/interfaces/StyleLayer/#parameters_4","title":"Parameters","text":"Parameter Type <code>parent?</code> <code>Evented</code> <code>data?</code> <code>any</code>"},{"location":"API/interfaces/StyleLayer/#returns_6","title":"Returns","text":"<p><code>StyleLayer</code></p>"},{"location":"API/interfaces/StyleLayer/#inherited-from_4","title":"Inherited from","text":"<p><code>Evented</code>.<code>setEventedParent</code></p>"},{"location":"API/interfaces/Subscription/","title":"Subscription","text":"<p>Defined in: src/util/util.ts:954</p> <p>Allows to unsubscribe from events without the need to store the method reference.</p>"},{"location":"API/interfaces/Subscription/#methods","title":"Methods","text":""},{"location":"API/interfaces/Subscription/#unsubscribe","title":"unsubscribe()","text":"<p>unsubscribe(): <code>void</code></p> <p>Defined in: src/util/util.ts:958</p> <p>Unsubscribes from the event.</p>"},{"location":"API/interfaces/Subscription/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/Tile/","title":"Tile","text":"<p>Defined in: src/source/tile.ts:68</p> <p>A tile object is the combination of a Coordinate, which defines its place, as well as a unique ID and data tracking for its content</p>"},{"location":"API/interfaces/Tile/#methods","title":"Methods","text":""},{"location":"API/interfaces/Tile/#loadvectordata","title":"loadVectorData()","text":"<p>loadVectorData(<code>data</code>: <code>WorkerTileResult</code>, <code>painter</code>: <code>any</code>, <code>justReloaded?</code>: <code>boolean</code>): <code>void</code></p> <p>Defined in: src/source/tile.ts:206</p> <p>Given a data object with a 'buffers' property, load it into this tile's elementGroups and buffers properties and set loaded to true. If the data is null, like in the case of an empty GeoJSON tile, no-op but still set loaded to true.</p>"},{"location":"API/interfaces/Tile/#parameters","title":"Parameters","text":"Parameter Type Description <code>data</code> <code>WorkerTileResult</code> The data from the worker <code>painter</code> <code>any</code> the painter <code>justReloaded?</code> <code>boolean</code> <code>true</code> to just reload"},{"location":"API/interfaces/Tile/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/Tile/#setselffadelogic","title":"setSelfFadeLogic()","text":"<p>setSelfFadeLogic(<code>fadeEndTime</code>: <code>number</code>): <code>void</code></p> <p>Defined in: src/source/tile.ts:171</p> <p>Self fading for edge tiles (when panning map)</p>"},{"location":"API/interfaces/Tile/#parameters_1","title":"Parameters","text":"Parameter Type <code>fadeEndTime</code> <code>number</code>"},{"location":"API/interfaces/Tile/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/interfaces/Tile/#unloadvectordata","title":"unloadVectorData()","text":"<p>unloadVectorData(): <code>void</code></p> <p>Defined in: src/source/tile.ts:280</p> <p>Release any data or WebGL resources referenced by this tile.</p>"},{"location":"API/interfaces/Tile/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/type-aliases/ActorMessage/","title":"ActorMessage&lt;T&gt;","text":"<p>ActorMessage&lt;<code>T</code>&gt; = <code>object</code></p> <p>Defined in: src/util/actor_messages.ts:164</p> <p>The message to be sent by the actor</p>"},{"location":"API/type-aliases/ActorMessage/#type-parameters","title":"Type Parameters","text":"Type Parameter <code>T</code> extends <code>MessageType</code>"},{"location":"API/type-aliases/AddLayerObject/","title":"AddLayerObject","text":"<p>AddLayerObject = <code>LayerSpecification</code> | <code>Omit</code>&lt;<code>LayerSpecification</code>, <code>\"source\"</code>&gt; &amp; <code>object</code> | <code>CustomLayerInterface</code></p> <p>Defined in: src/style/style.ts:200</p> <p>Specifies a layer to be added to a Style. In addition to a standard LayerSpecification or a CustomLayerInterface, a LayerSpecification with an embedded SourceSpecification can also be provided.</p>"},{"location":"API/type-aliases/AddProtocolAction/","title":"AddProtocolAction()","text":"<p>AddProtocolAction = (<code>requestParameters</code>: <code>RequestParameters</code>, <code>abortController</code>: <code>AbortController</code>) =&gt; <code>Promise</code>&lt;<code>GetResourceResponse</code>&lt;<code>any</code>&gt;&gt;</p> <p>Defined in: src/util/config.ts:8</p> <p>This method type is used to register a protocol handler. Use the abort controller for aborting requests. Return a promise with the relevant resource response.</p>"},{"location":"API/type-aliases/AddProtocolAction/#parameters","title":"Parameters","text":"Parameter Type <code>requestParameters</code> <code>RequestParameters</code> <code>abortController</code> <code>AbortController</code>"},{"location":"API/type-aliases/AddProtocolAction/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>GetResourceResponse</code>&lt;<code>any</code>&gt;&gt;</p>"},{"location":"API/type-aliases/Alignment/","title":"Alignment","text":"<p>Alignment = <code>\"map\"</code> | <code>\"viewport\"</code> | <code>\"auto\"</code></p> <p>Defined in: src/ui/marker.ts:18</p> <p>Alignment options of rotation and pitch</p>"},{"location":"API/type-aliases/AnimationOptions/","title":"AnimationOptions","text":"<p>AnimationOptions = <code>object</code></p> <p>Defined in: src/ui/camera.ts:206</p> <p>Options common to map movement methods that involve animation, such as Map.panBy and Map.easeTo, controlling the duration and easing function of the animation. All properties are optional.</p>"},{"location":"API/type-aliases/AnimationOptions/#properties","title":"Properties","text":""},{"location":"API/type-aliases/AnimationOptions/#animate","title":"animate?","text":"<p><code>optional</code> animate: <code>boolean</code></p> <p>Defined in: src/ui/camera.ts:223</p> <p>If <code>false</code>, no animation will occur.</p>"},{"location":"API/type-aliases/AnimationOptions/#duration","title":"duration?","text":"<p><code>optional</code> duration: <code>number</code></p> <p>Defined in: src/ui/camera.ts:210</p> <p>The animation's duration, measured in milliseconds.</p>"},{"location":"API/type-aliases/AnimationOptions/#easing","title":"easing()?","text":"<p><code>optional</code> easing: (<code>_</code>: <code>number</code>) =&gt; <code>number</code></p> <p>Defined in: src/ui/camera.ts:215</p> <p>A function taking a time in the range 0..1 and returning a number where 0 is the initial state and 1 is the final state.</p>"},{"location":"API/type-aliases/AnimationOptions/#parameters","title":"Parameters","text":"Parameter Type <code>_</code> <code>number</code>"},{"location":"API/type-aliases/AnimationOptions/#returns","title":"Returns","text":"<p><code>number</code></p>"},{"location":"API/type-aliases/AnimationOptions/#essential","title":"essential?","text":"<p><code>optional</code> essential: <code>boolean</code></p> <p>Defined in: src/ui/camera.ts:228</p> <p>If <code>true</code>, then the animation is considered essential and will not be affected by <code>prefers-reduced-motion</code>.</p>"},{"location":"API/type-aliases/AnimationOptions/#freezeelevation","title":"freezeElevation?","text":"<p><code>optional</code> freezeElevation: <code>boolean</code></p> <p>Defined in: src/ui/camera.ts:234</p> <p>Default false. Needed in 3D maps to let the camera stay in a constant height based on sea-level. After the animation finished the zoom-level will be recalculated in respect of the distance from the camera to the center-coordinate-altitude.</p>"},{"location":"API/type-aliases/AnimationOptions/#offset","title":"offset?","text":"<p><code>optional</code> offset: <code>PointLike</code></p> <p>Defined in: src/ui/camera.ts:219</p> <p>of the target center relative to real map container center at the end of animation.</p>"},{"location":"API/type-aliases/AroundCenterOptions/","title":"AroundCenterOptions","text":"<p>AroundCenterOptions = <code>object</code></p> <p>Defined in: src/ui/handler/two_fingers_touch.ts:9</p> <p>An options object sent to the enable function of some of the handlers</p>"},{"location":"API/type-aliases/AroundCenterOptions/#properties","title":"Properties","text":""},{"location":"API/type-aliases/AroundCenterOptions/#around","title":"around","text":"<p>around: <code>\"center\"</code></p> <p>Defined in: src/ui/handler/two_fingers_touch.ts:13</p> <p>If \"center\" is passed, map will zoom around the center of map</p>"},{"location":"API/type-aliases/AttributionControlOptions/","title":"AttributionControlOptions","text":"<p>AttributionControlOptions = <code>object</code></p> <p>Defined in: src/ui/control/attribution_control.ts:10</p> <p>The AttributionControl options object</p>"},{"location":"API/type-aliases/AttributionControlOptions/#properties","title":"Properties","text":""},{"location":"API/type-aliases/AttributionControlOptions/#compact","title":"compact?","text":"<p><code>optional</code> compact: <code>boolean</code></p> <p>Defined in: src/ui/control/attribution_control.ts:16</p> <p>If <code>true</code>, the attribution control will always collapse when moving the map. If <code>false</code>, force the expanded attribution control. The default is a responsive attribution that collapses when the user moves the map on maps less than 640 pixels wide. Attribution should not be collapsed if it can comfortably fit on the map. <code>compact</code> should only be used to modify default attribution when map size makes it impossible to fit default attribution and when the automatic compact resizing for default settings are not sufficient.</p>"},{"location":"API/type-aliases/AttributionControlOptions/#customattribution","title":"customAttribution?","text":"<p><code>optional</code> customAttribution: <code>string</code> | <code>string</code>[]</p> <p>Defined in: src/ui/control/attribution_control.ts:20</p> <p>Attributions to show in addition to any other attributions.</p>"},{"location":"API/type-aliases/CalculateTileZoomFunction/","title":"CalculateTileZoomFunction()","text":"<p>CalculateTileZoomFunction = (<code>requestedCenterZoom</code>: <code>number</code>, <code>distanceToTile2D</code>: <code>number</code>, <code>distanceToTileZ</code>: <code>number</code>, <code>distanceToCenter3D</code>: <code>number</code>, <code>cameraVerticalFOV</code>: <code>number</code>) =&gt; <code>number</code></p> <p>Defined in: src/geo/projection/covering_tiles.ts:72</p> <p>Function to define how tiles are loaded at high pitch angles</p>"},{"location":"API/type-aliases/CalculateTileZoomFunction/#parameters","title":"Parameters","text":"Parameter Type Description <code>requestedCenterZoom</code> <code>number</code> the requested zoom level, valid at the center point. <code>distanceToTile2D</code> <code>number</code> 2D distance from the camera to the candidate tile, in mercator units. <code>distanceToTileZ</code> <code>number</code> vertical distance from the camera to the candidate tile, in mercator units. <code>distanceToCenter3D</code> <code>number</code> distance from camera to center point, in mercator units <code>cameraVerticalFOV</code> <code>number</code> camera vertical field of view, in degrees"},{"location":"API/type-aliases/CalculateTileZoomFunction/#returns","title":"Returns","text":"<p><code>number</code></p> <p>the desired zoom level for this tile. May not be an integer.</p>"},{"location":"API/type-aliases/CameraForBoundsOptions/","title":"CameraForBoundsOptions","text":"<p>CameraForBoundsOptions = <code>CameraOptions</code> &amp; <code>object</code></p> <p>Defined in: src/ui/camera.ts:105</p> <p>A options object for the Map.cameraForBounds method</p>"},{"location":"API/type-aliases/CameraForBoundsOptions/#type-declaration","title":"Type Declaration","text":""},{"location":"API/type-aliases/CameraForBoundsOptions/#maxzoom","title":"maxZoom?","text":"<p><code>optional</code> maxZoom: <code>number</code></p> <p>The maximum zoom level to allow when the camera would transition to the specified bounds.</p>"},{"location":"API/type-aliases/CameraForBoundsOptions/#offset","title":"offset?","text":"<p><code>optional</code> offset: <code>PointLike</code></p> <p>The center of the given bounds relative to the map's center, measured in pixels.</p>"},{"location":"API/type-aliases/CameraForBoundsOptions/#default-value","title":"Default Value","text":"<pre><code>[0, 0]\n</code></pre>"},{"location":"API/type-aliases/CameraForBoundsOptions/#padding","title":"padding?","text":"<p><code>optional</code> padding: <code>number</code> | <code>PaddingOptions</code></p> <p>The amount of padding in pixels to add to the given bounds.</p>"},{"location":"API/type-aliases/CameraOptions/","title":"CameraOptions","text":"<p>CameraOptions = <code>CenterZoomBearing</code> &amp; <code>object</code></p> <p>Defined in: src/ui/camera.ts:55</p> <p>Options common to Map.jumpTo, Map.easeTo, and Map.flyTo, controlling the desired location, zoom, bearing, pitch, and roll of the camera. All properties are optional, and when a property is omitted, the current camera value for that property will remain unchanged.</p>"},{"location":"API/type-aliases/CameraOptions/#type-declaration","title":"Type Declaration","text":""},{"location":"API/type-aliases/CameraOptions/#elevation","title":"elevation?","text":"<p><code>optional</code> elevation: <code>number</code></p> <p>The elevation of the center point in meters above sea level.</p>"},{"location":"API/type-aliases/CameraOptions/#pitch","title":"pitch?","text":"<p><code>optional</code> pitch: <code>number</code></p> <p>The desired pitch in degrees. The pitch is the angle towards the horizon measured in degrees with a range between 0 and 60 degrees. For example, pitch: 0 provides the appearance of looking straight down at the map, while pitch: 60 tilts the user's perspective towards the horizon. Increasing the pitch value is often used to display 3D objects.</p>"},{"location":"API/type-aliases/CameraOptions/#roll","title":"roll?","text":"<p><code>optional</code> roll: <code>number</code></p> <p>The desired roll in degrees. The roll is the angle about the camera boresight.</p>"},{"location":"API/type-aliases/CameraOptions/#example","title":"Example","text":"<p>Set the map's initial perspective with CameraOptions <pre><code>let map = new Map({\n  container: 'map',\n  style: 'https://demotiles.maplibre.org/style.json',\n  center: [-73.5804, 45.53483],\n  pitch: 60,\n  bearing: -60,\n  zoom: 10\n});\n</code></pre></p>"},{"location":"API/type-aliases/CameraOptions/#see","title":"See","text":"<ul> <li>Set pitch and bearing</li> <li>Jump to a series of locations</li> <li>Fly to a location</li> <li>Display buildings in 3D</li> </ul>"},{"location":"API/type-aliases/CameraUpdateTransformFunction/","title":"CameraUpdateTransformFunction()","text":"<p>CameraUpdateTransformFunction = (<code>next</code>: <code>object</code>) =&gt; <code>object</code></p> <p>Defined in: src/ui/camera.ts:240</p> <p>A callback hook that allows manipulating the camera and being notified about camera updates before they happen</p>"},{"location":"API/type-aliases/CameraUpdateTransformFunction/#parameters","title":"Parameters","text":"Parameter Type <code>next</code> { <code>bearing</code>: <code>number</code>; <code>center</code>: <code>LngLat</code>; <code>elevation</code>: <code>number</code>; <code>pitch</code>: <code>number</code>; <code>roll</code>: <code>number</code>; <code>zoom</code>: <code>number</code>; } <code>next.bearing</code> <code>number</code> <code>next.center</code> <code>LngLat</code> <code>next.elevation</code> <code>number</code> <code>next.pitch</code> <code>number</code> <code>next.roll</code> <code>number</code> <code>next.zoom</code> <code>number</code>"},{"location":"API/type-aliases/CameraUpdateTransformFunction/#returns","title":"Returns","text":"<p><code>object</code></p>"},{"location":"API/type-aliases/CameraUpdateTransformFunction/#bearing","title":"bearing?","text":"<p><code>optional</code> bearing: <code>number</code></p>"},{"location":"API/type-aliases/CameraUpdateTransformFunction/#center","title":"center?","text":"<p><code>optional</code> center: <code>LngLat</code></p>"},{"location":"API/type-aliases/CameraUpdateTransformFunction/#elevation","title":"elevation?","text":"<p><code>optional</code> elevation: <code>number</code></p>"},{"location":"API/type-aliases/CameraUpdateTransformFunction/#pitch","title":"pitch?","text":"<p><code>optional</code> pitch: <code>number</code></p>"},{"location":"API/type-aliases/CameraUpdateTransformFunction/#roll","title":"roll?","text":"<p><code>optional</code> roll: <code>number</code></p>"},{"location":"API/type-aliases/CameraUpdateTransformFunction/#zoom","title":"zoom?","text":"<p><code>optional</code> zoom: <code>number</code></p>"},{"location":"API/type-aliases/CanvasSourceSpecification/","title":"CanvasSourceSpecification","text":"<p>CanvasSourceSpecification = <code>object</code></p> <p>Defined in: src/source/canvas_source.ts:14</p> <p>Options to add a canvas source type to the map.</p>"},{"location":"API/type-aliases/CanvasSourceSpecification/#properties","title":"Properties","text":""},{"location":"API/type-aliases/CanvasSourceSpecification/#animate","title":"animate?","text":"<p><code>optional</code> animate: <code>boolean</code></p> <p>Defined in: src/source/canvas_source.ts:27</p> <p>Whether the canvas source is animated. If the canvas is static (i.e. pixels do not need to be re-read on every frame), <code>animate</code> should be set to <code>false</code> to improve performance.</p>"},{"location":"API/type-aliases/CanvasSourceSpecification/#default-value","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/CanvasSourceSpecification/#canvas","title":"canvas?","text":"<p><code>optional</code> canvas: <code>string</code> | <code>HTMLCanvasElement</code></p> <p>Defined in: src/source/canvas_source.ts:31</p> <p>Canvas source from which to read pixels. Can be a string representing the ID of the canvas element, or the <code>HTMLCanvasElement</code> itself.</p>"},{"location":"API/type-aliases/CanvasSourceSpecification/#coordinates","title":"coordinates","text":"<p>coordinates: [[<code>number</code>, <code>number</code>], [<code>number</code>, <code>number</code>], [<code>number</code>, <code>number</code>], [<code>number</code>, <code>number</code>]]</p> <p>Defined in: src/source/canvas_source.ts:22</p> <p>Four geographical coordinates denoting where to place the corners of the canvas, specified in <code>[longitude, latitude]</code> pairs.</p>"},{"location":"API/type-aliases/CanvasSourceSpecification/#type","title":"type","text":"<p>type: <code>\"canvas\"</code></p> <p>Defined in: src/source/canvas_source.ts:18</p> <p>Source type. Must be <code>\"canvas\"</code>.</p>"},{"location":"API/type-aliases/CenterZoomBearing/","title":"CenterZoomBearing","text":"<p>CenterZoomBearing = <code>object</code></p> <p>Defined in: src/ui/camera.ts:76</p> <p>Holds center, zoom and bearing properties</p>"},{"location":"API/type-aliases/CenterZoomBearing/#properties","title":"Properties","text":""},{"location":"API/type-aliases/CenterZoomBearing/#bearing","title":"bearing?","text":"<p><code>optional</code> bearing: <code>number</code></p> <p>Defined in: src/ui/camera.ts:89</p> <p>The desired bearing in degrees. The bearing is the compass direction that is \"up\". For example, <code>bearing: 90</code> orients the map so that east is up.</p>"},{"location":"API/type-aliases/CenterZoomBearing/#center","title":"center?","text":"<p><code>optional</code> center: <code>LngLatLike</code></p> <p>Defined in: src/ui/camera.ts:80</p> <p>The desired center.</p>"},{"location":"API/type-aliases/CenterZoomBearing/#zoom","title":"zoom?","text":"<p><code>optional</code> zoom: <code>number</code></p> <p>Defined in: src/ui/camera.ts:84</p> <p>The desired mercator zoom level.</p>"},{"location":"API/type-aliases/Complete/","title":"Complete&lt;T&gt;","text":"<p>Complete&lt;<code>T</code>&gt; = { [P in keyof Required&lt;T&gt;]: Pick&lt;T, P&gt; extends Required&lt;Pick&lt;T, P&gt;&gt; ? T[P] : T[P] | undefined }</p> <p>Defined in: src/util/util.ts:1080</p> <p>Makes optional keys required and add the the undefined type.</p> <pre><code>interface Test {\n foo: number;\n bar?: number;\n baz: number | undefined;\n}\n\nComplete&lt;Test&gt; {\n foo: number;\n bar: number | undefined;\n baz: number | undefined;\n}\n</code></pre> <p>See https://medium.com/terria/typescript-transforming-optional-properties-to-required-properties-that-may-be-undefined-7482cb4e1585</p>"},{"location":"API/type-aliases/Complete/#type-parameters","title":"Type Parameters","text":"Type Parameter <code>T</code>"},{"location":"API/type-aliases/ControlPosition/","title":"ControlPosition","text":"<p>ControlPosition = <code>\"top-left\"</code> | <code>\"top-right\"</code> | <code>\"bottom-left\"</code> | <code>\"bottom-right\"</code></p> <p>Defined in: src/ui/control/control.ts:7</p> <p>A position defintion for the control to be placed, can be in one of the corners of the map. When two or more controls are places in the same location they are stacked toward the center of the map.</p>"},{"location":"API/type-aliases/Coordinates/","title":"Coordinates","text":"<p>Coordinates = [[<code>number</code>, <code>number</code>], [<code>number</code>, <code>number</code>], [<code>number</code>, <code>number</code>], [<code>number</code>, <code>number</code>]]</p> <p>Defined in: src/source/image_source.ts:27</p> <p>Four geographical coordinates, represented as arrays of longitude and latitude numbers, which define the corners of the image. The coordinates start at the top left corner of the image and proceed in clockwise order. They do not have to represent a rectangle.</p>"},{"location":"API/type-aliases/CreateTileMeshOptions/","title":"CreateTileMeshOptions","text":"<p>CreateTileMeshOptions = <code>object</code></p> <p>Defined in: src/util/create_tile_mesh.ts:22</p> <p>Options for generating a tile mesh. Can optionally configure any of the following: - mesh subdivision granularity - border presence - special geometry for the north and/or south pole</p>"},{"location":"API/type-aliases/CreateTileMeshOptions/#properties","title":"Properties","text":""},{"location":"API/type-aliases/CreateTileMeshOptions/#extendtonorthpole","title":"extendToNorthPole?","text":"<p><code>optional</code> extendToNorthPole: <code>boolean</code></p> <p>Defined in: src/util/create_tile_mesh.ts:36</p> <p>When true, additional geometry is generated along the north edge of the mesh, connecting it to the pole special vertex position. This geometry replaces the mesh border along this edge, if one is present.</p>"},{"location":"API/type-aliases/CreateTileMeshOptions/#extendtosouthpole","title":"extendToSouthPole?","text":"<p><code>optional</code> extendToSouthPole: <code>boolean</code></p> <p>Defined in: src/util/create_tile_mesh.ts:41</p> <p>When true, additional geometry is generated along the south edge of the mesh, connecting it to the pole special vertex position. This geometry replaces the mesh border along this edge, if one is present.</p>"},{"location":"API/type-aliases/CreateTileMeshOptions/#generateborders","title":"generateBorders?","text":"<p><code>optional</code> generateBorders: <code>boolean</code></p> <p>Defined in: src/util/create_tile_mesh.ts:31</p> <p>When true, an additional ring of quads is generated along the border, always extending <code>EXTENT_STENCIL_BORDER</code> units away from the main mesh.</p>"},{"location":"API/type-aliases/CreateTileMeshOptions/#granularity","title":"granularity?","text":"<p><code>optional</code> granularity: <code>number</code></p> <p>Defined in: src/util/create_tile_mesh.ts:27</p> <p>Specifies how much should the tile mesh be subdivided. A value of 1 leads to a simple quad, a value of 4 will result in a grid of 4x4 quads.</p>"},{"location":"API/type-aliases/CustomRenderMethod/","title":"CustomRenderMethod()","text":"<p>CustomRenderMethod = (<code>gl</code>: <code>WebGLRenderingContext</code> | <code>WebGL2RenderingContext</code>, <code>options</code>: <code>CustomRenderMethodInput</code>) =&gt; <code>void</code></p> <p>Defined in: src/style/style_layer/custom_style_layer.ts:114</p>"},{"location":"API/type-aliases/CustomRenderMethod/#parameters","title":"Parameters","text":"Parameter Type Description <code>gl</code> <code>WebGLRenderingContext</code> | <code>WebGL2RenderingContext</code> The map's gl context. <code>options</code> <code>CustomRenderMethodInput</code> Argument object with render inputs like camera properties."},{"location":"API/type-aliases/CustomRenderMethod/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"API/type-aliases/CustomRenderMethodInput/","title":"CustomRenderMethodInput","text":"<p>CustomRenderMethodInput = <code>object</code></p> <p>Defined in: src/style/style_layer/custom_style_layer.ts:10</p> <p>Input arguments exposed by custom render function.</p>"},{"location":"API/type-aliases/CustomRenderMethodInput/#properties","title":"Properties","text":""},{"location":"API/type-aliases/CustomRenderMethodInput/#defaultprojectiondata","title":"defaultProjectionData","text":"<p>defaultProjectionData: <code>ProjectionData</code></p> <p>Defined in: src/style/style_layer/custom_style_layer.ts:107</p> <p>Uniforms that should be passed to the vertex shader, if MapLibre's projection code is used. For more details of this object's internals, see its doc comments in <code>src/geo/projection/projection_data.ts</code>.</p> <p>These uniforms are set so that <code>projectTile</code> in shader accepts a vec2 in range 0..1 in web mercator coordinates. Use <code>map.transform.getProjectionData({overscaledTileID: tileID})</code> to get uniforms for a given tile and pass vec2 in tile-local range 0..EXTENT instead.</p> <p>For projection 3D features, use <code>projectTileFor3D</code> in the shader.</p> <p>If you just need a projection matrix, use <code>defaultProjectionData.projectionMatrix</code>. A projection matrix is sufficient for simple custom layers that also only support mercator projection.</p> <p>Under mercator projection, when these uniforms are used, the shader's <code>projectTile</code> function projects spherical mercator coordinates to gl clip space coordinates. The spherical mercator coordinate <code>[0, 0]</code> represents the top left corner of the mercator world and <code>[1, 1]</code> represents the bottom right corner. When the <code>renderingMode</code> is <code>\"3d\"</code>, the z coordinate is conformal. A box with identical x, y, and z lengths in mercator units would be rendered as a cube. MercatorCoordinate.fromLngLat can be used to project a <code>LngLat</code> to a mercator coordinate.</p> <p>Under globe projection, when these uniforms are used, the <code>elevation</code> parameter passed to <code>projectTileFor3D</code> in the shader is elevation in meters above \"sea level\", or more accurately for globe, elevation above the surface of the perfect sphere used to render the planet.</p>"},{"location":"API/type-aliases/CustomRenderMethodInput/#farz","title":"farZ","text":"<p>farZ: <code>number</code></p> <p>Defined in: src/style/style_layer/custom_style_layer.ts:16</p> <p>This value represents the distance from the camera to the far clipping plane. It is used in the calculation of the projection matrix to determine which objects are visible. farZ should be larger than nearZ.</p>"},{"location":"API/type-aliases/CustomRenderMethodInput/#fov","title":"fov","text":"<p>fov: <code>number</code></p> <p>Defined in: src/style/style_layer/custom_style_layer.ts:26</p> <p>Vertical field of view in radians.</p>"},{"location":"API/type-aliases/CustomRenderMethodInput/#modelviewprojectionmatrix","title":"modelViewProjectionMatrix","text":"<p>modelViewProjectionMatrix: <code>mat4</code></p> <p>Defined in: src/style/style_layer/custom_style_layer.ts:32</p> <p>model view projection matrix represents the matrix converting from world space to clip space https://learnopengl.com/Getting-started/Coordinate-Systems *</p>"},{"location":"API/type-aliases/CustomRenderMethodInput/#nearz","title":"nearZ","text":"<p>nearZ: <code>number</code></p> <p>Defined in: src/style/style_layer/custom_style_layer.ts:22</p> <p>This value represents the distance from the camera to the near clipping plane. It is used in the calculation of the projection matrix to determine which objects are visible. nearZ should be smaller than farZ.</p>"},{"location":"API/type-aliases/CustomRenderMethodInput/#projectionmatrix","title":"projectionMatrix","text":"<p>projectionMatrix: <code>mat4</code></p> <p>Defined in: src/style/style_layer/custom_style_layer.ts:38</p> <p>projection matrix represents the matrix converting from view space to clip space https://learnopengl.com/Getting-started/Coordinate-Systems</p>"},{"location":"API/type-aliases/CustomRenderMethodInput/#shaderdata","title":"shaderData","text":"<p>shaderData: <code>object</code></p> <p>Defined in: src/style/style_layer/custom_style_layer.ts:42</p> <p>Data required for picking and compiling a custom shader for the current projection.</p>"},{"location":"API/type-aliases/CustomRenderMethodInput/#define","title":"define","text":"<p>define: <code>string</code></p> <p>Defines to add to the shader code. Depends on current projection.</p>"},{"location":"API/type-aliases/CustomRenderMethodInput/#example","title":"Example","text":"<pre><code>const vertexSource = `#version 300 es\n${shaderData.vertexShaderPrelude}\n${shaderData.define}\nin vec2 a_pos;\nvoid main() {\n    gl_Position = projectTile(a_pos);\n    #ifdef GLOBE\n    // Do globe-specific things\n    #endif\n}`;\n</code></pre>"},{"location":"API/type-aliases/CustomRenderMethodInput/#variantname","title":"variantName","text":"<p>variantName: <code>string</code></p> <p>Name of the shader variant that should be used. Depends on current projection. Whenever the other shader properties change, this string changes as well, and can be used as a key with which to cache compiled shaders.</p>"},{"location":"API/type-aliases/CustomRenderMethodInput/#vertexshaderprelude","title":"vertexShaderPrelude","text":"<p>vertexShaderPrelude: <code>string</code></p> <p>The prelude code to add to the vertex shader to access MapLibre's <code>projectTile</code> projection function. Depends on current projection.</p>"},{"location":"API/type-aliases/CustomRenderMethodInput/#example_1","title":"Example","text":"<pre><code>const vertexSource = `#version 300 es\n${shaderData.vertexShaderPrelude}\n${shaderData.define}\nin vec2 a_pos;\nvoid main() {\n    gl_Position = projectTile(a_pos);\n}`;\n</code></pre>"},{"location":"API/type-aliases/DashEntry/","title":"DashEntry","text":"<p>DashEntry = <code>object</code></p> <p>Defined in: src/render/line_atlas.ts:8</p> <p>A dash entry</p>"},{"location":"API/type-aliases/DistributiveKeys/","title":"DistributiveKeys&lt;T&gt;","text":"<p>DistributiveKeys&lt;<code>T</code>&gt; = <code>T</code> extends <code>T</code> ? keyof <code>T</code> : <code>never</code></p> <p>Defined in: src/util/vectortile_to_geojson.ts:7</p> <p>A helper for type to omit a property from a type</p>"},{"location":"API/type-aliases/DistributiveKeys/#type-parameters","title":"Type Parameters","text":"Type Parameter <code>T</code>"},{"location":"API/type-aliases/DistributiveOmit/","title":"DistributiveOmit&lt;T, K&gt;","text":"<p>DistributiveOmit&lt;<code>T</code>, <code>K</code>&gt; = <code>T</code> extends <code>unknown</code> ? <code>Omit</code>&lt;<code>T</code>, <code>K</code>&gt; : <code>never</code></p> <p>Defined in: src/util/vectortile_to_geojson.ts:11</p> <p>A helper for type to omit a property from a type</p>"},{"location":"API/type-aliases/DistributiveOmit/#type-parameters","title":"Type Parameters","text":"Type Parameter <code>T</code> <code>K</code> extends <code>DistributiveKeys</code>&lt;<code>T</code>&gt;"},{"location":"API/type-aliases/DragPanOptions/","title":"DragPanOptions","text":"<p>DragPanOptions = <code>object</code></p> <p>Defined in: src/ui/handler/shim/drag_pan.ts:7</p> <p>A DragPanHandler options object</p>"},{"location":"API/type-aliases/DragPanOptions/#properties","title":"Properties","text":""},{"location":"API/type-aliases/DragPanOptions/#deceleration","title":"deceleration?","text":"<p><code>optional</code> deceleration: <code>number</code></p> <p>Defined in: src/ui/handler/shim/drag_pan.ts:23</p> <p>the maximum value of the drag velocity.</p>"},{"location":"API/type-aliases/DragPanOptions/#default-value","title":"Default Value","text":"<pre><code>1400\n</code></pre>"},{"location":"API/type-aliases/DragPanOptions/#easing","title":"easing()?","text":"<p><code>optional</code> easing: (<code>t</code>: <code>number</code>) =&gt; <code>number</code></p> <p>Defined in: src/ui/handler/shim/drag_pan.ts:18</p> <p>easing function applied to <code>map.panTo</code> when applying the drag.</p>"},{"location":"API/type-aliases/DragPanOptions/#parameters","title":"Parameters","text":"Parameter Type Description <code>t</code> <code>number</code> the easing function"},{"location":"API/type-aliases/DragPanOptions/#returns","title":"Returns","text":"<p><code>number</code></p>"},{"location":"API/type-aliases/DragPanOptions/#default-value_1","title":"Default Value","text":"<pre><code>bezier(0, 0, 0.3, 1)\n</code></pre>"},{"location":"API/type-aliases/DragPanOptions/#linearity","title":"linearity?","text":"<p><code>optional</code> linearity: <code>number</code></p> <p>Defined in: src/ui/handler/shim/drag_pan.ts:12</p> <p>factor used to scale the drag velocity</p>"},{"location":"API/type-aliases/DragPanOptions/#default-value_2","title":"Default Value","text":"<pre><code>0\n</code></pre>"},{"location":"API/type-aliases/DragPanOptions/#maxspeed","title":"maxSpeed?","text":"<p><code>optional</code> maxSpeed: <code>number</code></p> <p>Defined in: src/ui/handler/shim/drag_pan.ts:28</p> <p>the rate at which the speed reduces after the pan ends.</p>"},{"location":"API/type-aliases/DragPanOptions/#default-value_3","title":"Default Value","text":"<pre><code>2500\n</code></pre>"},{"location":"API/type-aliases/EaseToOptions/","title":"EaseToOptions","text":"<p>EaseToOptions = <code>AnimationOptions</code> &amp; <code>CameraOptions</code> &amp; <code>object</code></p> <p>Defined in: src/ui/camera.ts:168</p> <p>The Map.easeTo options object</p>"},{"location":"API/type-aliases/EaseToOptions/#type-declaration","title":"Type Declaration","text":""},{"location":"API/type-aliases/EaseToOptions/#around","title":"around?","text":"<p><code>optional</code> around: <code>LngLatLike</code></p> <p>If <code>zoom</code> is specified, <code>around</code> determines the point around which the zoom is centered.</p>"},{"location":"API/type-aliases/EaseToOptions/#delayendevents","title":"delayEndEvents?","text":"<p><code>optional</code> delayEndEvents: <code>number</code></p>"},{"location":"API/type-aliases/EaseToOptions/#easeid","title":"easeId?","text":"<p><code>optional</code> easeId: <code>string</code></p>"},{"location":"API/type-aliases/EaseToOptions/#nomovestart","title":"noMoveStart?","text":"<p><code>optional</code> noMoveStart: <code>boolean</code></p>"},{"location":"API/type-aliases/EaseToOptions/#padding","title":"padding?","text":"<p><code>optional</code> padding: <code>number</code> | <code>PaddingOptions</code></p>"},{"location":"API/type-aliases/ExpiryData/","title":"ExpiryData","text":"<p>ExpiryData = <code>object</code></p> <p>Defined in: src/util/ajax.ts:14</p> <p>A type used to store the tile's expiration date and cache control definition</p>"},{"location":"API/type-aliases/FeatureIdentifier/","title":"FeatureIdentifier","text":"<p>FeatureIdentifier = <code>object</code></p> <p>Defined in: src/style/style.ts:80</p> <p>A feature identifier that is bound to a source</p>"},{"location":"API/type-aliases/FeatureIdentifier/#properties","title":"Properties","text":""},{"location":"API/type-aliases/FeatureIdentifier/#id","title":"id?","text":"<p><code>optional</code> id: <code>string</code> | <code>number</code></p> <p>Defined in: src/style/style.ts:84</p> <p>Unique id of the feature.</p>"},{"location":"API/type-aliases/FeatureIdentifier/#source","title":"source","text":"<p>source: <code>string</code></p> <p>Defined in: src/style/style.ts:88</p> <p>The id of the vector or GeoJSON source for the feature.</p>"},{"location":"API/type-aliases/FeatureIdentifier/#sourcelayer","title":"sourceLayer?","text":"<p><code>optional</code> sourceLayer: <code>string</code></p> <p>Defined in: src/style/style.ts:92</p> <p>For vector tile sources, <code>sourceLayer</code> is required.</p>"},{"location":"API/type-aliases/FitBoundsOptions/","title":"FitBoundsOptions","text":"<p>FitBoundsOptions = <code>FlyToOptions</code> &amp; <code>object</code></p> <p>Defined in: src/ui/camera.ts:182</p> <p>Options for Map.fitBounds method</p>"},{"location":"API/type-aliases/FitBoundsOptions/#type-declaration","title":"Type Declaration","text":""},{"location":"API/type-aliases/FitBoundsOptions/#linear","title":"linear?","text":"<p><code>optional</code> linear: <code>boolean</code></p> <p>If <code>true</code>, the map transitions using Map.easeTo. If <code>false</code>, the map transitions using Map.flyTo. See those functions and AnimationOptions for information about options available.</p>"},{"location":"API/type-aliases/FitBoundsOptions/#default-value","title":"Default Value","text":"<pre><code>false\n</code></pre>"},{"location":"API/type-aliases/FitBoundsOptions/#maxzoom","title":"maxZoom?","text":"<p><code>optional</code> maxZoom: <code>number</code></p> <p>The maximum zoom level to allow when the map view transitions to the specified bounds.</p>"},{"location":"API/type-aliases/FitBoundsOptions/#offset","title":"offset?","text":"<p><code>optional</code> offset: <code>PointLike</code></p> <p>The center of the given bounds relative to the map's center, measured in pixels.</p>"},{"location":"API/type-aliases/FitBoundsOptions/#default-value_1","title":"Default Value","text":"<pre><code>[0, 0]\n</code></pre>"},{"location":"API/type-aliases/FlyToOptions/","title":"FlyToOptions","text":"<p>FlyToOptions = <code>AnimationOptions</code> &amp; <code>CameraOptions</code> &amp; <code>object</code></p> <p>Defined in: src/ui/camera.ts:124</p> <p>The Map.flyTo options object</p>"},{"location":"API/type-aliases/FlyToOptions/#type-declaration","title":"Type Declaration","text":""},{"location":"API/type-aliases/FlyToOptions/#curve","title":"curve?","text":"<p><code>optional</code> curve: <code>number</code></p> <p>The zooming \"curve\" that will occur along the flight path. A high value maximizes zooming for an exaggerated animation, while a low value minimizes zooming for an effect closer to Map.easeTo. 1.42 is the average value selected by participants in the user study discussed in van Wijk (2003). A value of <code>Math.pow(6, 0.25)</code> would be equivalent to the root mean squared average velocity. A value of 1 would produce a circular motion.</p>"},{"location":"API/type-aliases/FlyToOptions/#default-value","title":"Default Value","text":"<pre><code>1.42\n</code></pre>"},{"location":"API/type-aliases/FlyToOptions/#maxduration","title":"maxDuration?","text":"<p><code>optional</code> maxDuration: <code>number</code></p> <p>The animation's maximum duration, measured in milliseconds. If duration exceeds maximum duration, it resets to 0.</p>"},{"location":"API/type-aliases/FlyToOptions/#minzoom","title":"minZoom?","text":"<p><code>optional</code> minZoom: <code>number</code></p> <p>The zero-based zoom level at the peak of the flight path. If <code>options.curve</code> is specified, this option is ignored.</p>"},{"location":"API/type-aliases/FlyToOptions/#padding","title":"padding?","text":"<p><code>optional</code> padding: <code>number</code> | <code>PaddingOptions</code></p> <p>The amount of padding in pixels to add to the given bounds.</p>"},{"location":"API/type-aliases/FlyToOptions/#screenspeed","title":"screenSpeed?","text":"<p><code>optional</code> screenSpeed: <code>number</code></p> <p>The average speed of the animation measured in screenfulls per second, assuming a linear timing curve. If <code>options.speed</code> is specified, this option is ignored.</p>"},{"location":"API/type-aliases/FlyToOptions/#speed","title":"speed?","text":"<p><code>optional</code> speed: <code>number</code></p> <p>The average speed of the animation defined in relation to <code>options.curve</code>. A speed of 1.2 means that the map appears to move along the flight path by 1.2 times <code>options.curve</code> screenfulls every second. A screenfull is the map's visible span. It does not correspond to a fixed physical distance, but varies by zoom level.</p>"},{"location":"API/type-aliases/FlyToOptions/#default-value_1","title":"Default Value","text":"<pre><code>1.2\n</code></pre>"},{"location":"API/type-aliases/FullscreenControlOptions/","title":"FullscreenControlOptions","text":"<p>FullscreenControlOptions = <code>object</code></p> <p>Defined in: src/ui/control/fullscreen_control.ts:12</p> <p>The FullscreenControl options object</p>"},{"location":"API/type-aliases/FullscreenControlOptions/#properties","title":"Properties","text":""},{"location":"API/type-aliases/FullscreenControlOptions/#container","title":"container?","text":"<p><code>optional</code> container: <code>HTMLElement</code></p> <p>Defined in: src/ui/control/fullscreen_control.ts:16</p> <p><code>container</code> is the compatible DOM element which should be made full screen. By default, the map container element will be made full screen.</p>"},{"location":"API/type-aliases/GeoJSONFeatureDiff/","title":"GeoJSONFeatureDiff","text":"<p>GeoJSONFeatureDiff = <code>object</code></p> <p>Defined in: src/source/geojson_source_diff.ts:31</p> <p>A geojson feature diff object</p>"},{"location":"API/type-aliases/GeoJSONFeatureDiff/#properties","title":"Properties","text":""},{"location":"API/type-aliases/GeoJSONFeatureDiff/#addorupdateproperties","title":"addOrUpdateProperties?","text":"<p><code>optional</code> addOrUpdateProperties: <code>object</code>[]</p> <p>Defined in: src/source/geojson_source_diff.ts:51</p> <p>The properties to add or update along side their values</p>"},{"location":"API/type-aliases/GeoJSONFeatureDiff/#key","title":"key","text":"<p>key: <code>string</code></p>"},{"location":"API/type-aliases/GeoJSONFeatureDiff/#value","title":"value","text":"<p>value: <code>any</code></p>"},{"location":"API/type-aliases/GeoJSONFeatureDiff/#id","title":"id","text":"<p>id: <code>GeoJSONFeatureId</code></p> <p>Defined in: src/source/geojson_source_diff.ts:35</p> <p>The feature ID</p>"},{"location":"API/type-aliases/GeoJSONFeatureDiff/#newgeometry","title":"newGeometry?","text":"<p><code>optional</code> newGeometry: <code>GeoJSON.Geometry</code></p> <p>Defined in: src/source/geojson_source_diff.ts:39</p> <p>If it's a new geometry, place it here</p>"},{"location":"API/type-aliases/GeoJSONFeatureDiff/#removeallproperties","title":"removeAllProperties?","text":"<p><code>optional</code> removeAllProperties: <code>boolean</code></p> <p>Defined in: src/source/geojson_source_diff.ts:43</p> <p>Setting to <code>true</code> will remove all preperties</p>"},{"location":"API/type-aliases/GeoJSONFeatureDiff/#removeproperties","title":"removeProperties?","text":"<p><code>optional</code> removeProperties: <code>string</code>[]</p> <p>Defined in: src/source/geojson_source_diff.ts:47</p> <p>The properties keys to remove</p>"},{"location":"API/type-aliases/GeoJSONFeatureId/","title":"GeoJSONFeatureId","text":"<p>GeoJSONFeatureId = <code>number</code> | <code>string</code></p> <p>Defined in: src/source/geojson_source_diff.ts:4</p> <p>A way to identify a feature, either by string or by number</p>"},{"location":"API/type-aliases/GeoJSONSourceDiff/","title":"GeoJSONSourceDiff","text":"<p>GeoJSONSourceDiff = <code>object</code></p> <p>Defined in: src/source/geojson_source_diff.ts:9</p> <p>The geojson source diff object</p>"},{"location":"API/type-aliases/GeoJSONSourceDiff/#properties","title":"Properties","text":""},{"location":"API/type-aliases/GeoJSONSourceDiff/#add","title":"add?","text":"<p><code>optional</code> add: <code>GeoJSON.Feature</code>[]</p> <p>Defined in: src/source/geojson_source_diff.ts:21</p> <p>An array of features to add</p>"},{"location":"API/type-aliases/GeoJSONSourceDiff/#remove","title":"remove?","text":"<p><code>optional</code> remove: <code>GeoJSONFeatureId</code>[]</p> <p>Defined in: src/source/geojson_source_diff.ts:17</p> <p>An array of features IDs to remove</p>"},{"location":"API/type-aliases/GeoJSONSourceDiff/#removeall","title":"removeAll?","text":"<p><code>optional</code> removeAll: <code>boolean</code></p> <p>Defined in: src/source/geojson_source_diff.ts:13</p> <p>When set to <code>true</code> it will remove all features</p>"},{"location":"API/type-aliases/GeoJSONSourceDiff/#update","title":"update?","text":"<p><code>optional</code> update: <code>GeoJSONFeatureDiff</code>[]</p> <p>Defined in: src/source/geojson_source_diff.ts:25</p> <p>An array of update objects</p>"},{"location":"API/type-aliases/GeolocateControlOptions/","title":"GeolocateControlOptions","text":"<p>GeolocateControlOptions = <code>object</code></p> <p>Defined in: src/ui/control/geolocate_control.ts:16</p> <p>The GeolocateControl options object</p>"},{"location":"API/type-aliases/GeolocateControlOptions/#properties","title":"Properties","text":""},{"location":"API/type-aliases/GeolocateControlOptions/#fitboundsoptions","title":"fitBoundsOptions?","text":"<p><code>optional</code> fitBoundsOptions: <code>FitBoundsOptions</code></p> <p>Defined in: src/ui/control/geolocate_control.ts:25</p> <p>A options object to use when the map is panned and zoomed to the user's location. The default is to use a <code>maxZoom</code> of 15 to limit how far the map will zoom in for very accurate locations.</p>"},{"location":"API/type-aliases/GeolocateControlOptions/#positionoptions","title":"positionOptions?","text":"<p><code>optional</code> positionOptions: <code>PositionOptions</code></p> <p>Defined in: src/ui/control/geolocate_control.ts:21</p> <p>A Geolocation API PositionOptions object.</p>"},{"location":"API/type-aliases/GeolocateControlOptions/#default-value","title":"Default Value","text":"<p><code>{enableHighAccuracy: false, timeout: 6000}</code></p>"},{"location":"API/type-aliases/GeolocateControlOptions/#showaccuracycircle","title":"showAccuracyCircle?","text":"<p><code>optional</code> showAccuracyCircle: <code>boolean</code></p> <p>Defined in: src/ui/control/geolocate_control.ts:35</p> <p>By default, if <code>showUserLocation</code> is <code>true</code>, a transparent circle will be drawn around the user location indicating the accuracy (95% confidence level) of the user's location. Set to <code>false</code> to disable. Always disabled when <code>showUserLocation</code> is <code>false</code>.</p>"},{"location":"API/type-aliases/GeolocateControlOptions/#default-value_1","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/GeolocateControlOptions/#showuserlocation","title":"showUserLocation?","text":"<p><code>optional</code> showUserLocation: <code>boolean</code></p> <p>Defined in: src/ui/control/geolocate_control.ts:40</p> <p>By default a dot will be shown on the map at the user's location. Set to <code>false</code> to disable.</p>"},{"location":"API/type-aliases/GeolocateControlOptions/#default-value_2","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/GeolocateControlOptions/#trackuserlocation","title":"trackUserLocation?","text":"<p><code>optional</code> trackUserLocation: <code>boolean</code></p> <p>Defined in: src/ui/control/geolocate_control.ts:30</p> <p>If <code>true</code> the <code>GeolocateControl</code> becomes a toggle button and when active the map will receive updates to the user's location as it changes.</p>"},{"location":"API/type-aliases/GeolocateControlOptions/#default-value_3","title":"Default Value","text":"<pre><code>false\n</code></pre>"},{"location":"API/type-aliases/GestureOptions/","title":"GestureOptions","text":"<p>GestureOptions = <code>boolean</code></p> <p>Defined in: src/ui/handler/cooperative_gestures.ts:10</p> <p>The CooperativeGesturesHandler options object for the gesture settings</p>"},{"location":"API/type-aliases/GetResourceResponse/","title":"GetResourceResponse&lt;T&gt;","text":"<p>GetResourceResponse&lt;<code>T</code>&gt; = <code>ExpiryData</code> &amp; <code>object</code></p> <p>Defined in: src/util/ajax.ts:70</p> <p>The response object returned from a successful AJAx request</p>"},{"location":"API/type-aliases/GetResourceResponse/#type-declaration","title":"Type Declaration","text":""},{"location":"API/type-aliases/GetResourceResponse/#data","title":"data","text":"<p>data: <code>T</code></p>"},{"location":"API/type-aliases/GetResourceResponse/#type-parameters","title":"Type Parameters","text":"Type Parameter <code>T</code>"},{"location":"API/type-aliases/GlyphPosition/","title":"GlyphPosition","text":"<p>GlyphPosition = <code>object</code></p> <p>Defined in: src/render/glyph_atlas.ts:23</p> <p>The glyph's position</p>"},{"location":"API/type-aliases/GlyphPositions/","title":"GlyphPositions","text":"<p>GlyphPositions = <code>object</code></p> <p>Defined in: src/render/glyph_atlas.ts:31</p> <p>The glyphs' positions</p>"},{"location":"API/type-aliases/GlyphPositions/#index-signature","title":"Index Signature","text":"<p>[<code>_</code>: <code>string</code>]: <code>object</code></p>"},{"location":"API/type-aliases/HandlerResult/","title":"HandlerResult","text":"<p>HandlerResult = <code>object</code></p> <p>Defined in: src/ui/handler_manager.ts:84</p> <p>All handler methods that are called with events can optionally return a <code>HandlerResult</code>.</p>"},{"location":"API/type-aliases/HandlerResult/#properties","title":"Properties","text":""},{"location":"API/type-aliases/HandlerResult/#around","title":"around?","text":"<p><code>optional</code> around: <code>Point</code> | <code>null</code></p> <p>Defined in: src/ui/handler_manager.ts:93</p> <p>the point to not move when changing the camera</p>"},{"location":"API/type-aliases/HandlerResult/#cameraanimation","title":"cameraAnimation()?","text":"<p><code>optional</code> cameraAnimation: (<code>map</code>: <code>Map</code>) =&gt; <code>any</code></p> <p>Defined in: src/ui/handler_manager.ts:101</p> <p>A method that can fire a one-off easing by directly changing the map's camera.</p>"},{"location":"API/type-aliases/HandlerResult/#parameters","title":"Parameters","text":"Parameter Type <code>map</code> <code>Map</code>"},{"location":"API/type-aliases/HandlerResult/#returns","title":"Returns","text":"<p><code>any</code></p>"},{"location":"API/type-aliases/HandlerResult/#needsrenderframe","title":"needsRenderFrame?","text":"<p><code>optional</code> needsRenderFrame: <code>boolean</code></p> <p>Defined in: src/ui/handler_manager.ts:110</p> <p>Makes the manager trigger a frame, allowing the handler to return multiple results over time (see scrollzoom).</p>"},{"location":"API/type-aliases/HandlerResult/#noinertia","title":"noInertia?","text":"<p><code>optional</code> noInertia: <code>boolean</code></p> <p>Defined in: src/ui/handler_manager.ts:114</p> <p>The camera changes won't get recorded for inertial zooming.</p>"},{"location":"API/type-aliases/HandlerResult/#originalevent","title":"originalEvent?","text":"<p><code>optional</code> originalEvent: <code>Event</code></p> <p>Defined in: src/ui/handler_manager.ts:106</p> <p>The last three properties are needed by only one handler: scrollzoom. The DOM event to be used as the <code>originalEvent</code> on any camera change events.</p>"},{"location":"API/type-aliases/HandlerResult/#pincharound","title":"pinchAround?","text":"<p><code>optional</code> pinchAround: <code>Point</code> | <code>null</code></p> <p>Defined in: src/ui/handler_manager.ts:97</p> <p>same as above, except for pinch actions, which are given higher priority</p>"},{"location":"API/type-aliases/IndicesType/","title":"IndicesType","text":"<p>IndicesType = <code>\"32bit\"</code> | <code>\"16bit\"</code> | <code>undefined</code></p> <p>Defined in: src/util/create_tile_mesh.ts:66</p> <p>Describes desired type of vertex indices, either 16 bit uint, 32 bit uint, or, if undefined, any of the two options.</p>"},{"location":"API/type-aliases/JumpToOptions/","title":"JumpToOptions","text":"<p>JumpToOptions = <code>CameraOptions</code> &amp; <code>object</code></p> <p>Defined in: src/ui/camera.ts:95</p> <p>The options object related to the Map.jumpTo method</p>"},{"location":"API/type-aliases/JumpToOptions/#type-declaration","title":"Type Declaration","text":""},{"location":"API/type-aliases/JumpToOptions/#padding","title":"padding?","text":"<p><code>optional</code> padding: <code>PaddingOptions</code></p> <p>Dimensions in pixels applied on each side of the viewport for shifting the vanishing point.</p>"},{"location":"API/type-aliases/Listener/","title":"Listener()","text":"<p>Listener = (<code>a</code>: <code>any</code>) =&gt; <code>any</code></p> <p>Defined in: src/util/evented.ts:6</p> <p>A listener method used as a callback to events</p>"},{"location":"API/type-aliases/Listener/#parameters","title":"Parameters","text":"Parameter Type <code>a</code> <code>any</code>"},{"location":"API/type-aliases/Listener/#returns","title":"Returns","text":"<p><code>any</code></p>"},{"location":"API/type-aliases/LngLatBoundsLike/","title":"LngLatBoundsLike","text":"<p>LngLatBoundsLike = <code>LngLatBounds</code> | [<code>LngLatLike</code>, <code>LngLatLike</code>] | [<code>number</code>, <code>number</code>, <code>number</code>, <code>number</code>]</p> <p>Defined in: src/geo/lng_lat_bounds.ts:20</p> <p>A LngLatBounds object, an array of LngLatLike objects in [sw, ne] order, or an array of numbers in [west, south, east, north] order.</p>"},{"location":"API/type-aliases/LngLatBoundsLike/#example","title":"Example","text":"<pre><code>let v1 = new LngLatBounds(\n  new LngLat(-73.9876, 40.7661),\n  new LngLat(-73.9397, 40.8002)\n);\nlet v2 = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002])\nlet v3 = [[-73.9876, 40.7661], [-73.9397, 40.8002]];\n</code></pre>"},{"location":"API/type-aliases/LngLatLike/","title":"LngLatLike","text":"<p>LngLatLike = <code>LngLat</code> | { <code>lat</code>: <code>number</code>; <code>lng</code>: <code>number</code>; } | { <code>lat</code>: <code>number</code>; <code>lon</code>: <code>number</code>; } | [<code>number</code>, <code>number</code>]</p> <p>Defined in: src/geo/lng_lat.ts:23</p> <p>A LngLat object, an array of two numbers representing longitude and latitude, or an object with <code>lng</code> and <code>lat</code> or <code>lon</code> and <code>lat</code> properties.</p>"},{"location":"API/type-aliases/LngLatLike/#example","title":"Example","text":"<pre><code>let v1 = new LngLat(-122.420679, 37.772537);\nlet v2 = [-122.420679, 37.772537];\nlet v3 = {lon: -122.420679, lat: 37.772537};\n</code></pre>"},{"location":"API/type-aliases/LogoControlOptions/","title":"LogoControlOptions","text":"<p>LogoControlOptions = <code>object</code></p> <p>Defined in: src/ui/control/logo_control.ts:9</p> <p>The LogoControl options object</p>"},{"location":"API/type-aliases/LogoControlOptions/#properties","title":"Properties","text":""},{"location":"API/type-aliases/LogoControlOptions/#compact","title":"compact?","text":"<p><code>optional</code> compact: <code>boolean</code></p> <p>Defined in: src/ui/control/logo_control.ts:14</p> <p>If <code>true</code>, force a compact logo. If <code>false</code>, force the full logo. The default is a responsive logo that collapses when the map is less than 640 pixels wide.</p>"},{"location":"API/type-aliases/MapContextEvent/","title":"MapContextEvent","text":"<p>MapContextEvent = <code>object</code></p> <p>Defined in: src/ui/events.ts:771</p> <p>An event related to the web gl context</p>"},{"location":"API/type-aliases/MapDataEvent/","title":"MapDataEvent","text":"<p>MapDataEvent = <code>object</code></p> <p>Defined in: src/ui/events.ts:724</p> <p>A <code>MapDataEvent</code> object is emitted with the <code>data</code> and <code>dataloading</code> events. Possible values for <code>dataType</code>s are:</p> <ul> <li><code>'source'</code>: The non-tile data associated with any source</li> <li><code>'style'</code>: The style used by the map</li> </ul> <p>Possible values for <code>sourceDataType</code>s are:</p> <ul> <li><code>'metadata'</code>: indicates that any necessary source metadata has been loaded (such as TileJSON) and it is ok to start loading tiles</li> <li><code>'content'</code>: indicates the source data has changed (such as when source.setData() has been called on GeoJSONSource)</li> <li><code>'visibility'</code>: send when the source becomes used when at least one of its layers becomes visible in style sense (inside the layer's zoom range and with layout.visibility set to 'visible')</li> <li><code>'idle'</code>: indicates that no new source data has been fetched (but the source has done loading)</li> </ul>"},{"location":"API/type-aliases/MapDataEvent/#example","title":"Example","text":"<pre><code>// The sourcedata event is an example of MapDataEvent.\n// Set up an event listener on the map.\nmap.on('sourcedata', (e) =&gt; {\n   if (e.isSourceLoaded) {\n       // Do something when the source has finished loading\n   }\n});\n</code></pre>"},{"location":"API/type-aliases/MapDataEvent/#properties","title":"Properties","text":""},{"location":"API/type-aliases/MapDataEvent/#datatype","title":"dataType","text":"<p>dataType: <code>string</code></p> <p>Defined in: src/ui/events.ts:732</p> <p>The type of data that has changed. One of <code>'source'</code>, <code>'style'</code>.</p>"},{"location":"API/type-aliases/MapDataEvent/#sourcedatatype","title":"sourceDataType","text":"<p>sourceDataType: <code>MapSourceDataType</code></p> <p>Defined in: src/ui/events.ts:736</p> <p>Included if the event has a <code>dataType</code> of <code>source</code> and the event signals that internal data has been received or changed. Possible values are <code>metadata</code>, <code>content</code>, <code>visibility</code> and <code>idle</code>.</p>"},{"location":"API/type-aliases/MapDataEvent/#type","title":"type","text":"<p>type: <code>string</code></p> <p>Defined in: src/ui/events.ts:728</p> <p>The event type.</p>"},{"location":"API/type-aliases/MapGeoJSONFeature/","title":"MapGeoJSONFeature","text":"<p>MapGeoJSONFeature = <code>GeoJSONFeature</code> &amp; <code>object</code></p> <p>Defined in: src/util/vectortile_to_geojson.ts:18</p> <p>An extended geojson feature used by the events to return data to the listener</p>"},{"location":"API/type-aliases/MapGeoJSONFeature/#type-declaration","title":"Type Declaration","text":""},{"location":"API/type-aliases/MapGeoJSONFeature/#layer","title":"layer","text":"<p>layer: <code>DistributiveOmit</code>&lt;<code>LayerSpecification</code>, <code>\"source\"</code>&gt; &amp; <code>object</code></p>"},{"location":"API/type-aliases/MapGeoJSONFeature/#type-declaration_1","title":"Type Declaration","text":""},{"location":"API/type-aliases/MapGeoJSONFeature/#source","title":"source","text":"<p>source: <code>string</code></p>"},{"location":"API/type-aliases/MapGeoJSONFeature/#source_1","title":"source","text":"<p>source: <code>string</code></p>"},{"location":"API/type-aliases/MapGeoJSONFeature/#sourcelayer","title":"sourceLayer?","text":"<p><code>optional</code> sourceLayer: <code>string</code></p>"},{"location":"API/type-aliases/MapGeoJSONFeature/#state","title":"state","text":"<p>state: <code>object</code></p>"},{"location":"API/type-aliases/MapGeoJSONFeature/#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>any</code></p>"},{"location":"API/type-aliases/MapLayerEventType/","title":"MapLayerEventType","text":"<p>MapLayerEventType = <code>object</code></p> <p>Defined in: src/ui/events.ts:50</p> <p><code>MapLayerEventType</code> - a mapping between the event name and the event.</p> <p>Note</p> <p>These events are compatible with the optional <code>layerId</code> parameter.</p> <p>If <code>layerId</code> is included as the second argument in Map.on, the event listener will fire only when the event action contains a visible portion of the specified layer. The following example can be used for all the events.</p>"},{"location":"API/type-aliases/MapLayerEventType/#example","title":"Example","text":"<pre><code>// Initialize the map\nlet map = new Map({ // map options });\n// Set an event listener for a specific layer\nmap.on('the-event-name', 'poi-label', (e) =&gt; {\n  console.log('An event has occurred on a visible portion of the poi-label layer');\n});\n</code></pre>"},{"location":"API/type-aliases/MapLayerEventType/#properties","title":"Properties","text":""},{"location":"API/type-aliases/MapLayerEventType/#click","title":"click","text":"<p>click: <code>MapLayerMouseEvent</code></p> <p>Defined in: src/ui/events.ts:57</p> <p>Fired when a pointing device (usually a mouse) is pressed and released contains a visible portion of the specified layer.</p>"},{"location":"API/type-aliases/MapLayerEventType/#see","title":"See","text":"<ul> <li>Measure distances</li> <li>Center the map on a clicked symbol</li> </ul>"},{"location":"API/type-aliases/MapLayerEventType/#contextmenu","title":"contextmenu","text":"<p>contextmenu: <code>MapLayerMouseEvent</code></p> <p>Defined in: src/ui/events.ts:116</p> <p>Fired when the right button of the mouse is clicked or the context menu key is pressed within visible portion of the specified layer.</p>"},{"location":"API/type-aliases/MapLayerEventType/#dblclick","title":"dblclick","text":"<p>dblclick: <code>MapLayerMouseEvent</code></p> <p>Defined in: src/ui/events.ts:64</p> <p>Fired when a pointing device (usually a mouse) is pressed and released twice contains a visible portion of the specified layer.</p> <p>Note</p> <p>Under normal conditions, this event will be preceded by two <code>click</code> events.</p>"},{"location":"API/type-aliases/MapLayerEventType/#mousedown","title":"mousedown","text":"<p>mousedown: <code>MapLayerMouseEvent</code></p> <p>Defined in: src/ui/events.ts:69</p> <p>Fired when a pointing device (usually a mouse) is pressed while inside a visible portion of the specified layer.</p>"},{"location":"API/type-aliases/MapLayerEventType/#see_1","title":"See","text":"<p>Create a draggable point</p>"},{"location":"API/type-aliases/MapLayerEventType/#mouseenter","title":"mouseenter","text":"<p>mouseenter: <code>MapLayerMouseEvent</code></p> <p>Defined in: src/ui/events.ts:92</p> <p>Fired when a pointing device (usually a mouse) enters a visible portion of a specified layer from outside that layer or outside the map canvas.</p>"},{"location":"API/type-aliases/MapLayerEventType/#see_2","title":"See","text":"<ul> <li>Center the map on a clicked symbol</li> <li>Display a popup on click</li> </ul>"},{"location":"API/type-aliases/MapLayerEventType/#mouseleave","title":"mouseleave","text":"<p>mouseleave: <code>MapLayerMouseEvent</code></p> <p>Defined in: src/ui/events.ts:100</p> <p>Fired when a pointing device (usually a mouse) leaves a visible portion of a specified layer, or leaves the map canvas.</p>"},{"location":"API/type-aliases/MapLayerEventType/#see_3","title":"See","text":"<ul> <li>Highlight features under the mouse pointer</li> <li>Display a popup on click</li> </ul>"},{"location":"API/type-aliases/MapLayerEventType/#mousemove","title":"mousemove","text":"<p>mousemove: <code>MapLayerMouseEvent</code></p> <p>Defined in: src/ui/events.ts:84</p> <p>Fired when a pointing device (usually a mouse) is moved while the cursor is inside a visible portion of the specified layer. As you move the cursor across the layer, the event will fire every time the cursor changes position within that layer.</p>"},{"location":"API/type-aliases/MapLayerEventType/#see_4","title":"See","text":"<ul> <li>Get coordinates of the mouse pointer</li> <li>Highlight features under the mouse pointer</li> <li>Display a popup on over</li> <li>Animate symbol to follow the mouse</li> </ul>"},{"location":"API/type-aliases/MapLayerEventType/#mouseout","title":"mouseout","text":"<p>mouseout: <code>MapLayerMouseEvent</code></p> <p>Defined in: src/ui/events.ts:112</p> <p>Fired when a point device (usually a mouse) leaves the visible portion of the specified layer.</p>"},{"location":"API/type-aliases/MapLayerEventType/#mouseover","title":"mouseover","text":"<p>mouseover: <code>MapLayerMouseEvent</code></p> <p>Defined in: src/ui/events.ts:108</p> <p>Fired when a pointing device (usually a mouse) is moved inside a visible portion of the specified layer.</p>"},{"location":"API/type-aliases/MapLayerEventType/#see_5","title":"See","text":"<ul> <li>Get coordinates of the mouse pointer</li> <li>Highlight features under the mouse pointer</li> <li>Display a popup on hover</li> </ul>"},{"location":"API/type-aliases/MapLayerEventType/#mouseup","title":"mouseup","text":"<p>mouseup: <code>MapLayerMouseEvent</code></p> <p>Defined in: src/ui/events.ts:74</p> <p>Fired when a pointing device (usually a mouse) is released while inside a visible portion of the specified layer.</p>"},{"location":"API/type-aliases/MapLayerEventType/#see_6","title":"See","text":"<p>Create a draggable point</p>"},{"location":"API/type-aliases/MapLayerEventType/#touchcancel","title":"touchcancel","text":"<p>touchcancel: <code>MapLayerTouchEvent</code></p> <p>Defined in: src/ui/events.ts:131</p> <p>Fired when a <code>touchstart</code> event occurs within the visible portion of the specified layer.</p>"},{"location":"API/type-aliases/MapLayerEventType/#see_7","title":"See","text":"<p>Create a draggable point</p>"},{"location":"API/type-aliases/MapLayerEventType/#touchend","title":"touchend","text":"<p>touchend: <code>MapLayerTouchEvent</code></p> <p>Defined in: src/ui/events.ts:126</p> <p>Fired when a <code>touchend</code> event occurs within the visible portion of the specified layer.</p>"},{"location":"API/type-aliases/MapLayerEventType/#see_8","title":"See","text":"<p>Create a draggable point</p>"},{"location":"API/type-aliases/MapLayerEventType/#touchstart","title":"touchstart","text":"<p>touchstart: <code>MapLayerTouchEvent</code></p> <p>Defined in: src/ui/events.ts:121</p> <p>Fired when a <code>touchstart</code> event occurs within the visible portion of the specified layer.</p>"},{"location":"API/type-aliases/MapLayerEventType/#see_9","title":"See","text":"<p>Create a draggable point</p>"},{"location":"API/type-aliases/MapLayerMouseEvent/","title":"MapLayerMouseEvent","text":"<p>MapLayerMouseEvent = <code>MapMouseEvent</code> &amp; <code>object</code></p> <p>Defined in: src/ui/events.ts:17</p> <p>An event from the mouse relevant to a specific layer.</p>"},{"location":"API/type-aliases/MapLayerMouseEvent/#type-declaration","title":"Type Declaration","text":""},{"location":"API/type-aliases/MapLayerMouseEvent/#features","title":"features?","text":"<p><code>optional</code> features: <code>MapGeoJSONFeature</code>[]</p>"},{"location":"API/type-aliases/MapLayerTouchEvent/","title":"MapLayerTouchEvent","text":"<p>MapLayerTouchEvent = <code>MapTouchEvent</code> &amp; <code>object</code></p> <p>Defined in: src/ui/events.ts:24</p> <p>An event from a touch device relevant to a specific layer.</p>"},{"location":"API/type-aliases/MapLayerTouchEvent/#type-declaration","title":"Type Declaration","text":""},{"location":"API/type-aliases/MapLayerTouchEvent/#features","title":"features?","text":"<p><code>optional</code> features: <code>MapGeoJSONFeature</code>[]</p>"},{"location":"API/type-aliases/MapLibreEvent/","title":"MapLibreEvent&lt;TOrig&gt;","text":"<p>MapLibreEvent&lt;<code>TOrig</code>&gt; = <code>object</code></p> <p>Defined in: src/ui/events.ts:436</p> <p>The base event for MapLibre</p>"},{"location":"API/type-aliases/MapLibreEvent/#type-parameters","title":"Type Parameters","text":"Type Parameter Default type <code>TOrig</code> <code>unknown</code>"},{"location":"API/type-aliases/MapLibreZoomEvent/","title":"MapLibreZoomEvent","text":"<p>MapLibreZoomEvent = <code>object</code></p> <p>Defined in: src/ui/events.ts:681</p> <p>A <code>MapLibreZoomEvent</code> is the event type for the boxzoom-related map events emitted by the BoxZoomHandler.</p>"},{"location":"API/type-aliases/MapLibreZoomEvent/#properties","title":"Properties","text":""},{"location":"API/type-aliases/MapLibreZoomEvent/#originalevent","title":"originalEvent","text":"<p>originalEvent: <code>MouseEvent</code></p> <p>Defined in: src/ui/events.ts:693</p> <p>The DOM event that triggered the boxzoom event. Can be a <code>MouseEvent</code> or <code>KeyboardEvent</code></p>"},{"location":"API/type-aliases/MapLibreZoomEvent/#target","title":"target","text":"<p>target: <code>Map</code></p> <p>Defined in: src/ui/events.ts:689</p> <p>The <code>Map</code> instance that triggered the event</p>"},{"location":"API/type-aliases/MapLibreZoomEvent/#type","title":"type","text":"<p>type: <code>\"boxzoomstart\"</code> | <code>\"boxzoomend\"</code> | <code>\"boxzoomcancel\"</code></p> <p>Defined in: src/ui/events.ts:685</p> <p>The type of boxzoom event. One of <code>boxzoomstart</code>, <code>boxzoomend</code> or <code>boxzoomcancel</code></p>"},{"location":"API/type-aliases/MapOptions/","title":"MapOptions","text":"<p>MapOptions = <code>object</code></p> <p>Defined in: src/ui/map.ts:81</p> <p>The Map options object.</p>"},{"location":"API/type-aliases/MapOptions/#properties","title":"Properties","text":""},{"location":"API/type-aliases/MapOptions/#attributioncontrol","title":"attributionControl?","text":"<p><code>optional</code> attributionControl: <code>false</code> | <code>AttributionControlOptions</code></p> <p>Defined in: src/ui/map.ts:114</p> <p>If set, an AttributionControl will be added to the map with the provided options. To disable the attribution control, pass <code>false</code>.</p> <p>Note</p> <p>Showing the logo of MapLibre is not required for using MapLibre.</p>"},{"location":"API/type-aliases/MapOptions/#default-value","title":"Default Value","text":"<pre><code>compact: true, customAttribution: \"MapLibre ...\".\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#bearing","title":"bearing?","text":"<p><code>optional</code> bearing: <code>number</code></p> <p>Defined in: src/ui/map.ts:231</p> <p>The initial bearing (rotation) of the map, measured in degrees counter-clockwise from north. If <code>bearing</code> is not specified in the constructor options, MapLibre GL JS will look for it in the map's style object. If it is not specified in the style, either, it will default to <code>0</code>.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_1","title":"Default Value","text":"<pre><code>0\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#bearingsnap","title":"bearingSnap?","text":"<p><code>optional</code> bearingSnap: <code>number</code></p> <p>Defined in: src/ui/map.ts:106</p> <p>The threshold, measured in degrees, that determines when the map's bearing will snap to north. For example, with a <code>bearingSnap</code> of 7, if the user rotates the map within 7 degrees of north, the map will automatically snap to exact north.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_2","title":"Default Value","text":"<pre><code>7\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#bounds","title":"bounds?","text":"<p><code>optional</code> bounds: <code>LngLatBoundsLike</code></p> <p>Defined in: src/ui/map.ts:311</p> <p>The initial bounds of the map. If <code>bounds</code> is specified, it overrides <code>center</code> and <code>zoom</code> constructor options.</p>"},{"location":"API/type-aliases/MapOptions/#boxzoom","title":"boxZoom?","text":"<p><code>optional</code> boxZoom: <code>boolean</code></p> <p>Defined in: src/ui/map.ts:169</p> <p>If <code>true</code>, the \"box zoom\" interaction is enabled (see BoxZoomHandler).</p>"},{"location":"API/type-aliases/MapOptions/#default-value_3","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#cancelpendingtilerequestswhilezooming","title":"cancelPendingTileRequestsWhileZooming?","text":"<p><code>optional</code> cancelPendingTileRequestsWhileZooming: <code>boolean</code></p> <p>Defined in: src/ui/map.ts:365</p> <p>Determines whether to cancel, or retain, tiles from the current viewport which are still loading but which belong to a farther (smaller) zoom level than the current one. * If <code>true</code>, when zooming in, tiles which didn't manage to load for previous zoom levels will become canceled. This might save some computing resources for slower devices, but the map details might appear more abruptly at the end of the zoom. * If <code>false</code>, when zooming in, the previous zoom level(s) tiles will progressively appear, giving a smoother map details experience. However, more tiles will be rendered in a short period of time.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_4","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#canvascontextattributes","title":"canvasContextAttributes?","text":"<p><code>optional</code> canvasContextAttributes: <code>WebGLContextAttributesWithType</code></p> <p>Defined in: src/ui/map.ts:130</p> <p>Set of WebGLContextAttributes that are applied to the WebGL context of the map. See https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext for more details. <code>contextType</code> can be set to <code>webgl2</code> or <code>webgl</code> to force a WebGL version. Not setting it, Maplibre will do it's best to get a suitable context.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_5","title":"Default Value","text":"<pre><code>antialias: false, powerPreference: 'high-performance', preserveDrawingBuffer: false, failIfMajorPerformanceCaveat: false, desynchronized: false, contextType: 'webgl2withfallback'\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#center","title":"center?","text":"<p><code>optional</code> center: <code>LngLatLike</code></p> <p>Defined in: src/ui/map.ts:216</p> <p>The initial geographical centerpoint of the map. If <code>center</code> is not specified in the constructor options, MapLibre GL JS will look for it in the map's style object. If it is not specified in the style, either, it will default to <code>[0, 0]</code> </p> <p>Note</p> <p>MapLibre GL JS uses longitude, latitude coordinate order (as opposed to latitude, longitude) to match GeoJSON.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_6","title":"Default Value","text":"<pre><code>[0, 0]\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#centerclampedtoground","title":"centerClampedToGround?","text":"<p><code>optional</code> centerClampedToGround: <code>boolean</code></p> <p>Defined in: src/ui/map.ts:372</p> <p>If true, the elevation of the center point will automatically be set to the terrain elevation (or zero if terrain is not enabled). If false, the elevation of the center point will default to sea level and will not automatically update. Defaults to true. Needs to be set to false to keep the camera above ground when pitch &gt; 90 degrees.</p>"},{"location":"API/type-aliases/MapOptions/#clicktolerance","title":"clickTolerance?","text":"<p><code>optional</code> clickTolerance: <code>number</code></p> <p>Defined in: src/ui/map.ts:307</p> <p>The max number of pixels a user can shift the mouse pointer during a click for it to be considered a valid click (as opposed to a mouse drag).</p>"},{"location":"API/type-aliases/MapOptions/#default-value_7","title":"Default Value","text":"<pre><code>3\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#collectresourcetiming","title":"collectResourceTiming?","text":"<p><code>optional</code> collectResourceTiming: <code>boolean</code></p> <p>Defined in: src/ui/map.ts:302</p> <p>If <code>true</code>, Resource Timing API information will be collected for requests made by GeoJSON and Vector Tile web workers (this information is normally inaccessible from the main Javascript thread). Information will be returned in a <code>resourceTiming</code> property of relevant <code>data</code> events.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_8","title":"Default Value","text":"<pre><code>false\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#container","title":"container","text":"<p>container: <code>HTMLElement</code> | <code>string</code></p> <p>Defined in: src/ui/map.ts:99</p> <p>The HTML element in which MapLibre GL JS will render the map, or the element's string <code>id</code>. The specified element must have no children.</p>"},{"location":"API/type-aliases/MapOptions/#cooperativegestures","title":"cooperativeGestures?","text":"<p><code>optional</code> cooperativeGestures: <code>GestureOptions</code></p> <p>Defined in: src/ui/map.ts:204</p> <p>If <code>true</code> or set to an options object, the map is only accessible on desktop while holding Command/Ctrl and only accessible on mobile with two fingers. Interacting with the map using normal gestures will trigger an informational screen. With this option enabled, \"drag to pitch\" requires a three-finger gesture. Cooperative gestures are disabled when a map enters fullscreen using FullscreenControl.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_9","title":"Default Value","text":"<pre><code>false\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#crosssourcecollisions","title":"crossSourceCollisions?","text":"<p><code>optional</code> crossSourceCollisions: <code>boolean</code></p> <p>Defined in: src/ui/map.ts:297</p> <p>If <code>true</code>, symbols from multiple sources can collide with each other during collision detection. If <code>false</code>, collision detection is run separately for the symbols in each source.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_10","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#doubleclickzoom","title":"doubleClickZoom?","text":"<p><code>optional</code> doubleClickZoom: <code>boolean</code></p> <p>Defined in: src/ui/map.ts:189</p> <p>If <code>true</code>, the \"double click to zoom\" interaction is enabled (see DoubleClickZoomHandler).</p>"},{"location":"API/type-aliases/MapOptions/#default-value_11","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#dragpan","title":"dragPan?","text":"<p><code>optional</code> dragPan: <code>boolean</code> | <code>DragPanOptions</code></p> <p>Defined in: src/ui/map.ts:179</p> <p>If <code>true</code>, the \"drag to pan\" interaction is enabled. An <code>Object</code> value is passed as options to DragPanHandler.enable.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_12","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#dragrotate","title":"dragRotate?","text":"<p><code>optional</code> dragRotate: <code>boolean</code></p> <p>Defined in: src/ui/map.ts:174</p> <p>If <code>true</code>, the \"drag to rotate\" interaction is enabled (see DragRotateHandler).</p>"},{"location":"API/type-aliases/MapOptions/#default-value_13","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#elevation","title":"elevation?","text":"<p><code>optional</code> elevation: <code>number</code></p> <p>Defined in: src/ui/map.ts:221</p> <p>The elevation of the initial geographical centerpoint of the map, in meters above sea level. If <code>elevation</code> is not specified in the constructor options, it will default to <code>0</code>.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_14","title":"Default Value","text":"<pre><code>0\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#fadeduration","title":"fadeDuration?","text":"<p><code>optional</code> fadeDuration: <code>number</code></p> <p>Defined in: src/ui/map.ts:292</p> <p>Controls the duration of the fade-in/fade-out animation for label collisions after initial map load, in milliseconds. This setting affects all symbol layers. This setting does not affect the duration of runtime styling transitions or raster tile cross-fading.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_15","title":"Default Value","text":"<pre><code>300\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#fitboundsoptions","title":"fitBoundsOptions?","text":"<p><code>optional</code> fitBoundsOptions: <code>FitBoundsOptions</code></p> <p>Defined in: src/ui/map.ts:315</p> <p>A FitBoundsOptions options object to use only when fitting the initial <code>bounds</code> provided above.</p>"},{"location":"API/type-aliases/MapOptions/#hash","title":"hash?","text":"<p><code>optional</code> hash: <code>boolean</code> | <code>string</code></p> <p>Defined in: src/ui/map.ts:90</p> <p>If <code>true</code>, the map's position (zoom, center latitude, center longitude, bearing, and pitch) will be synced with the hash fragment of the page's URL. For example, <code>http://path/to/my/page.html#2.59/39.26/53.07/-24.1/60</code>. An additional string may optionally be provided to indicate a parameter-styled hash, e.g. http://path/to/my/page.html#map=2.59/39.26/53.07/-24.1/60&amp;foo=bar, where foo is a custom parameter and bar is an arbitrary hash distinct from the map hash.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_16","title":"Default Value","text":"<pre><code>false\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#interactive","title":"interactive?","text":"<p><code>optional</code> interactive: <code>boolean</code></p> <p>Defined in: src/ui/map.ts:95</p> <p>If <code>false</code>, no mouse, touch, or keyboard listeners will be attached to the map, so it will not respond to interaction.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_17","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#keyboard","title":"keyboard?","text":"<p><code>optional</code> keyboard: <code>boolean</code></p> <p>Defined in: src/ui/map.ts:184</p> <p>If <code>true</code>, keyboard shortcuts are enabled (see KeyboardHandler).</p>"},{"location":"API/type-aliases/MapOptions/#default-value_18","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#locale","title":"locale?","text":"<p><code>optional</code> locale: <code>Record</code>&lt;<code>string</code>, <code>string</code>&gt;</p> <p>Defined in: src/ui/map.ts:287</p> <p>A patch to apply to the default localization table for UI strings, e.g. control tooltips. The <code>locale</code> object maps namespaced UI string IDs to translated strings in the target language; see <code>src/ui/default_locale.js</code> for an example with all supported string IDs. The object may specify all UI strings (thereby adding support for a new translation) or only a subset of strings (thereby patching the default translation table). For an example, see https://maplibre.org/maplibre-gl-js/docs/examples/locale-switching/ Alternatively, search the official plugins page for plugins related to localization.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_19","title":"Default Value","text":"<pre><code>null\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#localideographfontfamily","title":"localIdeographFontFamily?","text":"<p><code>optional</code> localIdeographFontFamily: <code>string</code> | <code>false</code></p> <p>Defined in: src/ui/map.ts:325</p> <p>Defines a CSS font-family for locally overriding generation of Chinese, Japanese, and Korean characters. For these characters, font settings from the map's style will be ignored, except for font-weight keywords (light/regular/medium/bold). Set to <code>false</code>, to enable font settings from the map's style for these glyph ranges. The purpose of this option is to avoid bandwidth-intensive glyph server requests.</p>"},{"location":"API/type-aliases/MapOptions/#see","title":"See","text":"<p>Use locally generated ideographs</p>"},{"location":"API/type-aliases/MapOptions/#default-value_20","title":"Default Value","text":"<pre><code>'sans-serif'\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#logoposition","title":"logoPosition?","text":"<p><code>optional</code> logoPosition: <code>ControlPosition</code></p> <p>Defined in: src/ui/map.ts:123</p> <p>A string representing the position of the MapLibre wordmark on the map. Valid options are <code>top-left</code>,<code>top-right</code>, <code>bottom-left</code>, or <code>bottom-right</code>.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_21","title":"Default Value","text":"<pre><code>'bottom-left'\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#maplibrelogo","title":"maplibreLogo?","text":"<p><code>optional</code> maplibreLogo: <code>boolean</code></p> <p>Defined in: src/ui/map.ts:118</p> <p>If <code>true</code>, the MapLibre logo will be shown.</p>"},{"location":"API/type-aliases/MapOptions/#maxbounds","title":"maxBounds?","text":"<p><code>optional</code> maxBounds: <code>LngLatBoundsLike</code></p> <p>Defined in: src/ui/map.ts:139</p> <p>If set, the map will be constrained to the given bounds.</p>"},{"location":"API/type-aliases/MapOptions/#maxcanvassize","title":"maxCanvasSize?","text":"<p><code>optional</code> maxCanvasSize: [<code>number</code>, <code>number</code>]</p> <p>Defined in: src/ui/map.ts:358</p> <p>The canvas' <code>width</code> and <code>height</code> max size. The values are passed as an array where the first element is max width and the second element is max height. You shouldn't set this above WebGl <code>MAX_TEXTURE_SIZE</code>.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_22","title":"Default Value","text":"<pre><code>[4096, 4096].\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#maxpitch","title":"maxPitch?","text":"<p><code>optional</code> maxPitch: <code>number</code> | <code>null</code></p> <p>Defined in: src/ui/map.ts:164</p> <p>The maximum pitch of the map (0-180).</p>"},{"location":"API/type-aliases/MapOptions/#default-value_23","title":"Default Value","text":"<pre><code>60\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#maxtilecachesize","title":"maxTileCacheSize?","text":"<p><code>optional</code> maxTileCacheSize: <code>number</code> | <code>null</code></p> <p>Defined in: src/ui/map.ts:256</p> <p>The maximum number of tiles stored in the tile cache for a given source. If omitted, the cache will be dynamically sized based on the current viewport which can be set using <code>maxTileCacheZoomLevels</code> constructor options.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_24","title":"Default Value","text":"<pre><code>null\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#maxtilecachezoomlevels","title":"maxTileCacheZoomLevels?","text":"<p><code>optional</code> maxTileCacheZoomLevels: <code>number</code></p> <p>Defined in: src/ui/map.ts:261</p> <p>The maximum number of zoom levels for which to store tiles for a given source. Tile cache dynamic size is calculated by multiplying <code>maxTileCacheZoomLevels</code> with the approximate number of tiles in the viewport for a given source.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_25","title":"Default Value","text":"<pre><code>5\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#maxzoom","title":"maxZoom?","text":"<p><code>optional</code> maxZoom: <code>number</code> | <code>null</code></p> <p>Defined in: src/ui/map.ts:154</p> <p>The maximum zoom level of the map (0-24).</p>"},{"location":"API/type-aliases/MapOptions/#default-value_26","title":"Default Value","text":"<pre><code>22\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#minpitch","title":"minPitch?","text":"<p><code>optional</code> minPitch: <code>number</code> | <code>null</code></p> <p>Defined in: src/ui/map.ts:159</p> <p>The minimum pitch of the map (0-180).</p>"},{"location":"API/type-aliases/MapOptions/#default-value_27","title":"Default Value","text":"<pre><code>0\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#minzoom","title":"minZoom?","text":"<p><code>optional</code> minZoom: <code>number</code> | <code>null</code></p> <p>Defined in: src/ui/map.ts:149</p> <p>The minimum zoom level of the map (0-24).</p>"},{"location":"API/type-aliases/MapOptions/#default-value_28","title":"Default Value","text":"<pre><code>0\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#pitch","title":"pitch?","text":"<p><code>optional</code> pitch: <code>number</code></p> <p>Defined in: src/ui/map.ts:236</p> <p>The initial pitch (tilt) of the map, measured in degrees away from the plane of the screen (0-85). If <code>pitch</code> is not specified in the constructor options, MapLibre GL JS will look for it in the map's style object. If it is not specified in the style, either, it will default to <code>0</code>. Values greater than 60 degrees are experimental and may result in rendering issues. If you encounter any, please raise an issue with details in the MapLibre project.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_29","title":"Default Value","text":"<pre><code>0\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#pitchwithrotate","title":"pitchWithRotate?","text":"<p><code>optional</code> pitchWithRotate: <code>boolean</code></p> <p>Defined in: src/ui/map.ts:337</p> <p>If <code>false</code>, the map's pitch (tilt) control with \"drag to rotate\" interaction will be disabled.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_30","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#pixelratio","title":"pixelRatio?","text":"<p><code>optional</code> pixelRatio: <code>number</code></p> <p>Defined in: src/ui/map.ts:347</p> <p>The pixel ratio. The canvas' <code>width</code> attribute will be <code>container.clientWidth * pixelRatio</code> and its <code>height</code> attribute will be <code>container.clientHeight * pixelRatio</code>. Defaults to <code>devicePixelRatio</code> if not specified.</p>"},{"location":"API/type-aliases/MapOptions/#refreshexpiredtiles","title":"refreshExpiredTiles?","text":"<p><code>optional</code> refreshExpiredTiles: <code>boolean</code></p> <p>Defined in: src/ui/map.ts:135</p> <p>If <code>false</code>, the map won't attempt to re-request tiles once they expire per their HTTP <code>cacheControl</code>/<code>expires</code> headers.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_31","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#renderworldcopies","title":"renderWorldCopies?","text":"<p><code>optional</code> renderWorldCopies: <code>boolean</code></p> <p>Defined in: src/ui/map.ts:251</p> <p>If <code>true</code>, multiple copies of the world will be rendered side by side beyond -180 and 180 degrees longitude. If set to <code>false</code>:</p> <ul> <li>When the map is zoomed out far enough that a single representation of the world does not fill the map's entire container, there will be blank space beyond 180 and -180 degrees longitude.</li> <li>Features that cross 180 and -180 degrees longitude will be cut in two (with one portion on the right edge of the map and the other on the left edge of the map) at every zoom level.</li> </ul>"},{"location":"API/type-aliases/MapOptions/#default-value_32","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#roll","title":"roll?","text":"<p><code>optional</code> roll: <code>number</code></p> <p>Defined in: src/ui/map.ts:241</p> <p>The initial roll angle of the map, measured in degrees counter-clockwise about the camera boresight. If <code>roll</code> is not specified in the constructor options, MapLibre GL JS will look for it in the map's style object. If it is not specified in the style, either, it will default to <code>0</code>.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_33","title":"Default Value","text":"<pre><code>0\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#rollenabled","title":"rollEnabled?","text":"<p><code>optional</code> rollEnabled: <code>boolean</code></p> <p>Defined in: src/ui/map.ts:342</p> <p>If <code>false</code>, the map's roll control with \"drag to rotate\" interaction will be disabled.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_34","title":"Default Value","text":"<pre><code>false\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#scrollzoom","title":"scrollZoom?","text":"<p><code>optional</code> scrollZoom: <code>boolean</code> | <code>AroundCenterOptions</code></p> <p>Defined in: src/ui/map.ts:144</p> <p>If <code>true</code>, the \"scroll to zoom\" interaction is enabled. AroundCenterOptions are passed as options to ScrollZoomHandler.enable.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_35","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#style","title":"style?","text":"<p><code>optional</code> style: <code>StyleSpecification</code> | <code>string</code></p> <p>Defined in: src/ui/map.ts:332</p> <p>The map's MapLibre style. This must be a JSON object conforming to the schema described in the MapLibre Style Specification, or a URL to such JSON. When the style is not specified, calling Map.setStyle is required to render the map.</p>"},{"location":"API/type-aliases/MapOptions/#touchpitch","title":"touchPitch?","text":"<p><code>optional</code> touchPitch: <code>boolean</code> | <code>AroundCenterOptions</code></p> <p>Defined in: src/ui/map.ts:199</p> <p>If <code>true</code>, the \"drag to pitch\" interaction is enabled. An <code>Object</code> value is passed as options to TwoFingersTouchPitchHandler.enable.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_36","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#touchzoomrotate","title":"touchZoomRotate?","text":"<p><code>optional</code> touchZoomRotate: <code>boolean</code> | <code>AroundCenterOptions</code></p> <p>Defined in: src/ui/map.ts:194</p> <p>If <code>true</code>, the \"pinch to rotate and zoom\" interaction is enabled. An <code>Object</code> value is passed as options to TwoFingersTouchZoomRotateHandler.enable.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_37","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#trackresize","title":"trackResize?","text":"<p><code>optional</code> trackResize: <code>boolean</code></p> <p>Defined in: src/ui/map.ts:209</p> <p>If <code>true</code>, the map will automatically resize when the browser window resizes.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_38","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#transformcameraupdate","title":"transformCameraUpdate?","text":"<p><code>optional</code> transformCameraUpdate: <code>CameraUpdateTransformFunction</code> | <code>null</code></p> <p>Defined in: src/ui/map.ts:273</p> <p>A callback run before the map's camera is moved due to user input or animation. The callback can be used to modify the new center, zoom, pitch and bearing. Expected to return an object containing center, zoom, pitch or bearing values to overwrite.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_39","title":"Default Value","text":"<pre><code>null\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#transformconstrain","title":"transformConstrain?","text":"<p><code>optional</code> transformConstrain: <code>TransformConstrainFunction</code> | <code>null</code></p> <p>Defined in: src/ui/map.ts:280</p> <p>A callback that overrides how the map constrains the viewport's lnglat and zoom to respect the longitude and latitude bounds.</p>"},{"location":"API/type-aliases/MapOptions/#see_1","title":"See","text":"<p>Customize the map transform constrain Expected to return an object containing center and zoom.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_40","title":"Default Value","text":"<pre><code>null\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#transformrequest","title":"transformRequest?","text":"<p><code>optional</code> transformRequest: <code>RequestTransformFunction</code> | <code>null</code></p> <p>Defined in: src/ui/map.ts:267</p> <p>A callback run before the Map makes a request for an external URL. The callback can be used to modify the url, set headers, or set the credentials property for cross-origin requests. Expected to return an object with a <code>url</code> property and optionally <code>headers</code> and <code>credentials</code> properties.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_41","title":"Default Value","text":"<pre><code>null\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#validatestyle","title":"validateStyle?","text":"<p><code>optional</code> validateStyle: <code>boolean</code></p> <p>Defined in: src/ui/map.ts:352</p> <p>If false, style validation will be skipped. Useful in production environment.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_42","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/MapOptions/#zoom","title":"zoom?","text":"<p><code>optional</code> zoom: <code>number</code></p> <p>Defined in: src/ui/map.ts:226</p> <p>The initial zoom level of the map. If <code>zoom</code> is not specified in the constructor options, MapLibre GL JS will look for it in the map's style object. If it is not specified in the style, either, it will default to <code>0</code>.</p>"},{"location":"API/type-aliases/MapOptions/#default-value_43","title":"Default Value","text":"<pre><code>0\n</code></pre>"},{"location":"API/type-aliases/MapProjectionEvent/","title":"MapProjectionEvent","text":"<p>MapProjectionEvent = <code>object</code></p> <p>Defined in: src/ui/events.ts:753</p> <p>The map projection event</p>"},{"location":"API/type-aliases/MapProjectionEvent/#properties","title":"Properties","text":""},{"location":"API/type-aliases/MapProjectionEvent/#newprojection","title":"newProjection","text":"<p>newProjection: <code>ProjectionSpecification</code>[<code>\"type\"</code>]</p> <p>Defined in: src/ui/events.ts:763</p> <p>Specifies the name of the new projection. For example:</p> <ul> <li><code>globe</code> to describe globe that has internally switched to mercator</li> <li><code>vertical-perspective</code> to describe a globe that doesn't change to mercator</li> <li><code>mercator</code> to describe mercator projection</li> </ul>"},{"location":"API/type-aliases/MapSourceDataEvent/","title":"MapSourceDataEvent","text":"<p>MapSourceDataEvent = <code>MapLibreEvent</code> &amp; <code>object</code></p> <p>Defined in: src/ui/events.ts:456</p> <p>The source data event interface</p>"},{"location":"API/type-aliases/MapSourceDataEvent/#type-declaration","title":"Type Declaration","text":""},{"location":"API/type-aliases/MapSourceDataEvent/#datatype","title":"dataType","text":"<p>dataType: <code>\"source\"</code></p>"},{"location":"API/type-aliases/MapSourceDataEvent/#issourceloaded","title":"isSourceLoaded","text":"<p>isSourceLoaded: <code>boolean</code></p> <p>True if the event has a <code>dataType</code> of <code>source</code> and the source has no outstanding network requests.</p>"},{"location":"API/type-aliases/MapSourceDataEvent/#source","title":"source","text":"<p>source: <code>SourceSpecification</code></p> <p>The style spec representation of the source if the event has a <code>dataType</code> of <code>source</code>.</p>"},{"location":"API/type-aliases/MapSourceDataEvent/#sourcedatachanged","title":"sourceDataChanged?","text":"<p><code>optional</code> sourceDataChanged: <code>boolean</code></p>"},{"location":"API/type-aliases/MapSourceDataEvent/#sourcedatatype","title":"sourceDataType","text":"<p>sourceDataType: <code>MapSourceDataType</code></p>"},{"location":"API/type-aliases/MapSourceDataEvent/#sourceid","title":"sourceId","text":"<p>sourceId: <code>string</code></p>"},{"location":"API/type-aliases/MapSourceDataEvent/#tile","title":"tile","text":"<p>tile: <code>any</code></p> <p>The tile being loaded or changed, if the event has a <code>dataType</code> of <code>source</code> and the event is related to loading of a tile.</p>"},{"location":"API/type-aliases/MapSourceDataType/","title":"MapSourceDataType","text":"<p>MapSourceDataType = <code>\"content\"</code> | <code>\"metadata\"</code> | <code>\"visibility\"</code> | <code>\"idle\"</code></p> <p>Defined in: src/ui/events.ts:29</p> <p>The source event data type</p>"},{"location":"API/type-aliases/MapStyleDataEvent/","title":"MapStyleDataEvent","text":"<p>MapStyleDataEvent = <code>MapLibreEvent</code> &amp; <code>object</code></p> <p>Defined in: src/ui/events.ts:447</p> <p>The style data event</p>"},{"location":"API/type-aliases/MapStyleDataEvent/#type-declaration","title":"Type Declaration","text":""},{"location":"API/type-aliases/MapStyleDataEvent/#datatype","title":"dataType","text":"<p>dataType: <code>\"style\"</code></p>"},{"location":"API/type-aliases/MapStyleImageMissingEvent/","title":"MapStyleImageMissingEvent","text":"<p>MapStyleImageMissingEvent = <code>MapLibreEvent</code> &amp; <code>object</code></p> <p>Defined in: src/ui/events.ts:783</p> <p>The style image missing event</p>"},{"location":"API/type-aliases/MapStyleImageMissingEvent/#type-declaration","title":"Type Declaration","text":""},{"location":"API/type-aliases/MapStyleImageMissingEvent/#id","title":"id","text":"<p>id: <code>string</code></p>"},{"location":"API/type-aliases/MapStyleImageMissingEvent/#type","title":"type","text":"<p>type: <code>\"styleimagemissing\"</code></p>"},{"location":"API/type-aliases/MapStyleImageMissingEvent/#see","title":"See","text":"<p>Generate and add a missing icon to the map</p>"},{"location":"API/type-aliases/MapTerrainEvent/","title":"MapTerrainEvent","text":"<p>MapTerrainEvent = <code>object</code></p> <p>Defined in: src/ui/events.ts:744</p> <p>The terrain event</p>"},{"location":"API/type-aliases/MarkerOptions/","title":"MarkerOptions","text":"<p>MarkerOptions = <code>object</code></p> <p>Defined in: src/ui/marker.ts:23</p> <p>The Marker options object</p>"},{"location":"API/type-aliases/MarkerOptions/#properties","title":"Properties","text":""},{"location":"API/type-aliases/MarkerOptions/#anchor","title":"anchor?","text":"<p><code>optional</code> anchor: <code>PositionAnchor</code></p> <p>Defined in: src/ui/marker.ts:41</p> <p>A string indicating the part of the Marker that should be positioned closest to the coordinate set via Marker.setLngLat. Options are <code>'center'</code>, <code>'top'</code>, <code>'bottom'</code>, <code>'left'</code>, <code>'right'</code>, <code>'top-left'</code>, <code>'top-right'</code>, <code>'bottom-left'</code>, and <code>'bottom-right'</code>.</p>"},{"location":"API/type-aliases/MarkerOptions/#default-value","title":"Default Value","text":"<pre><code>'center'\n</code></pre>"},{"location":"API/type-aliases/MarkerOptions/#classname","title":"className?","text":"<p><code>optional</code> className: <code>string</code></p> <p>Defined in: src/ui/marker.ts:31</p> <p>Space-separated CSS class names to add to marker element.</p>"},{"location":"API/type-aliases/MarkerOptions/#clicktolerance","title":"clickTolerance?","text":"<p><code>optional</code> clickTolerance: <code>number</code></p> <p>Defined in: src/ui/marker.ts:61</p> <p>The max number of pixels a user can shift the mouse pointer during a click on the marker for it to be considered a valid click (as opposed to a marker drag). The default is to inherit map's clickTolerance.</p>"},{"location":"API/type-aliases/MarkerOptions/#default-value_1","title":"Default Value","text":"<pre><code>0\n</code></pre>"},{"location":"API/type-aliases/MarkerOptions/#color","title":"color?","text":"<p><code>optional</code> color: <code>string</code></p> <p>Defined in: src/ui/marker.ts:46</p> <p>The color to use for the default marker if options.element is not provided. The default is light blue.</p>"},{"location":"API/type-aliases/MarkerOptions/#default-value_2","title":"Default Value","text":"<pre><code>'#3FB1CE'\n</code></pre>"},{"location":"API/type-aliases/MarkerOptions/#draggable","title":"draggable?","text":"<p><code>optional</code> draggable: <code>boolean</code></p> <p>Defined in: src/ui/marker.ts:56</p> <p>A boolean indicating whether or not a marker is able to be dragged to a new position on the map.</p>"},{"location":"API/type-aliases/MarkerOptions/#default-value_3","title":"Default Value","text":"<pre><code>false\n</code></pre>"},{"location":"API/type-aliases/MarkerOptions/#element","title":"element?","text":"<p><code>optional</code> element: <code>HTMLElement</code></p> <p>Defined in: src/ui/marker.ts:27</p> <p>DOM element to use as a marker. The default is a light blue, droplet-shaped SVG marker.</p>"},{"location":"API/type-aliases/MarkerOptions/#offset","title":"offset?","text":"<p><code>optional</code> offset: <code>PointLike</code></p> <p>Defined in: src/ui/marker.ts:35</p> <p>The offset in pixels as a PointLike object to apply relative to the element's center. Negatives indicate left and up.</p>"},{"location":"API/type-aliases/MarkerOptions/#opacity","title":"opacity?","text":"<p><code>optional</code> opacity: <code>string</code></p> <p>Defined in: src/ui/marker.ts:81</p> <p>Marker's opacity when it's in clear view (not behind 3d terrain)</p>"},{"location":"API/type-aliases/MarkerOptions/#default-value_4","title":"Default Value","text":"<pre><code>1\n</code></pre>"},{"location":"API/type-aliases/MarkerOptions/#opacitywhencovered","title":"opacityWhenCovered?","text":"<p><code>optional</code> opacityWhenCovered: <code>string</code></p> <p>Defined in: src/ui/marker.ts:86</p> <p>Marker's opacity when it's behind 3d terrain</p>"},{"location":"API/type-aliases/MarkerOptions/#default-value_5","title":"Default Value","text":"<pre><code>0.2\n</code></pre>"},{"location":"API/type-aliases/MarkerOptions/#pitchalignment","title":"pitchAlignment?","text":"<p><code>optional</code> pitchAlignment: <code>Alignment</code></p> <p>Defined in: src/ui/marker.ts:76</p> <p><code>map</code> aligns the <code>Marker</code> to the plane of the map. <code>viewport</code> aligns the <code>Marker</code> to the plane of the viewport. <code>auto</code> automatically matches the value of <code>rotationAlignment</code>.</p>"},{"location":"API/type-aliases/MarkerOptions/#default-value_6","title":"Default Value","text":"<pre><code>'auto'\n</code></pre>"},{"location":"API/type-aliases/MarkerOptions/#rotation","title":"rotation?","text":"<p><code>optional</code> rotation: <code>number</code></p> <p>Defined in: src/ui/marker.ts:66</p> <p>The rotation angle of the marker in degrees, relative to its respective <code>rotationAlignment</code> setting. A positive value will rotate the marker clockwise.</p>"},{"location":"API/type-aliases/MarkerOptions/#default-value_7","title":"Default Value","text":"<pre><code>0\n</code></pre>"},{"location":"API/type-aliases/MarkerOptions/#rotationalignment","title":"rotationAlignment?","text":"<p><code>optional</code> rotationAlignment: <code>Alignment</code></p> <p>Defined in: src/ui/marker.ts:71</p> <p><code>map</code> aligns the <code>Marker</code>'s rotation relative to the map, maintaining a bearing as the map rotates. <code>viewport</code> aligns the <code>Marker</code>'s rotation relative to the viewport, agnostic to map rotations. <code>auto</code> is equivalent to <code>viewport</code>.</p>"},{"location":"API/type-aliases/MarkerOptions/#default-value_8","title":"Default Value","text":"<pre><code>'auto'\n</code></pre>"},{"location":"API/type-aliases/MarkerOptions/#scale","title":"scale?","text":"<p><code>optional</code> scale: <code>number</code></p> <p>Defined in: src/ui/marker.ts:51</p> <p>The scale to use for the default marker if options.element is not provided. The default scale corresponds to a height of <code>41px</code> and a width of <code>27px</code>.</p>"},{"location":"API/type-aliases/MarkerOptions/#default-value_9","title":"Default Value","text":"<pre><code>1\n</code></pre>"},{"location":"API/type-aliases/MarkerOptions/#subpixelpositioning","title":"subpixelPositioning?","text":"<p><code>optional</code> subpixelPositioning: <code>boolean</code></p> <p>Defined in: src/ui/marker.ts:92</p> <p>If <code>true</code>, rounding is disabled for placement of the marker, allowing for subpixel positioning and smoother movement when the marker is translated.</p>"},{"location":"API/type-aliases/MarkerOptions/#default-value_10","title":"Default Value","text":"<pre><code>false\n</code></pre>"},{"location":"API/type-aliases/NavigationControlOptions/","title":"NavigationControlOptions","text":"<p>NavigationControlOptions = <code>object</code></p> <p>Defined in: src/ui/control/navigation_control.ts:14</p> <p>The NavigationControl options object</p>"},{"location":"API/type-aliases/NavigationControlOptions/#properties","title":"Properties","text":""},{"location":"API/type-aliases/NavigationControlOptions/#showcompass","title":"showCompass?","text":"<p><code>optional</code> showCompass: <code>boolean</code></p> <p>Defined in: src/ui/control/navigation_control.ts:18</p> <p>If <code>true</code> the compass button is included.</p>"},{"location":"API/type-aliases/NavigationControlOptions/#showzoom","title":"showZoom?","text":"<p><code>optional</code> showZoom: <code>boolean</code></p> <p>Defined in: src/ui/control/navigation_control.ts:22</p> <p>If <code>true</code> the zoom-in and zoom-out buttons are included.</p>"},{"location":"API/type-aliases/NavigationControlOptions/#visualizepitch","title":"visualizePitch?","text":"<p><code>optional</code> visualizePitch: <code>boolean</code></p> <p>Defined in: src/ui/control/navigation_control.ts:26</p> <p>If <code>true</code> the pitch is visualized by rotating X-axis of compass.</p>"},{"location":"API/type-aliases/NavigationControlOptions/#visualizeroll","title":"visualizeRoll?","text":"<p><code>optional</code> visualizeRoll: <code>boolean</code></p> <p>Defined in: src/ui/control/navigation_control.ts:30</p> <p>If <code>true</code> the roll is visualized by rotating the compass.</p>"},{"location":"API/type-aliases/Offset/","title":"Offset","text":"<p>Offset = <code>number</code> | <code>PointLike</code> | <code>{ [_ in PositionAnchor]: PointLike }</code></p> <p>Defined in: src/ui/popup.ts:34</p> <p>A pixel offset specified as:</p> <ul> <li>A single number specifying a distance from the location</li> <li>A PointLike specifying a constant offset</li> <li>An object of PointLikes specifying an offset for each anchor position</li> </ul> <p>Negative offsets indicate left and up.</p>"},{"location":"API/type-aliases/PaddingOptions/","title":"PaddingOptions","text":"<p>PaddingOptions = <code>RequireAtLeastOne</code>&lt;{ <code>bottom</code>: <code>number</code>; <code>left</code>: <code>number</code>; <code>right</code>: <code>number</code>; <code>top</code>: <code>number</code>; }&gt;</p> <p>Defined in: src/geo/edge_insets.ts:129</p> <p>Options for setting padding on calls to methods such as Map.fitBounds, Map.fitScreenCoordinates, and Map.setPadding. Adjust these options to set the amount of padding in pixels added to the edges of the canvas. Set a uniform padding on all edges or individual values for each edge. All properties of this object must be non-negative integers.</p>"},{"location":"API/type-aliases/PaddingOptions/#examples","title":"Examples","text":"<pre><code>let bbox = [[-79, 43], [-73, 45]];\nmap.fitBounds(bbox, {\n  padding: {top: 10, bottom:25, left: 15, right: 5}\n});\n</code></pre> <pre><code>let bbox = [[-79, 43], [-73, 45]];\nmap.fitBounds(bbox, {\n  padding: 20\n});\n</code></pre>"},{"location":"API/type-aliases/PaddingOptions/#see","title":"See","text":"<ul> <li>Fit to the bounds of a LineString</li> <li>Fit a map to a bounding box</li> </ul>"},{"location":"API/type-aliases/PointLike/","title":"PointLike","text":"<p>PointLike = <code>Point</code> | [<code>number</code>, <code>number</code>]</p> <p>Defined in: src/ui/camera.ts:31</p> <p>A Point or an array of two numbers representing <code>x</code> and <code>y</code> screen coordinates in pixels.</p>"},{"location":"API/type-aliases/PointLike/#example","title":"Example","text":"<pre><code>let p1 = new Point(-77, 38); // a PointLike which is a Point\nlet p2 = [-77, 38]; // a PointLike which is an array of two numbers\n</code></pre>"},{"location":"API/type-aliases/PopupOptions/","title":"PopupOptions","text":"<p>PopupOptions = <code>object</code></p> <p>Defined in: src/ui/popup.ts:41</p> <p>The Popup options object</p>"},{"location":"API/type-aliases/PopupOptions/#properties","title":"Properties","text":""},{"location":"API/type-aliases/PopupOptions/#anchor","title":"anchor?","text":"<p><code>optional</code> anchor: <code>PositionAnchor</code></p> <p>Defined in: src/ui/popup.ts:70</p> <p>A string indicating the part of the Popup that should be positioned closest to the coordinate set via Popup.setLngLat. Options are <code>'center'</code>, <code>'top'</code>, <code>'bottom'</code>, <code>'left'</code>, <code>'right'</code>, <code>'top-left'</code>, <code>'top-right'</code>, <code>'bottom-left'</code>, and <code>'bottom-right'</code>. If unset the anchor will be dynamically set to ensure the popup falls within the map container with a preference for <code>'bottom'</code>.</p>"},{"location":"API/type-aliases/PopupOptions/#classname","title":"className?","text":"<p><code>optional</code> className: <code>string</code></p> <p>Defined in: src/ui/popup.ts:78</p> <p>Space-separated CSS class names to add to popup container</p>"},{"location":"API/type-aliases/PopupOptions/#closebutton","title":"closeButton?","text":"<p><code>optional</code> closeButton: <code>boolean</code></p> <p>Defined in: src/ui/popup.ts:46</p> <p>If <code>true</code>, a close button will appear in the top right corner of the popup.</p>"},{"location":"API/type-aliases/PopupOptions/#default-value","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/PopupOptions/#closeonclick","title":"closeOnClick?","text":"<p><code>optional</code> closeOnClick: <code>boolean</code></p> <p>Defined in: src/ui/popup.ts:51</p> <p>If <code>true</code>, the popup will closed when the map is clicked.</p>"},{"location":"API/type-aliases/PopupOptions/#default-value_1","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/PopupOptions/#closeonmove","title":"closeOnMove?","text":"<p><code>optional</code> closeOnMove: <code>boolean</code></p> <p>Defined in: src/ui/popup.ts:56</p> <p>If <code>true</code>, the popup will closed when the map moves.</p>"},{"location":"API/type-aliases/PopupOptions/#default-value_2","title":"Default Value","text":"<pre><code>false\n</code></pre>"},{"location":"API/type-aliases/PopupOptions/#focusafteropen","title":"focusAfterOpen?","text":"<p><code>optional</code> focusAfterOpen: <code>boolean</code></p> <p>Defined in: src/ui/popup.ts:61</p> <p>If <code>true</code>, the popup will try to focus the first focusable element inside the popup.</p>"},{"location":"API/type-aliases/PopupOptions/#default-value_3","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/PopupOptions/#locationoccludedopacity","title":"locationOccludedOpacity?","text":"<p><code>optional</code> locationOccludedOpacity: <code>number</code> | <code>string</code></p> <p>Defined in: src/ui/popup.ts:97</p> <p>Optional opacity when the location is behind the globe. Note that if a number is provided, it will be converted to a string.</p>"},{"location":"API/type-aliases/PopupOptions/#default-value_4","title":"Default Value","text":"<pre><code>undefined\n</code></pre>"},{"location":"API/type-aliases/PopupOptions/#maxwidth","title":"maxWidth?","text":"<p><code>optional</code> maxWidth: <code>string</code></p> <p>Defined in: src/ui/popup.ts:85</p> <p>A string that sets the CSS property of the popup's maximum width, eg <code>'300px'</code>. To ensure the popup resizes to fit its content, set this property to <code>'none'</code>. Available values can be found here: https://developer.mozilla.org/en-US/docs/Web/CSS/max-width</p>"},{"location":"API/type-aliases/PopupOptions/#default-value_5","title":"Default Value","text":"<pre><code>'240px'\n</code></pre>"},{"location":"API/type-aliases/PopupOptions/#offset","title":"offset?","text":"<p><code>optional</code> offset: <code>Offset</code></p> <p>Defined in: src/ui/popup.ts:74</p> <p>A pixel offset applied to the popup's location</p>"},{"location":"API/type-aliases/PopupOptions/#subpixelpositioning","title":"subpixelPositioning?","text":"<p><code>optional</code> subpixelPositioning: <code>boolean</code></p> <p>Defined in: src/ui/popup.ts:91</p> <p>If <code>true</code>, rounding is disabled for placement of the popup, allowing for subpixel positioning and smoother movement when the popup is translated.</p>"},{"location":"API/type-aliases/PopupOptions/#default-value_6","title":"Default Value","text":"<pre><code>false\n</code></pre>"},{"location":"API/type-aliases/PositionAnchor/","title":"PositionAnchor","text":"<p>PositionAnchor = <code>\"center\"</code> | <code>\"top\"</code> | <code>\"bottom\"</code> | <code>\"left\"</code> | <code>\"right\"</code> | <code>\"top-left\"</code> | <code>\"top-right\"</code> | <code>\"bottom-left\"</code> | <code>\"bottom-right\"</code></p> <p>Defined in: src/ui/anchor.ts:5</p> <p>Where to position the anchor. Used by a popup and a marker.</p>"},{"location":"API/type-aliases/ProjectionData/","title":"ProjectionData","text":"<p>ProjectionData = <code>object</code></p> <p>Defined in: src/geo/projection/projection_data.ts:8</p> <p>This type contains all data necessary to project a tile to screen in MapLibre's shader system. Contains data used for both mercator and globe projection.</p>"},{"location":"API/type-aliases/ProjectionData/#properties","title":"Properties","text":""},{"location":"API/type-aliases/ProjectionData/#clippingplane","title":"clippingPlane","text":"<p>clippingPlane: [<code>number</code>, <code>number</code>, <code>number</code>, <code>number</code>]</p> <p>Defined in: src/geo/projection/projection_data.ts:34</p> <p>The plane equation for a plane that intersects the planet's horizon. Assumes the planet to be a unit sphere. Used by globe projection for clipping. Uniform name: <code>u_projection_clipping_plane</code>.</p>"},{"location":"API/type-aliases/ProjectionData/#fallbackmatrix","title":"fallbackMatrix","text":"<p>fallbackMatrix: <code>mat4</code></p> <p>Defined in: src/geo/projection/projection_data.ts:46</p> <p>Fallback matrix that projects the current tile according to mercator projection. Used by globe projection to fall back to mercator projection in an animated way. Uniform name: <code>u_projection_fallback_matrix</code>.</p>"},{"location":"API/type-aliases/ProjectionData/#mainmatrix","title":"mainMatrix","text":"<p>mainMatrix: <code>mat4</code></p> <p>Defined in: src/geo/projection/projection_data.ts:14</p> <p>The main projection matrix. For mercator projection, it usually projects in-tile coordinates 0..EXTENT to screen, for globe projection, it projects a unit sphere planet to screen. Uniform name: <code>u_projection_matrix</code>.</p>"},{"location":"API/type-aliases/ProjectionData/#projectiontransition","title":"projectionTransition","text":"<p>projectionTransition: <code>number</code></p> <p>Defined in: src/geo/projection/projection_data.ts:40</p> <p>A value in range 0..1 indicating interpolation between mercator (0) and globe (1) projections. Used by globe projection to hide projection transition at high zooms. Uniform name: <code>u_projection_transition</code>.</p>"},{"location":"API/type-aliases/ProjectionData/#tilemercatorcoords","title":"tileMercatorCoords","text":"<p>tileMercatorCoords: [<code>number</code>, <code>number</code>, <code>number</code>, <code>number</code>]</p> <p>Defined in: src/geo/projection/projection_data.ts:27</p> <p>The extent of current tile in the mercator square. Used by globe projection. First two components are X and Y offset, last two are X and Y scale. Uniform name: <code>u_projection_tile_mercator_coords</code>.</p> <p>Conversion from in-tile coordinates in range 0..EXTENT is done as follows:</p>"},{"location":"API/type-aliases/ProjectionData/#example","title":"Example","text":"<pre><code>vec2 mercator_coords = u_projection_tile_mercator_coords.xy + in_tile.xy * u_projection_tile_mercator_coords.zw;\n</code></pre>"},{"location":"API/type-aliases/QueryRenderedFeaturesOptions/","title":"QueryRenderedFeaturesOptions","text":"<p>QueryRenderedFeaturesOptions = <code>object</code></p> <p>Defined in: src/source/query_features.ts:21</p> <p>Options to pass to query the map for the rendered features</p>"},{"location":"API/type-aliases/QueryRenderedFeaturesOptions/#properties","title":"Properties","text":""},{"location":"API/type-aliases/QueryRenderedFeaturesOptions/#availableimages","title":"availableImages?","text":"<p><code>optional</code> availableImages: <code>string</code>[]</p> <p>Defined in: src/source/query_features.ts:34</p> <p>An array of string representing the available images</p>"},{"location":"API/type-aliases/QueryRenderedFeaturesOptions/#filter","title":"filter?","text":"<p><code>optional</code> filter: <code>FilterSpecification</code></p> <p>Defined in: src/source/query_features.ts:30</p> <p>A filter to limit query results.</p>"},{"location":"API/type-aliases/QueryRenderedFeaturesOptions/#layers","title":"layers?","text":"<p><code>optional</code> layers: <code>string</code>[] | <code>Set</code>&lt;<code>string</code>&gt;</p> <p>Defined in: src/source/query_features.ts:26</p> <p>An array or set of style layer IDs for the query to inspect. Only features within these layers will be returned. If this parameter is undefined, all layers will be checked.</p>"},{"location":"API/type-aliases/QueryRenderedFeaturesOptions/#validate","title":"validate?","text":"<p><code>optional</code> validate: <code>boolean</code></p> <p>Defined in: src/source/query_features.ts:38</p> <p>Whether to check if the [options.filter] conforms to the MapLibre Style Specification. Disabling validation is a performance optimization that should only be used if you have previously validated the values you will be passing to this function.</p>"},{"location":"API/type-aliases/QuerySourceFeatureOptions/","title":"QuerySourceFeatureOptions","text":"<p>QuerySourceFeatureOptions = <code>object</code></p> <p>Defined in: src/source/query_features.ts:53</p> <p>The options object related to the Map.querySourceFeatures method</p>"},{"location":"API/type-aliases/QuerySourceFeatureOptions/#properties","title":"Properties","text":""},{"location":"API/type-aliases/QuerySourceFeatureOptions/#filter","title":"filter?","text":"<p><code>optional</code> filter: <code>FilterSpecification</code></p> <p>Defined in: src/source/query_features.ts:62</p> <p>A filter to limit query results.</p>"},{"location":"API/type-aliases/QuerySourceFeatureOptions/#sourcelayer","title":"sourceLayer?","text":"<p><code>optional</code> sourceLayer: <code>string</code></p> <p>Defined in: src/source/query_features.ts:57</p> <p>The name of the source layer to query. For vector tile sources, this parameter is required. For GeoJSON sources, it is ignored.</p>"},{"location":"API/type-aliases/QuerySourceFeatureOptions/#validate","title":"validate?","text":"<p><code>optional</code> validate: <code>boolean</code></p> <p>Defined in: src/source/query_features.ts:67</p> <p>Whether to check if the [parameters.filter] conforms to the MapLibre Style Specification. Disabling validation is a performance optimization that should only be used if you have previously validated the values you will be passing to this function.</p>"},{"location":"API/type-aliases/QuerySourceFeatureOptions/#default-value","title":"Default Value","text":"<pre><code>true\n</code></pre>"},{"location":"API/type-aliases/RequestParameters/","title":"RequestParameters","text":"<p>RequestParameters = <code>object</code></p> <p>Defined in: src/util/ajax.ts:32</p> <p>A <code>RequestParameters</code> object to be returned from Map.options.transformRequest callbacks.</p>"},{"location":"API/type-aliases/RequestParameters/#example","title":"Example","text":"<pre><code>// use transformRequest to modify requests that begin with `http://myHost`\ntransformRequest: function(url, resourceType) {\n if (resourceType === 'Source' &amp;&amp; url.indexOf('http://myHost') &gt; -1) {\n   return {\n     url: url.replace('http', 'https'),\n     headers: { 'my-custom-header': true },\n     credentials: 'include'  // Include cookies for cross-origin requests\n   }\n  }\n}\n</code></pre>"},{"location":"API/type-aliases/RequestParameters/#properties","title":"Properties","text":""},{"location":"API/type-aliases/RequestParameters/#body","title":"body?","text":"<p><code>optional</code> body: <code>string</code></p> <p>Defined in: src/util/ajax.ts:48</p> <p>Request body.</p>"},{"location":"API/type-aliases/RequestParameters/#cache","title":"cache?","text":"<p><code>optional</code> cache: <code>RequestCache</code></p> <p>Defined in: src/util/ajax.ts:64</p> <p>Parameters supported only by browser fetch API. Property of the Request interface contains the cache mode of the request. It controls how the request will interact with the browser's HTTP cache. (https://developer.mozilla.org/en-US/docs/Web/API/Request/cache)</p>"},{"location":"API/type-aliases/RequestParameters/#collectresourcetiming","title":"collectResourceTiming?","text":"<p><code>optional</code> collectResourceTiming: <code>boolean</code></p> <p>Defined in: src/util/ajax.ts:60</p> <p>If <code>true</code>, Resource Timing API information will be collected for these transformed requests and returned in a resourceTiming property of relevant data events.</p>"},{"location":"API/type-aliases/RequestParameters/#credentials","title":"credentials?","text":"<p><code>optional</code> credentials: <code>\"same-origin\"</code> | <code>\"include\"</code></p> <p>Defined in: src/util/ajax.ts:56</p> <p><code>'same-origin'|'include'</code> Use 'include' to send cookies with cross-origin requests.</p>"},{"location":"API/type-aliases/RequestParameters/#headers","title":"headers?","text":"<p><code>optional</code> headers: <code>any</code></p> <p>Defined in: src/util/ajax.ts:40</p> <p>The headers to be sent with the request.</p>"},{"location":"API/type-aliases/RequestParameters/#method","title":"method?","text":"<p><code>optional</code> method: <code>\"GET\"</code> | <code>\"POST\"</code> | <code>\"PUT\"</code></p> <p>Defined in: src/util/ajax.ts:44</p> <p>Request method <code>'GET' | 'POST' | 'PUT'</code>.</p>"},{"location":"API/type-aliases/RequestParameters/#type","title":"type?","text":"<p><code>optional</code> type: <code>\"string\"</code> | <code>\"json\"</code> | <code>\"arrayBuffer\"</code> | <code>\"image\"</code></p> <p>Defined in: src/util/ajax.ts:52</p> <p>Response body type to be returned.</p>"},{"location":"API/type-aliases/RequestParameters/#url","title":"url","text":"<p>url: <code>string</code></p> <p>Defined in: src/util/ajax.ts:36</p> <p>The URL to be requested.</p>"},{"location":"API/type-aliases/RequestResponseMessageMap/","title":"RequestResponseMessageMap","text":"<p>RequestResponseMessageMap = <code>object</code></p> <p>Defined in: src/util/actor_messages.ts:134</p> <p>This is basically a mapping between all the calls that are made to and from the workers. The key is the event name, the first parameter is the event input type, and the last parameter is the output type.</p>"},{"location":"API/type-aliases/RequestTransformFunction/","title":"RequestTransformFunction()","text":"<p>RequestTransformFunction = (<code>url</code>: <code>string</code>, <code>resourceType?</code>: <code>ResourceType</code>) =&gt; <code>RequestParameters</code> | <code>undefined</code></p> <p>Defined in: src/util/request_manager.ts:21</p> <p>This function is used to tranform a request. It is used just before executing the relevant request.</p>"},{"location":"API/type-aliases/RequestTransformFunction/#parameters","title":"Parameters","text":"Parameter Type <code>url</code> <code>string</code> <code>resourceType?</code> <code>ResourceType</code>"},{"location":"API/type-aliases/RequestTransformFunction/#returns","title":"Returns","text":"<p><code>RequestParameters</code> | <code>undefined</code></p>"},{"location":"API/type-aliases/RequireAtLeastOne/","title":"RequireAtLeastOne&lt;T&gt;","text":"<p>RequireAtLeastOne&lt;<code>T</code>&gt; = <code>{ [K in keyof T]-?: Required&lt;Pick&lt;T, K&gt;&gt; &amp; Partial&lt;Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;&gt; }</code>[keyof <code>T</code>]</p> <p>Defined in: src/util/util.ts:1087</p> <p>A helper to allow require of at least one property</p>"},{"location":"API/type-aliases/RequireAtLeastOne/#type-parameters","title":"Type Parameters","text":"Type Parameter <code>T</code>"},{"location":"API/type-aliases/ScaleControlOptions/","title":"ScaleControlOptions","text":"<p>ScaleControlOptions = <code>object</code></p> <p>Defined in: src/ui/control/scale_control.ts:14</p> <p>The ScaleControl options object</p>"},{"location":"API/type-aliases/ScaleControlOptions/#properties","title":"Properties","text":""},{"location":"API/type-aliases/ScaleControlOptions/#maxwidth","title":"maxWidth?","text":"<p><code>optional</code> maxWidth: <code>number</code></p> <p>Defined in: src/ui/control/scale_control.ts:19</p> <p>The maximum length of the scale control in pixels.</p>"},{"location":"API/type-aliases/ScaleControlOptions/#default-value","title":"Default Value","text":"<pre><code>100\n</code></pre>"},{"location":"API/type-aliases/ScaleControlOptions/#unit","title":"unit?","text":"<p><code>optional</code> unit: <code>Unit</code></p> <p>Defined in: src/ui/control/scale_control.ts:24</p> <p>Unit of the distance (<code>'imperial'</code>, <code>'metric'</code> or <code>'nautical'</code>).</p>"},{"location":"API/type-aliases/ScaleControlOptions/#default-value_1","title":"Default Value","text":"<pre><code>'metric'\n</code></pre>"},{"location":"API/type-aliases/SetClusterOptions/","title":"SetClusterOptions","text":"<p>SetClusterOptions = <code>object</code></p> <p>Defined in: src/source/geojson_source.ts:42</p> <p>The cluster options to set</p>"},{"location":"API/type-aliases/SetClusterOptions/#properties","title":"Properties","text":""},{"location":"API/type-aliases/SetClusterOptions/#cluster","title":"cluster?","text":"<p><code>optional</code> cluster: <code>boolean</code></p> <p>Defined in: src/source/geojson_source.ts:46</p> <p>Whether or not to cluster</p>"},{"location":"API/type-aliases/SetClusterOptions/#clustermaxzoom","title":"clusterMaxZoom?","text":"<p><code>optional</code> clusterMaxZoom: <code>number</code></p> <p>Defined in: src/source/geojson_source.ts:51</p> <p>The cluster's max zoom. Non-integer values are rounded to the closest integer due to supercluster integer value requirements.</p>"},{"location":"API/type-aliases/SetClusterOptions/#clusterradius","title":"clusterRadius?","text":"<p><code>optional</code> clusterRadius: <code>number</code></p> <p>Defined in: src/source/geojson_source.ts:55</p> <p>The cluster's radius</p>"},{"location":"API/type-aliases/SourceClass/","title":"SourceClass()","text":"<p>SourceClass = (<code>id</code>: <code>string</code>, <code>specification</code>: <code>SourceSpecification</code> | <code>CanvasSourceSpecification</code>, <code>dispatcher</code>: <code>Dispatcher</code>, <code>eventedParent</code>: <code>Evented</code>) =&gt; <code>Source</code></p> <p>Defined in: src/source/source.ts:129</p> <p>A general definition of a Source class for factory usage</p>"},{"location":"API/type-aliases/SourceClass/#parameters","title":"Parameters","text":"Parameter Type <code>id</code> <code>string</code> <code>specification</code> <code>SourceSpecification</code> | <code>CanvasSourceSpecification</code> <code>dispatcher</code> <code>Dispatcher</code> <code>eventedParent</code> <code>Evented</code>"},{"location":"API/type-aliases/SourceClass/#returns","title":"Returns","text":"<p><code>Source</code></p>"},{"location":"API/type-aliases/StyleGlyph/","title":"StyleGlyph","text":"<p>StyleGlyph = <code>object</code></p> <p>Defined in: src/style/style_glyph.ts:21</p> <p>A style glyph type</p>"},{"location":"API/type-aliases/StyleImage/","title":"StyleImage","text":"<p>StyleImage = <code>StyleImageData</code> &amp; <code>StyleImageMetadata</code></p> <p>Defined in: src/style/style_image.ts:92</p> <p>the style's image, including data and metedata</p>"},{"location":"API/type-aliases/StyleImageData/","title":"StyleImageData","text":"<p>StyleImageData = <code>object</code></p> <p>Defined in: src/style/style_image.ts:26</p> <p>The style's image metadata</p>"},{"location":"API/type-aliases/StyleImageMetadata/","title":"StyleImageMetadata","text":"<p>StyleImageMetadata = <code>object</code></p> <p>Defined in: src/style/style_image.ts:58</p> <p>The style's image metadata</p>"},{"location":"API/type-aliases/StyleImageMetadata/#properties","title":"Properties","text":""},{"location":"API/type-aliases/StyleImageMetadata/#content","title":"content?","text":"<p><code>optional</code> content: [<code>number</code>, <code>number</code>, <code>number</code>, <code>number</code>]</p> <p>Defined in: src/style/style_image.ts:78</p> <p>If <code>icon-text-fit</code> is used in a layer with this image, this option defines the part of the image that can be covered by the content in <code>text-field</code>.</p>"},{"location":"API/type-aliases/StyleImageMetadata/#pixelratio","title":"pixelRatio","text":"<p>pixelRatio: <code>number</code></p> <p>Defined in: src/style/style_image.ts:62</p> <p>The ratio of pixels in the image to physical pixels on the screen</p>"},{"location":"API/type-aliases/StyleImageMetadata/#sdf","title":"sdf","text":"<p>sdf: <code>boolean</code></p> <p>Defined in: src/style/style_image.ts:66</p> <p>Whether the image should be interpreted as an SDF image</p>"},{"location":"API/type-aliases/StyleImageMetadata/#stretchx","title":"stretchX?","text":"<p><code>optional</code> stretchX: [<code>number</code>, <code>number</code>][]</p> <p>Defined in: src/style/style_image.ts:70</p> <p>If <code>icon-text-fit</code> is used in a layer with this image, this option defines the part(s) of the image that can be stretched horizontally.</p>"},{"location":"API/type-aliases/StyleImageMetadata/#stretchy","title":"stretchY?","text":"<p><code>optional</code> stretchY: [<code>number</code>, <code>number</code>][]</p> <p>Defined in: src/style/style_image.ts:74</p> <p>If <code>icon-text-fit</code> is used in a layer with this image, this option defines the part(s) of the image that can be stretched vertically.</p>"},{"location":"API/type-aliases/StyleImageMetadata/#textfitheight","title":"textFitHeight?","text":"<p><code>optional</code> textFitHeight: <code>TextFit</code></p> <p>Defined in: src/style/style_image.ts:86</p> <p>If <code>icon-text-fit</code> is used in a layer with this image, this option defines constraints on the vertical scaling of the image.</p>"},{"location":"API/type-aliases/StyleImageMetadata/#textfitwidth","title":"textFitWidth?","text":"<p><code>optional</code> textFitWidth: <code>TextFit</code></p> <p>Defined in: src/style/style_image.ts:82</p> <p>If <code>icon-text-fit</code> is used in a layer with this image, this option defines constraints on the horizontal scaling of the image.</p>"},{"location":"API/type-aliases/StyleOptions/","title":"StyleOptions","text":"<p>StyleOptions = <code>object</code></p> <p>Defined in: src/style/style.ts:98</p> <p>The options object related to the Map's style related methods</p>"},{"location":"API/type-aliases/StyleOptions/#properties","title":"Properties","text":""},{"location":"API/type-aliases/StyleOptions/#localideographfontfamily","title":"localIdeographFontFamily?","text":"<p><code>optional</code> localIdeographFontFamily: <code>string</code> | <code>false</code></p> <p>Defined in: src/style/style.ts:110</p> <p>Defines a CSS font-family for locally overriding generation of Chinese, Japanese, and Korean characters. For these characters, font settings from the map's style will be ignored, except for font-weight keywords (light/regular/medium/bold). Set to <code>false</code>, to enable font settings from the map's style for these glyph ranges. Forces a full update.</p>"},{"location":"API/type-aliases/StyleOptions/#validate","title":"validate?","text":"<p><code>optional</code> validate: <code>boolean</code></p> <p>Defined in: src/style/style.ts:102</p> <p>If false, style validation will be skipped. Useful in production environment.</p>"},{"location":"API/type-aliases/StyleSetterOptions/","title":"StyleSetterOptions","text":"<p>StyleSetterOptions = <code>object</code></p> <p>Defined in: src/style/style.ts:116</p> <p>Supporting type to add validation to another style related type</p>"},{"location":"API/type-aliases/StyleSetterOptions/#properties","title":"Properties","text":""},{"location":"API/type-aliases/StyleSetterOptions/#validate","title":"validate?","text":"<p><code>optional</code> validate: <code>boolean</code></p> <p>Defined in: src/style/style.ts:120</p> <p>Whether to check if the filter conforms to the MapLibre Style Specification. Disabling validation is a performance optimization that should only be used if you have previously validated the values you will be passing to this function.</p>"},{"location":"API/type-aliases/StyleSwapOptions/","title":"StyleSwapOptions","text":"<p>StyleSwapOptions = <code>object</code></p> <p>Defined in: src/style/style.ts:183</p> <p>The options object related to the Map's style related methods</p>"},{"location":"API/type-aliases/StyleSwapOptions/#properties","title":"Properties","text":""},{"location":"API/type-aliases/StyleSwapOptions/#diff","title":"diff?","text":"<p><code>optional</code> diff: <code>boolean</code></p> <p>Defined in: src/style/style.ts:188</p> <p>If false, force a 'full' update, removing the current style and building the given one instead of attempting a diff-based update.</p>"},{"location":"API/type-aliases/StyleSwapOptions/#transformstyle","title":"transformStyle?","text":"<p><code>optional</code> transformStyle: <code>TransformStyleFunction</code></p> <p>Defined in: src/style/style.ts:193</p> <p>TransformStyleFunction is a convenience function that allows to modify a style after it is fetched but before it is committed to the map state. Refer to TransformStyleFunction.</p>"},{"location":"API/type-aliases/TileMesh/","title":"TileMesh","text":"<p>TileMesh = <code>object</code></p> <p>Defined in: src/util/create_tile_mesh.ts:47</p> <p>Stores the prepared vertex and index buffer bytes for a mesh.</p>"},{"location":"API/type-aliases/TileMesh/#properties","title":"Properties","text":""},{"location":"API/type-aliases/TileMesh/#indices","title":"indices","text":"<p>indices: <code>ArrayBuffer</code></p> <p>Defined in: src/util/create_tile_mesh.ts:56</p> <p>The index data. Each triangle is defined by three indices. The indices may either be 16 bit or 32 bit unsigned integers, depending on the mesh creation arguments and on whether the mesh can fit into 16 bit indices.</p>"},{"location":"API/type-aliases/TileMesh/#uses32bitindices","title":"uses32bitIndices","text":"<p>uses32bitIndices: <code>boolean</code></p> <p>Defined in: src/util/create_tile_mesh.ts:60</p> <p>A helper boolean indicating whether the indices are 32 bit.</p>"},{"location":"API/type-aliases/TileMesh/#vertices","title":"vertices","text":"<p>vertices: <code>ArrayBuffer</code></p> <p>Defined in: src/util/create_tile_mesh.ts:51</p> <p>The vertex data. Each vertex is two 16 bit signed integers, one for X, one for Y.</p>"},{"location":"API/type-aliases/TransformConstrainFunction/","title":"TransformConstrainFunction()","text":"<p>TransformConstrainFunction = (<code>lngLat</code>: <code>LngLat</code>, <code>zoom</code>: <code>number</code>) =&gt; <code>object</code></p> <p>Defined in: src/geo/transform_interface.ts:18</p> <p>The callback defining how the transform constrains the viewport's lnglat and zoom to respect the longitude and latitude bounds.</p>"},{"location":"API/type-aliases/TransformConstrainFunction/#parameters","title":"Parameters","text":"Parameter Type <code>lngLat</code> <code>LngLat</code> <code>zoom</code> <code>number</code>"},{"location":"API/type-aliases/TransformConstrainFunction/#returns","title":"Returns","text":"<p><code>object</code></p>"},{"location":"API/type-aliases/TransformConstrainFunction/#center","title":"center","text":"<p>center: <code>LngLat</code></p>"},{"location":"API/type-aliases/TransformConstrainFunction/#zoom","title":"zoom","text":"<p>zoom: <code>number</code></p>"},{"location":"API/type-aliases/TransformConstrainFunction/#see","title":"See","text":"<p>Customize the map transform constrain</p>"},{"location":"API/type-aliases/TransformStyleFunction/","title":"TransformStyleFunction()","text":"<p>TransformStyleFunction = (<code>previous</code>: <code>StyleSpecification</code> | <code>undefined</code>, <code>next</code>: <code>StyleSpecification</code>) =&gt; <code>StyleSpecification</code></p> <p>Defined in: src/style/style.ts:178</p> <p>Part of Map.setStyle options, transformStyle is a convenience function that allows to modify a style after it is fetched but before it is committed to the map state.</p> <p>This function exposes previous and next styles, it can be commonly used to support a range of functionalities like:</p> <ul> <li>when previous style carries certain 'state' that needs to be carried over to a new style gracefully;</li> <li>when a desired style is a certain combination of previous and incoming style;</li> <li>when an incoming style requires modification based on external state.</li> <li>when an incoming style uses relative paths, which need to be converted to absolute.</li> </ul>"},{"location":"API/type-aliases/TransformStyleFunction/#parameters","title":"Parameters","text":"Parameter Type Description <code>previous</code> <code>StyleSpecification</code> | <code>undefined</code> The current style. <code>next</code> <code>StyleSpecification</code> The next style."},{"location":"API/type-aliases/TransformStyleFunction/#returns","title":"Returns","text":"<p><code>StyleSpecification</code></p> <p>resulting style that will to be applied to the map</p>"},{"location":"API/type-aliases/TransformStyleFunction/#example","title":"Example","text":"<pre><code>map.setStyle('https://demotiles.maplibre.org/style.json', {\n  transformStyle: (previousStyle, nextStyle) =&gt; ({\n      ...nextStyle,\n      // make relative sprite path like \"../sprite\" absolute\n      sprite: new URL(nextStyle.sprite, \"https://demotiles.maplibre.org/styles/osm-bright-gl-style/sprites/\").href,\n      // make relative glyphs path like \"../fonts/{fontstack}/{range}.pbf\" absolute\n      glyphs: new URL(nextStyle.glyphs, \"https://demotiles.maplibre.org/font/\").href,\n      sources: {\n          // make relative vector url like \"../../\" absolute\n          ...nextStyle.sources.map(source =&gt; {\n             if (source.url) {\n                 source.url = new URL(source.url, \"https://tiles.openfreemap.org/planet\");\n             }\n             return source;\n          }),\n          // copy a source from previous style\n          'osm': previousStyle.sources.osm\n      },\n      layers: [\n          // background layer\n          nextStyle.layers[0],\n          // copy a layer from previous style\n          previousStyle.layers[0],\n          // other layers from the next style\n          ...nextStyle.layers.slice(1).map(layer =&gt; {\n              // hide the layers we don't need from demotiles style\n              if (layer.id.startsWith('geolines')) {\n                  layer.layout = {...layer.layout || {}, visibility: 'none'};\n              // filter out US polygons\n              } else if (layer.id.startsWith('coastline') || layer.id.startsWith('countries')) {\n                  layer.filter = ['!=', ['get', 'ADM0_A3'], 'USA'];\n              }\n              return layer;\n          })\n      ]\n  })\n});\n</code></pre>"},{"location":"API/type-aliases/Unit/","title":"Unit","text":"<p>Unit = <code>\"imperial\"</code> | <code>\"metric\"</code> | <code>\"nautical\"</code></p> <p>Defined in: src/ui/control/scale_control.ts:9</p> <p>The unit type for length to use for the ScaleControl</p>"},{"location":"API/type-aliases/UpdateImageOptions/","title":"UpdateImageOptions","text":"<p>UpdateImageOptions = <code>object</code></p> <p>Defined in: src/source/image_source.ts:32</p> <p>The options object for the ImageSource.updateImage method</p>"},{"location":"API/type-aliases/UpdateImageOptions/#properties","title":"Properties","text":""},{"location":"API/type-aliases/UpdateImageOptions/#coordinates","title":"coordinates?","text":"<p><code>optional</code> coordinates: <code>Coordinates</code></p> <p>Defined in: src/source/image_source.ts:40</p> <p>The image coordinates</p>"},{"location":"API/type-aliases/UpdateImageOptions/#url","title":"url","text":"<p>url: <code>string</code></p> <p>Defined in: src/source/image_source.ts:36</p> <p>Required image URL.</p>"},{"location":"API/type-aliases/WorkerTileResult/","title":"WorkerTileResult","text":"<p>WorkerTileResult = <code>ExpiryData</code> &amp; <code>object</code></p> <p>Defined in: src/source/worker_source.ts:60</p> <p>The worker tile's result type</p>"},{"location":"API/type-aliases/WorkerTileResult/#type-declaration","title":"Type Declaration","text":""},{"location":"API/type-aliases/WorkerTileResult/#buckets","title":"buckets","text":"<p>buckets: <code>Bucket</code>[]</p>"},{"location":"API/type-aliases/WorkerTileResult/#collisionboxarray","title":"collisionBoxArray","text":"<p>collisionBoxArray: <code>CollisionBoxArray</code></p>"},{"location":"API/type-aliases/WorkerTileResult/#dashpositions","title":"dashPositions","text":"<p>dashPositions: <code>Record</code>&lt;<code>string</code>, <code>DashEntry</code>&gt;</p>"},{"location":"API/type-aliases/WorkerTileResult/#featureindex","title":"featureIndex","text":"<p>featureIndex: <code>FeatureIndex</code></p>"},{"location":"API/type-aliases/WorkerTileResult/#glyphatlasimage","title":"glyphAtlasImage","text":"<p>glyphAtlasImage: <code>AlphaImage</code></p>"},{"location":"API/type-aliases/WorkerTileResult/#glyphmap","title":"glyphMap?","text":"<p><code>optional</code> glyphMap: {[<code>_</code>: <code>string</code>]: <code>object</code>; } | <code>null</code></p>"},{"location":"API/type-aliases/WorkerTileResult/#glyphpositions","title":"glyphPositions?","text":"<p><code>optional</code> glyphPositions: <code>GlyphPositions</code> | <code>null</code></p>"},{"location":"API/type-aliases/WorkerTileResult/#iconmap","title":"iconMap?","text":"<p><code>optional</code> iconMap: {[<code>_</code>: <code>string</code>]: <code>StyleImage</code>; } | <code>null</code></p>"},{"location":"API/type-aliases/WorkerTileResult/#imageatlas","title":"imageAtlas","text":"<p>imageAtlas: <code>ImageAtlas</code></p>"},{"location":"API/type-aliases/WorkerTileResult/#rawtiledata","title":"rawTileData?","text":"<p><code>optional</code> rawTileData: <code>ArrayBuffer</code></p>"},{"location":"API/type-aliases/WorkerTileResult/#resourcetiming","title":"resourceTiming?","text":"<p><code>optional</code> resourceTiming: <code>PerformanceResourceTiming</code>[]</p>"},{"location":"examples/","title":"Overview","text":""},{"location":"examples/#3d-terrain","title":"3D Terrain","text":"<p>Go beyond hillshade and show elevation in actual 3D.</p>"},{"location":"examples/#add-a-3d-model-to-globe-using-threejs","title":"Add a 3D model to globe using three.js","text":"<p>Use a custom style layer with three.js to add a 3D model to a globe.</p>"},{"location":"examples/#add-a-3d-model-using-threejs","title":"Add a 3D model using three.js","text":"<p>Use a custom style layer with three.js to add a 3D model to the map.</p>"},{"location":"examples/#add-a-3d-model-with-babylonjs","title":"Add a 3D model with babylon.js","text":"<p>Use a custom style layer with babylon.js to add a 3D model to the map.</p>"},{"location":"examples/#add-a-3d-model-with-shadow-using-threejs","title":"Add a 3D model with shadow using three.js","text":"<pre><code>&lt;meta property=\"og:description\"\n</code></pre>"},{"location":"examples/#add-a-canvas-source","title":"Add a canvas source","text":"<p>Add a canvas source to the map.</p>"},{"location":"examples/#add-a-cog-raster-source","title":"Add a COG raster source","text":"<p>Add an external Cloud Optimized Geotiff (COG) as source.</p>"},{"location":"examples/#add-a-color-relief-layer","title":"Add a color relief layer","text":"<p>Add a color relief layer.</p>"},{"location":"examples/#add-a-custom-layer-with-tiles-to-a-globe","title":"Add a custom layer with tiles to a globe","text":"<p>Use custom layer to display arbitrary tiles drawn with a custom WebGL shader on a globe.</p>"},{"location":"examples/#add-a-custom-style-layer","title":"Add a custom style layer","text":"<p>Use a custom style layer to render custom WebGL content.</p>"},{"location":"examples/#add-a-default-marker","title":"Add a default marker","text":"<p>Add a default marker to the map.</p>"},{"location":"examples/#add-a-generated-icon-to-the-map","title":"Add a generated icon to the map","text":"<p>Add an icon to the map that was generated at runtime.</p>"},{"location":"examples/#add-a-geojson-line","title":"Add a GeoJSON line","text":"<p>Add a GeoJSON line to a map using addSource, then style it using addLayer\u2019s paint properties.</p>"},{"location":"examples/#add-a-geojson-polygon","title":"Add a GeoJSON polygon","text":"<p>Style a polygon with the fill layer type.</p>"},{"location":"examples/#add-a-hillshade-layer","title":"Add a hillshade layer","text":"<p>Add a simple hillshade layer.</p>"},{"location":"examples/#add-a-multidirectional-hillshade-layer","title":"Add a multidirectional hillshade layer","text":"<p>Add a hillshade layer with multiple illumination sources.</p>"},{"location":"examples/#add-a-new-layer-below-labels","title":"Add a new layer below labels","text":"<p>Use the second argument of addLayer to add a layer below labels.</p>"},{"location":"examples/#add-a-pattern-to-a-polygon","title":"Add a pattern to a polygon","text":"<p>Use fill-pattern to draw a polygon from a repeating image pattern.</p>"},{"location":"examples/#add-a-raster-tile-source","title":"Add a raster tile source","text":"<p>Add a third-party raster source to the map.</p>"},{"location":"examples/#add-a-simple-custom-layer-on-a-globe","title":"Add a simple custom layer on a globe","text":"<p>Use a custom layer to draw simple WebGL content on a globe.</p>"},{"location":"examples/#add-a-stretchable-image-to-the-map","title":"Add a stretchable image to the map","text":"<p>Use a stretchable image as a background for text.</p>"},{"location":"examples/#add-a-vector-tile-source","title":"Add a vector tile source","text":"<p>Add a vector source to a map.</p>"},{"location":"examples/#add-a-video","title":"Add a video","text":"<p>Display a video on top of a satellite raster baselayer.</p>"},{"location":"examples/#add-a-wms-source","title":"Add a WMS source","text":"<p>Add an external Web Map Service raster layer to the map using addSource's tiles option.</p>"},{"location":"examples/#add-an-animated-icon-to-the-map","title":"Add an animated icon to the map","text":"<p>Add an animated icon to the map that was generated at runtime with the Canvas API.</p>"},{"location":"examples/#add-an-icon-to-the-map","title":"Add an icon to the map","text":"<p>Add an icon to the map from an external URL and use it in a symbol layer.</p>"},{"location":"examples/#add-contour-lines","title":"Add Contour Lines","text":"<p>Add contour lines to your map from a raster-dem source.</p>"},{"location":"examples/#add-custom-icons-with-markers","title":"Add custom icons with Markers","text":"<p>Add custom marker icons to your map.</p>"},{"location":"examples/#add-live-realtime-data","title":"Add live realtime data","text":"<p>Use realtime GeoJSON data streams to move a symbol on your map.</p>"},{"location":"examples/#add-multiple-geometries-from-one-geojson-source","title":"Add multiple geometries from one GeoJSON source","text":"<p>Add a polygon and circle layer from the same GeoJSON source.</p>"},{"location":"examples/#add-support-for-right-to-left-scripts","title":"Add support for right-to-left scripts","text":"<p>Use the mapbox-gl-rtl-text plugin to support right-to-left languages such as Arabic and Hebrew.</p>"},{"location":"examples/#adding-3d-models-using-threejs-on-terrain","title":"Adding 3D models using three.js on terrain","text":"<p>Use a custom style layer with three.js to add 3D models to a map with 3d terrain.</p>"},{"location":"examples/#animate-a-line","title":"Animate a line","text":"<p>Animate a line by updating a GeoJSON source on each frame.</p>"},{"location":"examples/#animate-a-marker","title":"Animate a marker","text":"<p>Animate the position of a marker by updating its location on each frame.</p>"},{"location":"examples/#animate-a-point-along-a-route","title":"Animate a point along a route","text":"<p>Use Turf to smoothly animate a point along the distance of a line.</p>"},{"location":"examples/#animate-a-point","title":"Animate a point","text":"<p>Animate the position of a point by updating a GeoJSON source on each frame.</p>"},{"location":"examples/#animate-a-series-of-images","title":"Animate a series of images","text":"<p>Use a series of image sources to create an animation.</p>"},{"location":"examples/#animate-map-camera-around-a-point","title":"Animate map camera around a point","text":"<p>Animate the map camera around a point.</p>"},{"location":"examples/#animate-symbol-to-follow-the-mouse","title":"Animate symbol to follow the mouse","text":"<p>Animate symbol to follow the mouse.</p>"},{"location":"examples/#attach-a-popup-to-a-marker-instance","title":"Attach a popup to a marker instance","text":"<p>Attach a popup to a marker and display it on click.</p>"},{"location":"examples/#center-the-map-on-a-clicked-symbol","title":"Center the map on a clicked symbol","text":"<p>Use events and flyTo to center the map on a symbol.</p>"},{"location":"examples/#change-a-layers-color-with-buttons","title":"Change a layer's color with buttons","text":"<p>Use setPaintProperty to change a layer's fill color.</p>"},{"location":"examples/#change-a-maps-language","title":"Change a map's language","text":"<p>Use setLayoutProperty to switch languages dynamically.</p>"},{"location":"examples/#change-building-color-based-on-zoom-level","title":"Change building color based on zoom level","text":"<p>Use the interpolate expression to ease-in the building layer and smoothly fade from one color to the next.</p>"},{"location":"examples/#change-the-case-of-labels","title":"Change the case of labels","text":"<p>Use the upcase and downcase expressions to change the case of labels.</p>"},{"location":"examples/#change-the-default-position-for-attribution","title":"Change the default position for attribution","text":"<p>Place attribution in the top-left position when initializing a map.</p>"},{"location":"examples/#check-if-webgl-is-supported","title":"Check if WebGL is supported","text":"<p>Check for WebGL browser support.</p>"},{"location":"examples/#cooperative-gestures","title":"Cooperative gestures","text":"<p>Enable cooperative gestures. See how it behaves in fullscreen mode.</p>"},{"location":"examples/#create-a-draggable-marker","title":"Create a draggable Marker","text":"<p>Drag the marker to a new location on a map and populate its coordinates in a display.</p>"},{"location":"examples/#create-a-draggable-point","title":"Create a draggable point","text":"<p>Drag the point to a new location on a map and populate its coordinates in a display.</p>"},{"location":"examples/#create-a-gradient-line-with-dasharray-using-an-expression","title":"Create a gradient line with dasharray using an expression","text":"<p>Use the line-gradient and line-dasharray paint properties together to create a dashed line with gradient colors.</p>"},{"location":"examples/#create-a-gradient-line-using-an-expression","title":"Create a gradient line using an expression","text":"<p>Use the line-gradient paint property and an expression to visualize distance from the starting point of a line.</p>"},{"location":"examples/#create-a-heatmap-layer-on-a-globe-with-terrain-elevation","title":"Create a Heatmap layer on a globe with terrain elevation","text":"<p>Create a Heatmap layer on a globe with terrain elevation.</p>"},{"location":"examples/#create-a-heatmap-layer","title":"Create a heatmap layer","text":"<p>Visualize earthquake frequency by location using a heatmap layer.</p>"},{"location":"examples/#create-a-hover-effect","title":"Create a hover effect","text":"<p>Use events and feature states to create a per feature hover effect.</p>"},{"location":"examples/#create-a-time-slider","title":"Create a time slider","text":"<p>Visualize earthquakes with a range slider.</p>"},{"location":"examples/#create-and-style-clusters","title":"Create and style clusters","text":"<p>Use MapLibre GL JS' built-in functions to visualize points as clusters.</p>"},{"location":"examples/#create-deckgl-layer-using-rest-api","title":"Create deck.gl layer using REST API","text":"<p>Create a deck.gl layer as an overlay from a REST API.</p>"},{"location":"examples/#customize-camera-animations","title":"Customize camera animations","text":"<p>Customize camera animations using AnimationOptions.</p>"},{"location":"examples/#customize-the-map-transform-constrain","title":"Customize the map transform constrain","text":"<pre><code>&lt;meta property='og:description' content='Customize the constrain callback of the map transform. For example, to allow users to underzoom and overpan the bounds.' /&gt;\n</code></pre>"},{"location":"examples/#disable-map-rotation","title":"Disable map rotation","text":"<p>Prevent users from rotating a map.</p>"},{"location":"examples/#disable-scroll-zoom","title":"Disable scroll zoom","text":"<p>Prevent scroll from zooming a map.</p>"},{"location":"examples/#display-a-globe-with-a-fill-extrusion-layer","title":"Display a globe with a fill extrusion layer","text":"<p>Display a globe with a fill extrusion layer.</p>"},{"location":"examples/#display-a-globe-with-a-vector-map","title":"Display a globe with a vector map","text":"<p>Display a globe with a vector map.</p>"},{"location":"examples/#display-a-globe-with-an-atmosphere","title":"Display a globe with an atmosphere","text":"<p>Display a globe with an atmosphere.</p>"},{"location":"examples/#display-a-hybrid-satellite-map-with-terrain-elevation","title":"Display a hybrid satellite map with terrain elevation","text":"<p>Display a hybrid satellite map with terrain elevation.</p>"},{"location":"examples/#display-a-map","title":"Display a map","text":"<p>Initialize a map in an HTML element with MapLibre GL JS.</p>"},{"location":"examples/#display-a-non-interactive-map","title":"Display a non-interactive map","text":"<p>Disable interactivity to create a static map.</p>"},{"location":"examples/#display-a-popup-on-click","title":"Display a popup on click","text":"<p>When a user clicks a symbol, show a popup containing more information.</p>"},{"location":"examples/#display-a-popup-on-hover","title":"Display a popup on hover","text":"<p>When a user hovers over a custom marker, show a popup containing more information.</p>"},{"location":"examples/#display-a-popup","title":"Display a popup","text":"<p>Add a popup to the map.</p>"},{"location":"examples/#display-a-remote-svg-symbol","title":"Display a remote SVG symbol","text":"<p>Uses the 'styleimagemissing' event to load a remote image and use it.</p>"},{"location":"examples/#display-a-satellite-map","title":"Display a satellite map","text":"<p>Display a satellite raster baselayer.</p>"},{"location":"examples/#display-and-style-rich-text-labels","title":"Display and style rich text labels","text":"<p>Use the format expression to display country labels in both English and in the local language.</p>"},{"location":"examples/#display-buildings-in-3d","title":"Display buildings in 3D","text":"<p>Use extrusions to display buildings' height in 3D.</p>"},{"location":"examples/#display-html-clusters-with-custom-properties","title":"Display HTML clusters with custom properties","text":"<p>Extend clustering with HTML markers and custom property expressions. </p>"},{"location":"examples/#display-line-that-crosses-180th-meridian","title":"Display line that crosses 180th meridian","text":"<p>Draw a line across the 180th meridian using a GeoJSON source.</p>"},{"location":"examples/#display-map-navigation-controls","title":"Display map navigation controls","text":"<p>Add zoom and rotation controls to the map.</p>"},{"location":"examples/#draw-a-circle","title":"Draw a Circle","text":"<p>Draw a radius to approximate a location with Turf.js</p>"},{"location":"examples/#draw-geojson-points","title":"Draw GeoJSON points","text":"<p>Draw points from a GeoJSON collection to a map.</p>"},{"location":"examples/#draw-geometries-with-terra-draw","title":"Draw geometries with terra-draw","text":"<p>Use maplibre-gl-terradraw to draw a geometry in various forms such as point, line or polygon on your map.</p>"},{"location":"examples/#draw-polygon-with-mapbox-gl-draw","title":"Draw polygon with mapbox-gl-draw","text":"<p>Use mapbox-gl-draw to draw a polygon and Turf.js to calculate its area in square meters.</p>"},{"location":"examples/#extrude-polygons-for-3d-indoor-mapping","title":"Extrude polygons for 3D indoor mapping","text":"<p>Create a 3D indoor map with the fill-extrude-height paint property.</p>"},{"location":"examples/#filter-layer-symbols-using-global-state","title":"Filter layer symbols using global state","text":"<p>Filter a layer symbols based on user input using setGlobalStateProperty().</p>"},{"location":"examples/#filter-symbols-by-text-input","title":"Filter symbols by text input","text":"<p>Filter symbols by icon name by typing in a text input.</p>"},{"location":"examples/#filter-symbols-by-toggling-a-list","title":"Filter symbols by toggling a list","text":"<p>Filter a set of symbols based on a property value in the data.</p>"},{"location":"examples/#filter-within-a-layer","title":"Filter within a Layer","text":"<p>Filter a layer based on user input using setFilter().</p>"},{"location":"examples/#fit-a-map-to-a-bounding-box","title":"Fit a map to a bounding box","text":"<p>Fit the map to a specific area, regardless of the pixel size of the map.</p>"},{"location":"examples/#fit-to-the-bounds-of-a-linestring","title":"Fit to the bounds of a LineString","text":"<p>Get the bounds of a LineString.</p>"},{"location":"examples/#fly-to-a-location-based-on-scroll-position","title":"Fly to a location based on scroll position","text":"<p>Scroll down through the story and the map will fly to the chapter's location.</p>"},{"location":"examples/#fly-to-a-location","title":"Fly to a location","text":"<p>Use flyTo to smoothly interpolate between locations.</p>"},{"location":"examples/#generate-and-add-a-missing-icon-to-the-map","title":"Generate and add a missing icon to the map","text":"<p>Dynamically generate a missing icon at runtime and add it to the map.</p>"},{"location":"examples/#geocode-with-nominatim","title":"Geocode with Nominatim","text":"<p>Geocode with Nominatim and the maplibre-gl-geocoder plugin.</p>"},{"location":"examples/#get-coordinates-of-the-mouse-pointer","title":"Get coordinates of the mouse pointer","text":"<p>Show mouse position on hover with pixel and latitude and longitude coordinates.</p>"},{"location":"examples/#get-features-under-the-mouse-pointer","title":"Get features under the mouse pointer","text":"<p>Use queryRenderedFeatures to show properties of hovered-over map elements.</p>"},{"location":"examples/#hash-routing","title":"Hash routing","text":"<p>Keep the viewport state in the url with hash routing.</p>"},{"location":"examples/#jump-to-a-series-of-locations","title":"Jump to a series of locations","text":"<p>Use the jumpTo function to showcase multiple locations.</p>"},{"location":"examples/#level-of-detail-control","title":"Level of Detail Control","text":"<p>Modify how Level of Detail behaves at high pitch angles.</p>"},{"location":"examples/#locale-switching","title":"Locale switching","text":"<p>Show how localization can be applied manually to UI elements. Hover over a control to see the translated tooltip.</p>"},{"location":"examples/#locate-the-user","title":"Locate the user","text":"<p>Geolocate the user and then track their current location on the map using the GeolocateControl.</p>"},{"location":"examples/#measure-distances","title":"Measure distances","text":"<p>Click points on a map to create lines that measure distanced using turf.length.</p>"},{"location":"examples/#navigate-the-map-with-game-like-controls","title":"Navigate the map with game-like controls","text":"<p>Use the keyboard's arrow keys to move around the map with game-like controls.</p>"},{"location":"examples/#offset-the-vanishing-point-using-padding","title":"Offset the vanishing point using padding","text":"<p>Offset the center or vanishing point of the map to reduce distortion when floating elements are displayed over the map.</p>"},{"location":"examples/#pmtiles-source-and-protocol","title":"PMTiles source and protocol","text":"<p>Uses the PMTiles plugin and protocol to present a map.</p>"},{"location":"examples/#render-world-copies","title":"Render world copies","text":"<p>Toggle between rendering a single world and multiple copies of the world using setRenderWorldCopies.</p>"},{"location":"examples/#restrict-map-panning-to-an-area","title":"Restrict map panning to an area","text":"<p>Prevent a map from being panned to a different place by setting maxBounds.</p>"},{"location":"examples/#set-center-point-above-ground","title":"Set center point above ground","text":"<p>Set the center point above ground level.</p>"},{"location":"examples/#set-pitch-and-bearing","title":"Set pitch and bearing","text":"<p>Initialize a map with pitch and bearing camera options.</p>"},{"location":"examples/#show-polygon-information-on-click","title":"Show polygon information on click","text":"<p>When a user clicks a polygon, show a popup containing more information.</p>"},{"location":"examples/#sky-fog-terrain","title":"Sky, Fog, Terrain","text":"<p>Allows changing the sky, fog and horizon color and blends.</p>"},{"location":"examples/#slowly-fly-to-a-location","title":"Slowly fly to a location","text":"<p>Use flyTo with flyOptions to slowly zoom to a location.</p>"},{"location":"examples/#style-lines-with-a-data-driven-property","title":"Style lines with a data-driven property","text":"<p>Create a visualization with a data expression for line-color.</p>"},{"location":"examples/#sync-movement-of-multiple-maps","title":"Sync movement of multiple maps","text":"<p>Synchronize MapLibre GL JS maps with the sync-move plugin.</p>"},{"location":"examples/#toggle-deckgl-layer","title":"Toggle deck.gl layer","text":"<p>Toggle deck.gl layer using maplibre.</p>"},{"location":"examples/#toggle-interactions","title":"Toggle interactions","text":"<p>Enable or disable UI handlers on a map.</p>"},{"location":"examples/#update-a-feature-in-realtime","title":"Update a feature in realtime","text":"<p>Change an existing feature on your map in real-time by updating its data.</p>"},{"location":"examples/#use-a-fallback-image","title":"Use a fallback image","text":"<p>Use a coalesce expression to display another image when a requested image is not available.</p>"},{"location":"examples/#use-addprotocol-to-transform-feature-properties","title":"Use addProtocol to Transform Feature Properties","text":"<p>Reverse country names with addProtocol in plain JavaScript.</p>"},{"location":"examples/#use-locally-generated-ideographs","title":"Use locally generated ideographs","text":"<p>Set localIdeographFontFamily to override the font used for displaying CJK (Chinese, Japanese and Korean) characters, ignoring the map style. This setting must be a CSS font rule specifying fallbacks of on-device fonts. Set localIdeographFontFamily to false to use server-provided fonts, which is much slower.</p>"},{"location":"examples/#variable-label-placement-with-offset","title":"Variable label placement with offset","text":"<p>Use text-variable-anchor-offset to allow high priority labels to shift position to stay on the map.</p>"},{"location":"examples/#variable-label-placement","title":"Variable label placement","text":"<p>Use text-variable-anchor to allow high priority labels to shift position to stay on the map.</p>"},{"location":"examples/#view-a-fullscreen-map","title":"View a fullscreen map","text":"<p>Toggle between current view and fullscreen mode. Does not work on iPhones because a pseudo-fullscreen is used, and the code is embedded in an iframe, which prevents the map from scaling.</p>"},{"location":"examples/#view-local-geojson-experimental","title":"View local GeoJSON (experimental)","text":"<p>View local GeoJSON with experimental File System Access API.</p>"},{"location":"examples/#view-local-geojson","title":"View local GeoJSON","text":"<p>View local GeoJSON without server upload.</p>"},{"location":"examples/#visualize-population-density","title":"Visualize population density","text":"<p>Use a variable binding expression to calculate and display population density.</p>"},{"location":"examples/#zoom-and-planet-size-relation-on-globe","title":"Zoom and planet size relation on globe","text":"<p>Explanation of zoom and planet size relation under globe projection and how to account for it when changing the map center and zoom by some delta.</p>"},{"location":"examples/3d-terrain/","title":"3D Terrain","text":"<p>Go beyond hillshade and show elevation in actual 3D.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;3D Terrain&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Go beyond hillshade and show elevation in actual 3D.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = (window.map = new maplibregl.Map({\n        container: 'map',\n        zoom: 12,\n        center: [11.39085, 47.27574],\n        pitch: 70,\n        hash: true,\n        style: {\n            version: 8,\n            sources: {\n                osm: {\n                    type: 'raster',\n                    tiles: ['https://a.tile.openstreetmap.org/{z}/{x}/{y}.png'],\n                    tileSize: 256,\n                    attribution: '&amp;copy; OpenStreetMap Contributors',\n                    maxzoom: 19\n                },\n                // Use a different source for terrain and hillshade layers, to improve render quality\n                terrainSource: {\n                    type: 'raster-dem',\n                    url: 'https://demotiles.maplibre.org/terrain-tiles/tiles.json',\n                    tileSize: 256\n                },\n                hillshadeSource: {\n                    type: 'raster-dem',\n                    url: 'https://demotiles.maplibre.org/terrain-tiles/tiles.json',\n                    tileSize: 256\n                }\n            },\n            layers: [\n                {\n                    id: 'osm',\n                    type: 'raster',\n                    source: 'osm'\n                },\n                {\n                    id: 'hills',\n                    type: 'hillshade',\n                    source: 'hillshadeSource',\n                    layout: {visibility: 'visible'},\n                    paint: {'hillshade-shadow-color': '#473B24'}\n                }\n            ],\n            terrain: {\n                source: 'terrainSource',\n                exaggeration: 1\n            },\n            sky: {}\n        },\n        maxZoom: 18,\n        maxPitch: 85\n    }));\n\n    map.addControl(\n        new maplibregl.NavigationControl({\n            visualizePitch: true,\n            showZoom: true,\n            showCompass: true\n        })\n    );\n\n    map.addControl(\n        new maplibregl.TerrainControl({\n            source: 'terrainSource',\n            exaggeration: 1\n        })\n    );\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-3d-model-to-globe-using-threejs/","title":"Add a 3D model to globe using three.js","text":"<p>Use a custom style layer with three.js to add a 3D model to a globe.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;title&gt;Add a 3D model to globe using three.js&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use a custom style layer with three.js to add a 3D model to a globe.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body {\n            margin: 0;\n            padding: 0;\n        }\n\n        html,\n        body,\n        #map {\n            height: 100%;\n        }\n        #project {\n            display: block;\n            position: absolute;\n            top: 20px;\n            left: 50%;\n            transform: translate(-50%);\n            width: 50%;\n            height: 40px;\n            padding: 10px;\n            border: none;\n            border-radius: 3px;\n            font-size: 12px;\n            text-align: center;\n            color: #fff;\n            background: #ee8a65;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;script type=\"importmap\"&gt;\n        {\n            \"imports\": {\n            \"three\": \"https://cdn.jsdelivr.net/npm/three@0.169.0/build/three.module.js\",\n            \"three/addons/\": \"https://cdn.jsdelivr.net/npm/three@0.169.0/examples/jsm/\"\n            }\n        }\n    &lt;/script&gt;\n\n    &lt;div id=\"map\"&gt;&lt;/div&gt;\n    &lt;br /&gt;\n    &lt;button id=\"project\"&gt;Toggle projection&lt;/button&gt;\n    &lt;script type=\"module\"&gt;\n\n        import * as THREE from 'three';\n        import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\n\n        const map = new maplibregl.Map({\n            container: 'map',\n            style: 'https://demotiles.maplibre.org/style.json',\n            zoom: 5.5,\n            center: [150.16546137527212, -35.017179237129994],\n            maxPitch: 80,\n            pitch: 70,\n            canvasContextAttributes: {antialias: true} // create the gl context with MSAA antialiasing, so custom layers are antialiased\n        });\n\n        map.on('style.load', () =&gt; {\n            map.setProjection({\n                type: 'globe', // Set projection to globe\n            });\n        });\n\n        // The API demonstrated in this example will work regardless of projection.\n        // Click this button to toggle it.\n        document.getElementById('project').addEventListener('click', () =&gt; {\n            // Toggle projection\n            const currentProjection = map.getProjection();\n            map.setProjection({\n                type: currentProjection.type === 'globe' ? 'mercator' : 'globe',\n            });\n        });\n\n        // configuration of the custom layer for a 3D model per the CustomLayerInterface\n        const customLayer = {\n            id: '3d-model',\n            type: 'custom',\n            renderingMode: '3d', // The layer MUST be marked as 3D in order to get the proper depth buffer with globe depths in it.\n            onAdd(map, gl) {\n                this.camera = new THREE.Camera();\n                this.scene = new THREE.Scene();\n\n                // create two three.js lights to illuminate the model\n                const directionalLight = new THREE.DirectionalLight(0xffffff);\n                directionalLight.position.set(0, -70, 100).normalize();\n                this.scene.add(directionalLight);\n\n                const directionalLight2 = new THREE.DirectionalLight(0xffffff);\n                directionalLight2.position.set(0, 70, 100).normalize();\n                this.scene.add(directionalLight2);\n\n                // use the three.js GLTF loader to add the 3D model to the three.js scene\n                const loader = new GLTFLoader();\n                loader.load(\n                    'https://maplibre.org/maplibre-gl-js/docs/assets/34M_17/34M_17.gltf',\n                    (gltf) =&gt; {\n                        this.scene.add(gltf.scene);\n                    }\n                );\n                this.map = map;\n\n                // use the MapLibre GL JS map canvas for three.js\n                this.renderer = new THREE.WebGLRenderer({\n                    canvas: map.getCanvas(),\n                    context: gl,\n                    antialias: true\n                });\n\n                this.renderer.autoClear = false;\n            },\n            render(gl, args) {\n                // parameters to ensure the model is georeferenced correctly on the map\n                const modelOrigin = [148.9819, -35.39847];\n                const modelAltitude = 0;\n\n                // Make the object ~10s of km tall to make it visible at planetary scale.\n                const scaling = 10_000.0;\n\n                // We can use this API to get the correct model matrix.\n                // It will work regardless of current projection.\n                // See MapLibre source code, file \"mercator_transform.ts\" or \"vertical_perspective_transform.ts\".\n                const modelMatrix = map.transform.getMatrixForModel(modelOrigin, modelAltitude);\n                const m = new THREE.Matrix4().fromArray(args.defaultProjectionData.mainMatrix);\n                const l = new THREE.Matrix4().fromArray(modelMatrix).scale(\n                    new THREE.Vector3(\n                        scaling,\n                        scaling,\n                        scaling\n                    )\n                );\n\n                this.camera.projectionMatrix = m.multiply(l);\n                this.renderer.resetState();\n                this.renderer.render(this.scene, this.camera);\n                this.map.triggerRepaint();\n            }\n        };\n\n        map.on('style.load', () =&gt; {\n            map.addLayer(customLayer);\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-3d-model-using-threejs/","title":"Add a 3D model using three.js","text":"<p>Use a custom style layer with three.js to add a 3D model to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a 3D model using three.js&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use a custom style layer with three.js to add a 3D model to the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script type=\"importmap\"&gt;\n    {\n        \"imports\": {\n        \"three\": \"https://cdn.jsdelivr.net/npm/three@0.169.0/build/three.module.js\",\n        \"three/addons/\": \"https://cdn.jsdelivr.net/npm/three@0.169.0/examples/jsm/\"\n        }\n    }\n&lt;/script&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script type=\"module\"&gt;\n    import * as THREE from 'three';\n    import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        zoom: 18,\n        center: [148.9819, -35.3981],\n        pitch: 60,\n        canvasContextAttributes: {antialias: true} // create the gl context with MSAA antialiasing, so custom layers are antialiased\n    });\n\n    // parameters to ensure the model is georeferenced correctly on the map\n    const modelOrigin = [148.9819, -35.39847];\n    const modelAltitude = 0;\n    const modelRotate = [Math.PI / 2, 0, 0];\n\n    const modelAsMercatorCoordinate = maplibregl.MercatorCoordinate.fromLngLat(\n        modelOrigin,\n        modelAltitude\n    );\n\n    // transformation parameters to position, rotate and scale the 3D model onto the map\n    const modelTransform = {\n        translateX: modelAsMercatorCoordinate.x,\n        translateY: modelAsMercatorCoordinate.y,\n        translateZ: modelAsMercatorCoordinate.z,\n        rotateX: modelRotate[0],\n        rotateY: modelRotate[1],\n        rotateZ: modelRotate[2],\n        /* Since our 3D model is in real world meters, a scale transform needs to be\n        * applied since the CustomLayerInterface expects units in MercatorCoordinates.\n        */\n        scale: modelAsMercatorCoordinate.meterInMercatorCoordinateUnits()\n    };\n\n\n    // configuration of the custom layer for a 3D model per the CustomLayerInterface\n    const customLayer = {\n        id: '3d-model',\n        type: 'custom',\n        renderingMode: '3d',\n        onAdd (map, gl) {\n            this.camera = new THREE.Camera();\n            this.scene = new THREE.Scene();\n\n            // create two three.js lights to illuminate the model\n            const directionalLight = new THREE.DirectionalLight(0xffffff);\n            directionalLight.position.set(0, -70, 100).normalize();\n            this.scene.add(directionalLight);\n\n            const directionalLight2 = new THREE.DirectionalLight(0xffffff);\n            directionalLight2.position.set(0, 70, 100).normalize();\n            this.scene.add(directionalLight2);\n\n            // use the three.js GLTF loader to add the 3D model to the three.js scene\n            const loader = new GLTFLoader();\n            loader.load(\n                'https://maplibre.org/maplibre-gl-js/docs/assets/34M_17/34M_17.gltf',\n                (gltf) =&gt; {\n                    this.scene.add(gltf.scene);\n                }\n            );\n            this.map = map;\n\n            // use the MapLibre GL JS map canvas for three.js\n            this.renderer = new THREE.WebGLRenderer({\n                canvas: map.getCanvas(),\n                context: gl,\n                antialias: true\n            });\n\n            this.renderer.autoClear = false;\n        },\n        render (gl, args) {\n            const rotationX = new THREE.Matrix4().makeRotationAxis(\n                new THREE.Vector3(1, 0, 0),\n                modelTransform.rotateX\n            );\n            const rotationY = new THREE.Matrix4().makeRotationAxis(\n                new THREE.Vector3(0, 1, 0),\n                modelTransform.rotateY\n            );\n            const rotationZ = new THREE.Matrix4().makeRotationAxis(\n                new THREE.Vector3(0, 0, 1),\n                modelTransform.rotateZ\n            );\n\n            const m = new THREE.Matrix4().fromArray(args.defaultProjectionData.mainMatrix);\n            const l = new THREE.Matrix4()\n                .makeTranslation(\n                    modelTransform.translateX,\n                    modelTransform.translateY,\n                    modelTransform.translateZ\n                )\n                .scale(\n                    new THREE.Vector3(\n                        modelTransform.scale,\n                        -modelTransform.scale,\n                        modelTransform.scale\n                    )\n                )\n                .multiply(rotationX)\n                .multiply(rotationY)\n                .multiply(rotationZ);\n\n            // Alternatively, you can use this API to get the correct model matrix.\n            // It will work regardless of current projection.\n            // Also see the example \"globe-3d-model.html\".\n            //\n            // const modelMatrix = args.getMatrixForModel(modelOrigin, modelAltitude);\n            // const m = new THREE.Matrix4().fromArray(matrix);\n            // const l = new THREE.Matrix4().fromArray(modelMatrix);\n\n            this.camera.projectionMatrix = m.multiply(l);\n            this.renderer.resetState();\n            this.renderer.render(this.scene, this.camera);\n            this.map.triggerRepaint();\n        }\n    };\n\n    map.on('style.load', () =&gt; {\n        map.addLayer(customLayer);\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-3d-model-with-babylonjs/","title":"Add a 3D model with babylon.js","text":"<p>Use a custom style layer with babylon.js to add a 3D model to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a 3D model with babylon.js&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use a custom style layer with babylon.js to add a 3D model to the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script src=\"https://unpkg.com/babylonjs@5.42.2/babylon.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://unpkg.com/babylonjs-loaders@5.42.2/babylonjs.loaders.min.js\"&gt;&lt;/script&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const BABYLON = window.BABYLON;\n\n    const map = (window.map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        zoom: 18,\n        center: [148.9819, -35.3981],\n        pitch: 60,\n        canvasContextAttributes: {antialias: true} // create the gl context with MSAA antialiasing, so custom layers are antialiased\n    }));\n\n    // World matrix parameters\n    const worldOrigin = [148.9819, -35.39847];\n    const worldAltitude = 0;\n\n    // Maplibre.js default coordinate system (no rotations)\n    // +x east, -y north, +z up\n    //var worldRotate = [0, 0, 0];\n\n    // Babylon.js default coordinate system\n    // +x east, +y up, +z north\n    const worldRotate = [Math.PI / 2, 0, 0];\n\n    // Calculate mercator coordinates and scale\n    const worldOriginMercator = maplibregl.MercatorCoordinate.fromLngLat(\n        worldOrigin,\n        worldAltitude\n    );\n    const worldScale = worldOriginMercator.meterInMercatorCoordinateUnits();\n\n    // Calculate world matrix\n    const worldMatrix = BABYLON.Matrix.Compose(\n        new BABYLON.Vector3(worldScale, worldScale, worldScale),\n        BABYLON.Quaternion.FromEulerAngles(\n            worldRotate[0],\n            worldRotate[1],\n            worldRotate[2]\n        ),\n        new BABYLON.Vector3(\n            worldOriginMercator.x,\n            worldOriginMercator.y,\n            worldOriginMercator.z\n        )\n    );\n\n    // configuration of the custom layer for a 3D model per the CustomLayerInterface\n    const customLayer = {\n        id: '3d-model',\n        type: 'custom',\n        renderingMode: '3d',\n        onAdd (map, gl) {\n            this.engine = new BABYLON.Engine(\n                gl,\n                true,\n                {\n                    useHighPrecisionMatrix: true // Important to prevent jitter at mercator scale\n                },\n                true\n            );\n            this.scene = new BABYLON.Scene(this.engine);\n            /**\n            * optionally add\n            * this.scene.autoClearDepthAndStencil = false\n            * and for renderingGroupIds set this individually via\n            * this.scene.setRenderingAutoClearDepthStencil(1,false)\n            * to allow blending with maplibre scene\n            * as documented in https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#reducing-calls-to-glclear\n            */\n            this.scene.autoClear = false;\n            /**\n            * use detachControl if you only want to interact with maplibre-gl and do not need pointer events of babylonjs.\n            * alternatively exchange this.scene.detachControl() with the following two lines, they will allow bubbling up events to maplibre-gl.\n            * this.scene.preventDefaultOnPointerDown = false\n            * this.scene.preventDefaultOnPointerUp = false\n            * https://doc.babylonjs.com/typedoc/classes/BABYLON.Scene#preventDefaultOnPointerDown\n            */\n            this.scene.detachControl();\n\n            this.scene.beforeRender = () =&gt; {\n                this.engine.wipeCaches(true);\n            };\n\n            // create simple camera (will have its project matrix manually calculated)\n            this.camera = new BABYLON.Camera(\n                'Camera',\n                new BABYLON.Vector3(0, 0, 0),\n                this.scene\n            );\n\n            // create simple light\n            const light = new BABYLON.HemisphericLight(\n                'light1',\n                new BABYLON.Vector3(0, 0, 100),\n                this.scene\n            );\n            light.intensity = 0.7;\n\n            // Add debug axes viewer, positioned at origin, 10 meter axis lengths\n            new BABYLON.AxesViewer(this.scene, 10);\n\n            // load GLTF model in to the scene\n            BABYLON.SceneLoader.LoadAssetContainerAsync(\n                'https://maplibre.org/maplibre-gl-js/docs/assets/34M_17/34M_17.gltf',\n                '',\n                this.scene\n            ).then((modelContainer) =&gt; {\n                modelContainer.addAllToScene();\n\n                const rootMesh = modelContainer.createRootMesh();\n\n                // If using maplibre.js coordinate system (+z up)\n                //rootMesh.rotation.x = Math.PI/2\n\n                // Create a second mesh\n                const rootMesh2 = rootMesh.clone();\n\n                // Position in babylon.js coordinate system\n                rootMesh2.position.x = 25; // +east, meters\n                rootMesh2.position.z = 25; // +north, meters\n            });\n\n            this.map = map;\n        },\n        render (gl, args) {\n            const cameraMatrix = BABYLON.Matrix.FromArray(args.defaultProjectionData.mainMatrix);\n\n            // world-view-projection matrix\n            const wvpMatrix = worldMatrix.multiply(cameraMatrix);\n\n            this.camera.freezeProjectionMatrix(wvpMatrix);\n\n            this.scene.render(false);\n            this.map.triggerRepaint();\n        }\n    };\n\n    map.on('style.load', () =&gt; {\n        map.addLayer(customLayer);\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-3d-model-with-shadow-using-threejs/","title":"Add a 3D model with shadow using three.js","text":"<pre><code>&lt;meta property=\"og:description\"\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;title&gt;Add a 3D model with shadow using three.js&lt;/title&gt;\n    &lt;meta property=\"og:description\"\n        content=\"Use a custom style layer with three.js to add a 3D model with shadow to the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body {\n            margin: 0;\n            padding: 0;\n        }\n\n        html,\n        body,\n        #map {\n            height: 100%;\n        }\n    &lt;/style&gt;\n    &lt;script type=\"importmap\"&gt;\n        {\n            \"imports\": {\n            \"three\": \"https://cdn.jsdelivr.net/npm/three@0.169.0/build/three.module.js\",\n            \"three/addons/\": \"https://cdn.jsdelivr.net/npm/three@0.169.0/examples/jsm/\"\n            }\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id=\"map\"&gt;&lt;/div&gt;\n\n    &lt;script type=\"module\"&gt;\n        import * as THREE from 'three';\n        import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\n\n        const map = new maplibregl.Map({\n            container: 'map',\n            style: 'https://tiles.openfreemap.org/styles/bright',\n            zoom: 18,\n            center: [148.9819, -35.3981],\n            pitch: 60,\n            canvasContextAttributes: {antialias: true}\n        });\n\n        const modelOrigin = [148.9819, -35.39847];\n        const modelAltitude = 0;\n        const modelRotate = [Math.PI / 2, 0, 0];\n\n        const modelAsMercatorCoordinate = maplibregl.MercatorCoordinate.fromLngLat(\n            modelOrigin,\n            modelAltitude\n        );\n\n        const modelTransform = {\n            translateX: modelAsMercatorCoordinate.x,\n            translateY: modelAsMercatorCoordinate.y,\n            translateZ: modelAsMercatorCoordinate.z,\n            rotateX: modelRotate[0],\n            rotateY: modelRotate[1],\n            rotateZ: modelRotate[2],\n            scale: modelAsMercatorCoordinate.meterInMercatorCoordinateUnits()\n        };\n\n        const customLayer = {\n            id: '3d-model',\n            type: 'custom',\n            renderingMode: '3d',\n            onAdd(map, gl) {\n                this.camera = new THREE.Camera();\n                this.scene = new THREE.Scene();\n\n                const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n                directionalLight.position.set(100, 100, 100);\n                directionalLight.castShadow = true;\n                this.scene.add(directionalLight);\n\n                directionalLight.shadow.camera.near = 0.1;\n                directionalLight.shadow.camera.far = 2000;\n                directionalLight.shadow.camera.left = -500;\n                directionalLight.shadow.camera.right = 500;\n                directionalLight.shadow.camera.top = 500;\n                directionalLight.shadow.camera.bottom = -500;\n\n                directionalLight.shadow.mapSize.width = 4096;\n                directionalLight.shadow.mapSize.height = 4096;\n\n                const groundGeometry = new THREE.PlaneGeometry(1000, 1000);\n                const groundMaterial = new THREE.ShadowMaterial({ opacity: 0.5 });\n                const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n                ground.rotation.x = -Math.PI / 2;\n                ground.position.y = modelAsMercatorCoordinate.z;\n                ground.receiveShadow = true;\n                this.scene.add(ground);\n\n                const loader = new GLTFLoader();\n                loader.load(\n                    'https://maplibre.org/maplibre-gl-js/docs/assets/34M_17/34M_17.gltf',\n                    (gltf) =&gt; {\n                        gltf.scene.traverse(function (node) {\n                            if (node.isMesh || node.isLight) {\n                                node.castShadow = true;\n                                node.receiveShadow = true;\n                            }\n                        });\n                        this.scene.add(gltf.scene);\n                    }\n                );\n                this.map = map;\n\n                this.renderer = new THREE.WebGLRenderer({\n                    canvas: map.getCanvas(),\n                    context: gl,\n                    antialias: true\n                });\n                this.renderer.shadowMap.enabled = true;\n                this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n                this.renderer.autoClear = false;\n            },\n            render(gl, args) {\n                const rotationX = new THREE.Matrix4().makeRotationAxis(\n                    new THREE.Vector3(1, 0, 0),\n                    modelTransform.rotateX\n                );\n                const rotationY = new THREE.Matrix4().makeRotationAxis(\n                    new THREE.Vector3(0, 1, 0),\n                    modelTransform.rotateY\n                );\n                const rotationZ = new THREE.Matrix4().makeRotationAxis(\n                    new THREE.Vector3(0, 0, 1),\n                    modelTransform.rotateZ\n                );\n\n                const m = new THREE.Matrix4().fromArray(args.defaultProjectionData.mainMatrix);\n                const l = new THREE.Matrix4()\n                    .makeTranslation(\n                        modelTransform.translateX,\n                        modelTransform.translateY,\n                        modelTransform.translateZ\n                    )\n                    .scale(\n                        new THREE.Vector3(\n                            modelTransform.scale,\n                            -modelTransform.scale,\n                            modelTransform.scale\n                        )\n                    )\n                    .multiply(rotationX)\n                    .multiply(rotationY)\n                    .multiply(rotationZ);\n\n                this.camera.projectionMatrix = m.multiply(l);\n                this.renderer.resetState();\n                this.renderer.render(this.scene, this.camera);\n                this.map.triggerRepaint();\n            }\n        };\n\n        map.on('style.load', () =&gt; {\n            map.addLayer(customLayer);\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-canvas-source/","title":"Add a canvas source","text":"<p>Add a canvas source to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a canvas source&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add a canvas source to the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;canvas id=\"canvasID\" width=\"400\" height=\"400\"&gt;Canvas not supported&lt;/canvas&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    //Animation from https://javascript.tutorials24x7.com/blog/how-to-draw-animated-circles-in-html5-canvas\n    const canvas = document.getElementById('canvasID');\n    const ctx = canvas.getContext('2d');\n    canvas.style.display = 'none';\n    const circles = [];\n    const radius = 20;\n\n    function Circle(x, y, dx, dy, radius, color) {\n        this.x = x;\n        this.y = y;\n        this.dx = dx;\n        this.dy = dy;\n\n        this.radius = radius;\n\n        this.draw = function () {\n            ctx.beginPath();\n            ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n            ctx.strokeStyle = color;\n            ctx.stroke();\n        };\n\n        this.update = function () {\n            if (this.x + this.radius &gt; 400 || this.x - this.radius &lt; 0) {\n                this.dx = -this.dx;\n            }\n\n            if (this.y + this.radius &gt; 400 || this.y - this.radius &lt; 0) {\n                this.dy = -this.dy;\n            }\n\n            this.x += this.dx;\n            this.y += this.dy;\n\n            this.draw();\n        };\n    }\n\n    for (let i = 0; i &lt; 5; i++) {\n        const color = `#${(0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6)}`;\n        const x = Math.random() * (400 - radius * 2) + radius;\n        const y = Math.random() * (400 - radius * 2) + radius;\n\n        const dx = (Math.random() - 0.5) * 2;\n        const dy = (Math.random() - 0.5) * 2;\n\n        circles.push(new Circle(x, y, dx, dy, radius, color));\n    }\n\n    function animate() {\n        requestAnimationFrame(animate);\n        ctx.clearRect(0, 0, 400, 400);\n\n        for (let r = 0; r &lt; 5; r++) {\n            circles[r].update();\n        }\n    }\n\n    animate();\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        zoom: 5,\n        minZoom: 4,\n        center: [95.899147, 18.088694],\n        style: 'https://demotiles.maplibre.org/style.json'\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('canvas-source', {\n            type: 'canvas',\n            canvas: 'canvasID',\n            coordinates: [\n                [91.4461, 21.5006],\n                [100.3541, 21.5006],\n                [100.3541, 13.9706],\n                [91.4461, 13.9706]\n            ],\n            // Set to true if the canvas source is animated. If the canvas is static, animate should be set to false to improve performance.\n            animate: true\n        });\n\n        map.addLayer({\n            id: 'canvas-layer',\n            type: 'raster',\n            source: 'canvas-source'\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-cog-raster-source/","title":"Add a COG raster source","text":"<p>Add an external Cloud Optimized Geotiff (COG) as source.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a COG raster source&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add an external Cloud Optimized Geotiff (COG) as source.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css\" /&gt;\n    &lt;script src=\"https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script src=\"https://unpkg.com/@geomatico/maplibre-cog-protocol@0.5.0/dist/index.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    maplibregl.addProtocol('cog', MaplibreCOGProtocol.cogProtocol);\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/styles/osm-bright-gl-style/style.json',\n        center: [11.39831, 47.26244],\n        zoom: 14\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('cogSource', {\n            type: 'raster',\n            url: 'cog://https://maplibre.org/maplibre-gl-js/docs/assets/cog.tif',\n            tileSize: 256\n        });\n\n        map.addLayer({\n            id: 'cogLayer',\n            source: 'cogSource',\n            type: 'raster'\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-color-relief-layer/","title":"Add a color relief layer","text":"<p>Add a color relief layer.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a color relief layer&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add a color relief layer.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id='map'&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = window.map = new maplibregl.Map({\n        container: 'map',\n        zoom: 10,\n        center: [11.45, 47.2],\n        pitch: 0,\n        renderWorldCopies: false,\n        hash: true,\n        style: {\n            version: 8,\n            sources: {\n                terrainSource: {\n                    type: 'raster-dem',\n                    url: 'https://demotiles.maplibre.org/terrain-tiles/tiles.json',\n                    tileSize: 256\n                }\n            },\n            layers: [\n                {\n                    id: 'color-relief',\n                    type: 'color-relief',\n                    source: 'terrainSource',\n                    paint: {\n                        'color-relief-color': [\n                            'interpolate',\n                            ['linear'],\n                            ['elevation'],\n                            400, 'rgb(4, 0, 108)',\n                            582.35, 'rgb(5, 1, 154)',\n                            764.71, 'rgb(10, 21, 189)',\n                            947.06, 'rgb(16, 44, 218)',\n                            1129.41, 'rgb(24, 69, 240)',\n                            1311.76, 'rgb(20, 112, 193)',\n                            1494.12, 'rgb(39, 144, 116)',\n                            1676.47, 'rgb(57, 169, 29)',\n                            1858.82, 'rgb(111, 186, 5)',\n                            2041.18, 'rgb(160, 201, 4)',\n                            2223.53, 'rgb(205, 216, 2)',\n                            2405.88, 'rgb(244, 221, 4)',\n                            2588.24, 'rgb(251, 194, 14)',\n                            2770.59, 'rgb(252, 163, 21)',\n                            2952.94, 'rgb(253, 128, 20)',\n                            3135.29, 'rgb(254, 85, 14)',\n                            3317.65, 'rgb(243, 36, 13)',\n                            3500, 'rgb(215, 5, 13)'\n                        ]\n                    }\n                }\n            ]\n        },\n        maxZoom: 18,\n        maxPitch: 85\n    });\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-custom-layer-with-tiles-to-a-globe/","title":"Add a custom layer with tiles to a globe","text":"<p>Use custom layer to display arbitrary tiles drawn with a custom WebGL shader on a globe.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a custom layer with tiles to a globe&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use custom layer to display arbitrary tiles drawn with a custom WebGL shader on a globe.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n        #project {\n            display: block;\n            position: absolute;\n            top: 20px;\n            left: 50%;\n            transform: translate(-50%);\n            width: 50%;\n            height: 40px;\n            padding: 10px;\n            border: none;\n            border-radius: 3px;\n            font-size: 12px;\n            text-align: center;\n            color: #fff;\n            background: #ee8a65;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;br /&gt;\n&lt;button id=\"project\"&gt;Toggle projection&lt;/button&gt;\n&lt;script&gt;\n    // This example demonstrates how to draw a custom layer consisting of\n    // web mercator tiles with a custom shader.\n    // Each drawn tile must be subdivided in order to be properly curved.\n    // This example also handles poles.\n\n    // Note that sometimes you can encounter single-pixel seams between tiles\n    // of different zoom levels. To fix this, first draw all tiles using meshes\n    // *without* borders and mark all drawn pixels in stencil, then draw\n    // all tiles again, this time *with* borders and with stencil set to\n    // fail all previously drawn pixels.\n    // This approach ensures that no pixel that can be drawn inside some tile\n    // will be instead covered by a mesh border (which is likely to contain invalid data).\n    //\n    // MapLibre uses this approach to draw raster tiles on globe. Borders on raster tiles\n    // contain ugly stretched textures, we don't want that to cover pixels that could be\n    // filled with a valid neighboring tile.\n\n    const EXTENT = 8192;\n\n    // Generate an arbitrary list of tiles to render\n    function generateTileList(list, current) {\n        list.push(current);\n        const subdivide = current.z &lt; 2 || (current.x === current.y &amp;&amp; current.z &lt; 3) || (current.x === 0 &amp;&amp; current.y === 0 &amp;&amp; current.z &lt; 7);\n        if (subdivide) {\n            for (let x = 0; x &lt; 2; x++) {\n                for (let y = 0; y &lt; 2; y++) {\n                    generateTileList(list, {\n                        x: current.x * 2 + x,\n                        y: current.y * 2 + y,\n                        z: current.z + 1,\n                        wrap: current.wrap,\n                    });\n                }\n            }\n        }\n    }\n    const tilesToRender = [];\n    for (let i = -1; i &lt;= 1; i++) {\n        generateTileList(tilesToRender, {x: 0, y: 0, z: 0, wrap: i});\n    }\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        zoom: 2,\n        center: [7.5, 58]\n    });\n\n    map.on('style.load', () =&gt; {\n        map.setProjection({\n            type: 'globe', // Set projection to globe\n        });\n    });\n\n    document.getElementById('project').addEventListener('click', () =&gt; {\n        // Toggle projection\n        const currentProjection = map.getProjection();\n        map.setProjection({\n            type: currentProjection.type === 'globe' ? 'mercator' : 'globe',\n        });\n    });\n\n    const uniforms = [\n        'u_matrix',\n        'u_projection_fallback_matrix',\n        'u_projection_matrix',\n        'u_projection_clipping_plane',\n        'u_projection_transition',\n        'u_projection_tile_mercator_coords',\n    ];\n\n    // create a custom style layer to implement the WebGL content\n    const highlightLayer = {\n        id: 'highlight',\n        type: 'custom',\n        shaderMap: new Map(),\n        meshMap: new Map(),\n\n        // Helper method for creating a shader based on current map projection - globe will automatically switch to mercator when some condition is fulfilled.\n        getShader(gl, shaderDescription) {\n            if (this.shaderMap.has(shaderDescription.variantName)) {\n                return this.shaderMap.get(shaderDescription.variantName);\n            }\n\n            // Create GLSL source for vertex shader\n            // Note: we pass in-tile position in range 0..EXTENT to projectTile.\n            // By default the uniforms for custom layers are set up so that \"projectTile\" accepts mercator coordinates in range 0..1,\n            // but in this example we set the uniforms ourselves to accept range 0..EXTENT just like regular MapLibre rendering.\n            const vertexSource = `#version 300 es\n            ${shaderDescription.vertexShaderPrelude}\n            ${shaderDescription.define}\n\n            in vec2 a_pos;\n            out mediump vec2 v_pos;\n\n            void main() {\n\n                gl_Position = projectTile(a_pos);\n                // We divide by EXTENT here just so we have something reasonable to display in the pixel shader.\n                v_pos = a_pos / float(${EXTENT});\n            }`;\n\n            // create GLSL source for fragment shader\n            const fragmentSource = `#version 300 es\n\n            precision mediump float;\n\n            in vec2 v_pos;\n\n            out highp vec4 fragColor;\n            void main() {\n                float alpha = 0.5;\n                fragColor = vec4(v_pos, 0.0, 1.0) * alpha;\n            }`;\n\n            // create a vertex shader\n            const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n            gl.shaderSource(vertexShader, vertexSource);\n            gl.compileShader(vertexShader);\n\n            // create a fragment shader\n            const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n            gl.shaderSource(fragmentShader, fragmentSource);\n            gl.compileShader(fragmentShader);\n\n            // link the two shaders into a WebGL program\n            const program = gl.createProgram();\n            gl.attachShader(program, vertexShader);\n            gl.attachShader(program, fragmentShader);\n            gl.linkProgram(program);\n\n            this.aPos = gl.getAttribLocation(program, 'a_pos');\n\n            const locations = {};\n\n            for (const uniform of uniforms) {\n                locations[uniform] = gl.getUniformLocation(program, uniform);\n            }\n\n            const result = {\n                program,\n                locations\n            };\n\n            this.shaderMap.set(shaderDescription.variantName, result);\n\n            return result;\n        },\n\n        getTileMesh(gl, x, y, z, border) {\n            // What granularity should we use? Query MapLibre's projection object's granularity settings.\n            const granularity = map.style.projection.subdivisionGranularity.tile.getGranularityForZoomLevel(z);\n            // Do we want north pole geometry?\n            const north = y === 0;\n            // Do we want south pole geometry?\n            const south = y === (1 &lt;&lt; z) - 1;\n            const key = `${granularity}_${north}_${south}_${border}`;\n            if (this.meshMap.has(key)) {\n                return this.meshMap.get(key);\n            }\n\n            const meshBuffers = maplibregl.createTileMesh({\n                granularity,\n                generateBorders: border,\n                extendToNorthPole: north,\n                extendToSouthPole: south,\n            }, '16bit');\n\n            const vbo = gl.createBuffer();\n            gl.bindBuffer(gl.ARRAY_BUFFER, vbo);\n            gl.bufferData(\n                gl.ARRAY_BUFFER,\n                meshBuffers.vertices,\n                gl.STATIC_DRAW\n            );\n            gl.bindBuffer(gl.ARRAY_BUFFER, null);\n            const ibo = gl.createBuffer();\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo);\n            gl.bufferData(\n                gl.ELEMENT_ARRAY_BUFFER,\n                meshBuffers.indices,\n                gl.STATIC_DRAW\n            );\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n\n            const mesh = {\n                vbo,\n                ibo,\n                indexCount: meshBuffers.indices.byteLength / 2,\n            };\n            this.meshMap.set(key, mesh);\n            return mesh;\n        },\n\n        onAdd (map, gl) {\n            // Nothing to do.\n        },\n\n        // method fired on each animation frame\n        render (gl, args) {\n            const {program, locations} = this.getShader(gl, args.shaderData);\n\n            const isBorderDemo = true;\n\n            gl.disable(gl.DEPTH_TEST);\n            gl.disable(gl.STENCIL_TEST);\n            gl.disable(gl.CULL_FACE);\n            gl.enable(gl.BLEND);\n            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n            gl.useProgram(program);\n\n            const isGlobeProjection = args.shaderData.variantName === 'globe';\n\n            for (const tile of tilesToRender) {\n                if (isGlobeProjection &amp;&amp; tile.wrap !== 0) {\n                    continue; // No need to draw wrapped tiles on a globe.\n                }\n\n                const tileID = {\n                    wrap: tile.wrap,\n                    canonical: {\n                        x: tile.x,\n                        y: tile.y,\n                        z: tile.z,\n                    }\n                };\n\n                const projectionData = map.transform.getProjectionData({overscaledTileID: tileID, applyGlobeMatrix: true});\n\n                gl.uniform4f(\n                    locations['u_projection_clipping_plane'],\n                    ...projectionData.clippingPlane // vec4\n                );\n                gl.uniform1f(\n                    locations['u_projection_transition'],\n                    projectionData.projectionTransition // float\n                );\n\n                // Set tile mercator extents accordingly\n                const tileSize = 1.0 / (1 &lt;&lt; tile.z);\n                gl.uniform4f(\n                    locations['u_projection_tile_mercator_coords'],\n                    ...projectionData.tileMercatorCoords // vec4\n                );\n\n                // Shader variant name effectively tells us what projection code path should be used.\n                gl.uniformMatrix4fv(\n                    locations['u_projection_matrix'],\n                    false,\n                    projectionData.mainMatrix\n                );\n                gl.uniformMatrix4fv(\n                    locations['u_projection_fallback_matrix'],\n                    false,\n                    projectionData.fallbackMatrix\n                );\n                const mesh = this.getTileMesh(gl, tile.x, tile.y, tile.z, false);\n                gl.bindBuffer(gl.ARRAY_BUFFER, mesh.vbo);\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, mesh.ibo);\n                gl.enableVertexAttribArray(this.aPos);\n                gl.vertexAttribPointer(this.aPos, 2, gl.SHORT, false, 0, 0);\n                gl.drawElements(gl.TRIANGLES, mesh.indexCount, gl.UNSIGNED_SHORT, 0);\n            }\n        }\n    };\n\n    // add the custom style layer to the map\n    map.on('load', () =&gt; {\n        map.addLayer(highlightLayer, 'countries-label');\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-custom-style-layer/","title":"Add a custom style layer","text":"<p>Use a custom style layer to render custom WebGL content.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a custom style layer&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use a custom style layer to render custom WebGL content.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        zoom: 3,\n        center: [7.5, 58],\n        style: 'https://demotiles.maplibre.org/style.json',\n        canvasContextAttributes: {antialias: true} // create the gl context with MSAA antialiasing, so custom layers are antialiased\n    });\n\n    // create a custom style layer to implement the WebGL content\n    const highlightLayer = {\n        id: 'highlight',\n        type: 'custom',\n\n        // method called when the layer is added to the map\n        // Search for StyleImageInterface in https://maplibre.org/maplibre-gl-js/docs/API/\n        onAdd (map, gl) {\n        // create GLSL source for vertex shader\n            const vertexSource = `#version 300 es\n\n            uniform mat4 u_matrix;\n            in vec2 a_pos;\n            void main() {\n                gl_Position = u_matrix * vec4(a_pos, 0.0, 1.0);\n            }`;\n\n            // create GLSL source for fragment shader\n            const fragmentSource = `#version 300 es\n\n            out highp vec4 fragColor;\n            void main() {\n                fragColor = vec4(1.0, 0.0, 0.0, 0.5);\n            }`;\n\n            // create a vertex shader\n            const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n            gl.shaderSource(vertexShader, vertexSource);\n            gl.compileShader(vertexShader);\n\n            // create a fragment shader\n            const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n            gl.shaderSource(fragmentShader, fragmentSource);\n            gl.compileShader(fragmentShader);\n\n            // link the two shaders into a WebGL program\n            this.program = gl.createProgram();\n            gl.attachShader(this.program, vertexShader);\n            gl.attachShader(this.program, fragmentShader);\n            gl.linkProgram(this.program);\n\n            this.aPos = gl.getAttribLocation(this.program, 'a_pos');\n\n            // define vertices of the triangle to be rendered in the custom style layer\n            const helsinki = maplibregl.MercatorCoordinate.fromLngLat({\n                lng: 25.004,\n                lat: 60.239\n            });\n            const berlin = maplibregl.MercatorCoordinate.fromLngLat({\n                lng: 13.403,\n                lat: 52.562\n            });\n            const kyiv = maplibregl.MercatorCoordinate.fromLngLat({\n                lng: 30.498,\n                lat: 50.541\n            });\n\n            // create and initialize a WebGLBuffer to store vertex and color data\n            this.buffer = gl.createBuffer();\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\n            gl.bufferData(\n                gl.ARRAY_BUFFER,\n                new Float32Array([\n                    helsinki.x,\n                    helsinki.y,\n                    berlin.x,\n                    berlin.y,\n                    kyiv.x,\n                    kyiv.y\n                ]),\n                gl.STATIC_DRAW\n            );\n        },\n\n        // method fired on each animation frame\n        render (gl, args) {\n            gl.useProgram(this.program);\n            gl.uniformMatrix4fv(\n                gl.getUniformLocation(this.program, 'u_matrix'),\n                false,\n                args.defaultProjectionData.mainMatrix\n            );\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\n            gl.enableVertexAttribArray(this.aPos);\n            gl.vertexAttribPointer(this.aPos, 2, gl.FLOAT, false, 0, 0);\n            gl.enable(gl.BLEND);\n            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 3);\n        }\n    };\n\n    // add the custom style layer to the map\n    map.on('load', () =&gt; {\n        map.addLayer(highlightLayer, 'crimea-fill');\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-default-marker/","title":"Add a default marker","text":"<p>Add a default marker to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a default marker&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add a default marker to the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [12.550343, 55.665957],\n        zoom: 6\n    });\n\n    const marker = new maplibregl.Marker()\n        .setLngLat([12.550343, 55.665957])\n        .addTo(map);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-generated-icon-to-the-map/","title":"Add a generated icon to the map","text":"<p>Add an icon to the map that was generated at runtime.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a generated icon to the map&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add an icon to the map that was generated at runtime.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json'\n    });\n\n    map.on('load', () =&gt; {\n        const width = 64; // The image will be 64 pixels square\n        const bytesPerPixel = 4; // Each pixel is represented by 4 bytes: red, green, blue, and alpha.\n        const data = new Uint8Array(width * width * bytesPerPixel);\n\n        for (let x = 0; x &lt; width; x++) {\n            for (let y = 0; y &lt; width; y++) {\n                const offset = (y * width + x) * bytesPerPixel;\n                data[offset + 0] = (y / width) * 255; // red\n                data[offset + 1] = (x / width) * 255; // green\n                data[offset + 2] = 128; // blue\n                data[offset + 3] = 255; // alpha\n            }\n        }\n\n        map.addImage('gradient', {width, height: width, data});\n\n        map.addSource('point', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [0, 0]\n                        }\n                    }\n                ]\n            }\n        });\n        map.addLayer({\n            'id': 'points',\n            'type': 'symbol',\n            'source': 'point',\n            'layout': {\n                'icon-image': 'gradient'\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-geojson-line/","title":"Add a GeoJSON line","text":"<p>Add a GeoJSON line to a map using addSource, then style it using addLayer\u2019s paint properties.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a GeoJSON line&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add a GeoJSON line to a map using addSource, then style it using addLayer\u2019s paint properties.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-122.486052, 37.830348],\n        zoom: 15\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('route', {\n            'type': 'geojson',\n            'data': {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'LineString',\n                    'coordinates': [\n                        [-122.48369693756104, 37.83381888486939],\n                        [-122.48348236083984, 37.83317489144141],\n                        [-122.48339653015138, 37.83270036637107],\n                        [-122.48356819152832, 37.832056363179625],\n                        [-122.48404026031496, 37.83114119107971],\n                        [-122.48404026031496, 37.83049717427869],\n                        [-122.48348236083984, 37.829920943955045],\n                        [-122.48356819152832, 37.82954808664175],\n                        [-122.48507022857666, 37.82944639795659],\n                        [-122.48610019683838, 37.82880236636284],\n                        [-122.48695850372314, 37.82931081282506],\n                        [-122.48700141906738, 37.83080223556934],\n                        [-122.48751640319824, 37.83168351665737],\n                        [-122.48803138732912, 37.832158048267786],\n                        [-122.48888969421387, 37.83297152392784],\n                        [-122.48987674713133, 37.83263257682617],\n                        [-122.49043464660643, 37.832937629287755],\n                        [-122.49125003814696, 37.832429207817725],\n                        [-122.49163627624512, 37.832564787218985],\n                        [-122.49223709106445, 37.83337825839438],\n                        [-122.49378204345702, 37.83368330777276]\n                    ]\n                }\n            }\n        });\n        map.addLayer({\n            'id': 'route',\n            'type': 'line',\n            'source': 'route',\n            'layout': {\n                'line-join': 'round',\n                'line-cap': 'round'\n            },\n            'paint': {\n                'line-color': '#888',\n                'line-width': 8\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-geojson-polygon/","title":"Add a GeoJSON polygon","text":"<p>Style a polygon with the fill layer type.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a GeoJSON polygon&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Style a polygon with the fill layer type.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [-68.13734351262877, 45.137451890638886],\n        zoom: 5\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('maine', {\n            'type': 'geojson',\n            'data': {\n                'type': 'Feature',\n                'geometry': {\n                    'type': 'Polygon',\n                    'coordinates': [\n                        [\n                            [-67.13734351262877, 45.137451890638886],\n                            [-66.96466, 44.8097],\n                            [-68.03252, 44.3252],\n                            [-69.06, 43.98],\n                            [-70.11617, 43.68405],\n                            [-70.64573401557249, 43.090083319667144],\n                            [-70.75102474636725, 43.08003225358635],\n                            [-70.79761105007827, 43.21973948828747],\n                            [-70.98176001655037, 43.36789581966826],\n                            [-70.94416541205806, 43.46633942318431],\n                            [-71.08482, 45.3052400000002],\n                            [-70.6600225491012, 45.46022288673396],\n                            [-70.30495378282376, 45.914794623389355],\n                            [-70.00014034695016, 46.69317088478567],\n                            [-69.23708614772835, 47.44777598732787],\n                            [-68.90478084987546, 47.184794623394396],\n                            [-68.23430497910454, 47.35462921812177],\n                            [-67.79035274928509, 47.066248887716995],\n                            [-67.79141211614706, 45.702585354182816],\n                            [-67.13734351262877, 45.137451890638886]\n                        ]\n                    ]\n                }\n            }\n        });\n        map.addLayer({\n            'id': 'maine',\n            'type': 'fill',\n            'source': 'maine',\n            'layout': {},\n            'paint': {\n                'fill-color': '#088',\n                'fill-opacity': 0.8\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-hillshade-layer/","title":"Add a hillshade layer","text":"<p>Add a simple hillshade layer.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a hillshade layer&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add a simple hillshade layer.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id='map'&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = window.map = new maplibregl.Map({\n        container: 'map',\n        zoom: 10,\n        center: [11.491, 47.274],\n        pitch: 0,\n        renderWorldCopies: false,\n        hash: true,\n        style: {\n            version: 8,\n            sources: {\n                hillshadeSource: {\n                    type: 'raster-dem',\n                    url: 'https://demotiles.maplibre.org/terrain-tiles/tiles.json',\n                    tileSize: 256\n                }\n            },\n            layers: [\n                {\n                    id: 'hillshade',\n                    type: 'hillshade',\n                    source: 'hillshadeSource',\n                    paint: {\n                        'hillshade-method': 'standard',\n                        'hillshade-illumination-direction': 315,\n                        'hillshade-shadow-color': '#000000',\n                        'hillshade-highlight-color': '#FFFFFF',\n                        'hillshade-accent-color': '#000000',\n                        'hillshade-exaggeration': 0.5\n                    }\n                }\n            ]\n        },\n        maxZoom: 18,\n        maxPitch: 85\n    });\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-multidirectional-hillshade-layer/","title":"Add a multidirectional hillshade layer","text":"<p>Add a hillshade layer with multiple illumination sources.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a multidirectional hillshade layer&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add a hillshade layer with multiple illumination sources.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id='map'&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = window.map = new maplibregl.Map({\n        container: 'map',\n        zoom: 10,\n        center: [11.491, 47.274],\n        pitch: 0,\n        renderWorldCopies: false,\n        hash: true,\n        style: {\n            version: 8,\n            sources: {\n                hillshadeSource: {\n                    type: 'raster-dem',\n                    url: 'https://demotiles.maplibre.org/terrain-tiles/tiles.json',\n                    tileSize: 256\n                }\n            },\n            layers: [\n                {\n                    id: 'hillshade',\n                    type: 'hillshade',\n                    source: 'hillshadeSource',\n                    paint: {\n                        'hillshade-method': 'multidirectional',\n                        'hillshade-highlight-color': ['#FF4000', '#FFFF00', '#40ff00', '#00FF80'],\n                        'hillshade-shadow-color': ['#00bfff', '#0000ff', '#bf00ff', '#FF0080'],\n                        'hillshade-illumination-direction': [270, 315, 0, 45],\n                        'hillshade-illumination-altitude': [30, 30, 30, 30]\n                    }\n                }\n            ]\n        },\n        maxZoom: 18,\n        maxPitch: 85\n    });\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-new-layer-below-labels/","title":"Add a new layer below labels","text":"<p>Use the second argument of addLayer to add a layer below labels.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a new layer below labels&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use the second argument of addLayer to add a layer below labels.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-88.13734351262877, 35.137451890638886],\n        zoom: 4\n    });\n\n    map.on('load', () =&gt; {\n        const layers = map.getStyle().layers;\n        // Find the index of the first symbol layer in the map style\n        let firstSymbolId;\n        for (let i = 0; i &lt; layers.length; i++) {\n            if (layers[i].type === 'symbol') {\n                firstSymbolId = layers[i].id;\n                break;\n            }\n        }\n        map.addSource('urban-areas', {\n            'type': 'geojson',\n            'data':\n                'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_50m_urban_areas.geojson'\n        });\n        map.addLayer(\n            {\n                'id': 'urban-areas-fill',\n                'type': 'fill',\n                'source': 'urban-areas',\n                'layout': {},\n                'paint': {\n                    'fill-color': '#f08',\n                    'fill-opacity': 0.4\n                }\n                // This is the important part of this example: the addLayer\n                // method takes 2 arguments: the layer as an object, and a string\n                // representing another layer's name. if the other layer\n                // exists in the stylesheet already, the new layer will be positioned\n                // right before that layer in the stack, making it possible to put\n                // 'overlays' anywhere in the layer stack.\n                // Insert the layer beneath the first symbol layer.\n            },\n            firstSymbolId\n        );\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-pattern-to-a-polygon/","title":"Add a pattern to a polygon","text":"<p>Use fill-pattern to draw a polygon from a repeating image pattern.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a pattern to a polygon&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use fill-pattern to draw a polygon from a repeating image pattern.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        zoom: 1\n    });\n\n    map.on('load', async () =&gt; {\n        // Add GeoJSON data\n        map.addSource('source', {\n            'type': 'geojson',\n            'data': {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'Polygon',\n                    'coordinates': [\n                        [\n                            [-30, -25],\n                            [-30, 35],\n                            [30, 35],\n                            [30, -25],\n                            [-30, -25]\n                        ]\n                    ]\n                }\n            }\n        });\n\n        // Load an image to use as the pattern\n        const image = await map.loadImage('https://upload.wikimedia.org/wikipedia/commons/thumb/6/60/Cat_silhouette.svg/64px-Cat_silhouette.svg.png');\n        // Declare the image\n        map.addImage('pattern', image.data);\n\n        // Use it\n        map.addLayer({\n            'id': 'pattern-layer',\n            'type': 'fill',\n            'source': 'source',\n            'paint': {\n                'fill-pattern': 'pattern'\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-raster-tile-source/","title":"Add a raster tile source","text":"<p>Add a third-party raster source to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a raster tile source&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add a third-party raster source to the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style: {\n            'version': 8,\n            'sources': {\n                'raster-tiles': {\n                    'type': 'raster',\n                    'tiles': ['https://tile.openstreetmap.org/{z}/{x}/{y}.png'],\n                    'tileSize': 256,\n                    'minzoom': 0,\n                    'maxzoom': 19\n                }\n            },\n            'layers': [\n                {\n                    'id': 'simple-tiles',\n                    'type': 'raster',\n                    'source': 'raster-tiles',\n                    'attribution': \"\u00a9 OpenStreetMap contributors\",\n                }\n            ],\n            'id': 'blank'\n        },\n        center: [0, 0], // starting position\n        zoom: 0 // starting zoom\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-simple-custom-layer-on-a-globe/","title":"Add a simple custom layer on a globe","text":"<p>Use a custom layer to draw simple WebGL content on a globe.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a simple custom layer on a globe&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use a custom layer to draw simple WebGL content on a globe.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n        #project {\n            display: block;\n            position: absolute;\n            top: 20px;\n            left: 50%;\n            transform: translate(-50%);\n            width: 50%;\n            height: 40px;\n            padding: 10px;\n            border: none;\n            border-radius: 3px;\n            font-size: 12px;\n            text-align: center;\n            color: #fff;\n            background: #ee8a65;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;br /&gt;\n&lt;button id=\"project\"&gt;Toggle projection&lt;/button&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        zoom: 3,\n        center: [7.5, 58],\n        canvasContextAttributes: {antialias: true}\n    });\n\n    map.on('style.load', () =&gt; {\n        map.setProjection({\n            type: 'globe', // Set projection to globe\n        });\n    });\n\n    document.getElementById('project').addEventListener('click', () =&gt; {\n        // Toggle projection\n        const currentProjection = map.getProjection();\n        map.setProjection({\n            type: currentProjection.type === 'globe' ? 'mercator' : 'globe',\n        });\n    });\n\n    // create a custom style layer to implement the WebGL content\n    const highlightLayer = {\n        id: 'highlight',\n        type: 'custom',\n        shaderMap: new Map(),\n\n        // Helper method for creating a shader based on current map projection - globe will automatically switch to mercator when some condition is fulfilled.\n        getShader(gl, shaderDescription) {\n            // Pick a shader based on the current projection, defined by `variantName`.\n            if (this.shaderMap.has(shaderDescription.variantName)) {\n                return this.shaderMap.get(shaderDescription.variantName);\n            }\n\n            // Create GLSL source for vertex shader\n            //\n            // Note that we need to use a complex function to project from the source mercator\n            // coordinates to the globe. Internal shaders in MapLibre need to do this too.\n            // This is done using the `projectTile` function.\n            // In MapLibre, this function accepts vertex coordinates local to the current tile,\n            // in range 0..EXTENT (8192), but for custom layers MapLibre supplies uniforms such that\n            // the function accepts mercator coordinates of the whole world in range 0..1.\n            // This is controlled by the `u_projection_tile_mercator_coords` uniform.\n            //\n            // The `projectTile` function can also handle mercator to globe transitions and can\n            // handle the mercator projection - different code is supplied based on what projection is used,\n            // and for this reason we use different shaders based on what shader projection variant is currently used.\n            // See `variantName` usage earlier in this file.\n            //\n            // The code for the projection function and uniforms is also supplied by MapLibre\n            // and must be injected into custom layer shaders in order to draw on a globe.\n            // We simply use string interpolation for that here.\n            //\n            // See MapLibre source code for more details, especially src/shaders/_projection_globe.vertex.glsl\n            const vertexSource = `#version 300 es\n            // Inject MapLibre projection code\n            ${shaderDescription.vertexShaderPrelude}\n            ${shaderDescription.define}\n\n            in vec2 a_pos;\n\n            void main() {\n                gl_Position = projectTile(a_pos);\n            }`;\n\n            // create GLSL source for fragment shader\n            const fragmentSource = `#version 300 es\n\n            out highp vec4 fragColor;\n            void main() {\n                fragColor = vec4(1.0, 0.0, 1.0, 0.75);\n            }`;\n\n            // create a vertex shader\n            const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n            gl.shaderSource(vertexShader, vertexSource);\n            gl.compileShader(vertexShader);\n\n            // create a fragment shader\n            const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n            gl.shaderSource(fragmentShader, fragmentSource);\n            gl.compileShader(fragmentShader);\n\n            // link the two shaders into a WebGL program\n            const program = gl.createProgram();\n            gl.attachShader(program, vertexShader);\n            gl.attachShader(program, fragmentShader);\n            gl.linkProgram(program);\n\n            this.aPos = gl.getAttribLocation(program, 'a_pos');\n\n            this.shaderMap.set(shaderDescription.variantName, program);\n\n            return program;\n        },\n\n        // method called when the layer is added to the map\n        // Search for StyleImageInterface in https://maplibre.org/maplibre-gl-js/docs/API/\n        onAdd (map, gl) {\n            // define vertices of the triangle to be rendered in the custom style layer\n            const helsinki = maplibregl.MercatorCoordinate.fromLngLat({\n                lng: 25.004,\n                lat: 60.239\n            });\n            const berlin = maplibregl.MercatorCoordinate.fromLngLat({\n                lng: 13.403,\n                lat: 52.562\n            });\n            const kyiv = maplibregl.MercatorCoordinate.fromLngLat({\n                lng: 30.498,\n                lat: 50.541\n            });\n\n            // create and initialize a WebGLBuffer to store vertex and color data\n            this.buffer = gl.createBuffer();\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\n            gl.bufferData(\n                gl.ARRAY_BUFFER,\n                new Float32Array([\n                    helsinki.x,\n                    helsinki.y,\n                    kyiv.x,\n                    kyiv.y,\n                    berlin.x,\n                    berlin.y,\n                ]),\n                gl.STATIC_DRAW\n            );\n\n            // Explanation of horizon clipping in MapLibre globe projection:\n            //\n            // When zooming in, the triangle will eventually start doing what at first glance\n            // appears to be clipping the underlying map.\n            //\n            // Instead it is being clipped by the \"horizon\" plane, which the globe uses to\n            // clip any geometry behind horizon (regular face culling isn't enough).\n            // The horizon plane is not necessarily aligned with the near/far planes.\n            // The clipping is done by assigning a custom value to `gl_Position.z` in the `projectTile`\n            // MapLibre uses a constant z value per layer, so `gl_Position.z` can be anything,\n            // since it later gets overwritten by `glDepthRange`.\n            //\n            // At high zooms, the triangle's three vertices can end up beyond the horizon plane,\n            // resulting in the triangle getting clipped.\n            //\n            // This can be fixed by subdividing the triangle's geometry.\n            // This is in general advisable to do, since without subdivision\n            // geometry would not project to a curved shape under globe projection.\n            // MapLibre also internally subdivides all geometry when globe projection is used.\n        },\n\n        // method fired on each animation frame\n        render (gl, args) {\n            const program = this.getShader(gl, args.shaderData);\n            gl.useProgram(program);\n            gl.uniformMatrix4fv(\n                gl.getUniformLocation(program, 'u_projection_fallback_matrix'),\n                false,\n                args.defaultProjectionData.fallbackMatrix // convert mat4 from gl-matrix to a plain array\n            );\n            gl.uniformMatrix4fv(\n                gl.getUniformLocation(program, 'u_projection_matrix'),\n                false,\n                args.defaultProjectionData.mainMatrix // convert mat4 from gl-matrix to a plain array\n            );\n            gl.uniform4f(\n                gl.getUniformLocation(program, 'u_projection_tile_mercator_coords'),\n                ...args.defaultProjectionData.tileMercatorCoords\n            );\n            gl.uniform4f(\n                gl.getUniformLocation(program, 'u_projection_clipping_plane'),\n                ...args.defaultProjectionData.clippingPlane\n            );\n            gl.uniform1f(\n                gl.getUniformLocation(program, 'u_projection_transition'),\n                args.defaultProjectionData.projectionTransition\n            );\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\n            gl.enableVertexAttribArray(this.aPos);\n            gl.vertexAttribPointer(this.aPos, 2, gl.FLOAT, false, 0, 0);\n            gl.enable(gl.BLEND);\n            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 3);\n        }\n    };\n\n    // add the custom style layer to the map\n    map.on('load', () =&gt; {\n        map.addLayer(highlightLayer, 'crimea-fill');\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-stretchable-image-to-the-map/","title":"Add a stretchable image to the map","text":"<p>Use a stretchable image as a background for text.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a stretchable image to the map&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use a stretchable image as a background for text.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        zoom: 0.1\n    });\n\n    const images = {\n        'popup': 'https://maplibre.org/maplibre-gl-js/docs/assets/popup.png',\n        'popup-debug':\n            'https://maplibre.org/maplibre-gl-js/docs/assets/popup_debug.png'\n    };\n\n    map.on('load', async () =&gt; {\n        const debugPopup = await map.loadImage(images['popup-debug']);\n        const popup = await map.loadImage(images['popup']);\n        map.addImage('popup-debug', debugPopup.data, {\n            // The two (blue) columns of pixels that can be stretched horizontally:\n            //   - the pixels between x: 25 and x: 55 can be stretched\n            //   - the pixels between x: 85 and x: 115 can be stretched.\n            stretchX: [\n                [25, 55],\n                [85, 115]\n            ],\n            // The one (red) row of pixels that can be stretched vertically:\n            //   - the pixels between y: 25 and y: 100 can be stretched\n            stretchY: [[25, 100]],\n            // This part of the image that can contain text ([x1, y1, x2, y2]):\n            content: [25, 25, 115, 100],\n            // This is a high-dpi image:\n            pixelRatio: 2\n        });\n        map.addImage('popup', popup.data, {\n            stretchX: [\n                [25, 55],\n                [85, 115]\n            ],\n            stretchY: [[25, 100]],\n            content: [25, 25, 115, 100],\n            pixelRatio: 2\n        });\n\n        map.addSource('points', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [40, -30]\n                        },\n                        'properties': {\n                            'image-name': 'popup-debug',\n                            'name': 'Line 1\\nLine 2\\nLine 3'\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [40, 30]\n                        },\n                        'properties': {\n                            'image-name': 'popup',\n                            'name': 'Line 1\\nLine 2\\nLine 3'\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-40, -30]\n                        },\n                        'properties': {\n                            'image-name': 'popup-debug',\n                            'name': 'One longer line'\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-40, 30]\n                        },\n                        'properties': {\n                            'image-name': 'popup',\n                            'name': 'One longer line'\n                        }\n                    }\n                ]\n            }\n        });\n        map.addLayer({\n            'id': 'points',\n            'type': 'symbol',\n            'source': 'points',\n            'layout': {\n                'text-field': ['get', 'name'],\n                'icon-text-fit': 'both',\n                'icon-image': ['get', 'image-name'],\n                'icon-overlap': 'always',\n                'text-overlap': 'always'\n            }\n        });\n\n        // the original, non-stretched image for comparison\n        map.addSource('original', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [0, -70]\n                        }\n                    }\n                ]\n            }\n        });\n        map.addLayer({\n            'id': 'original',\n            'type': 'symbol',\n            'source': 'original',\n            'layout': {\n                'text-field': 'non-stretched image',\n                'icon-image': 'popup-debug',\n                'icon-overlap': 'always',\n                'text-overlap': 'always'\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-vector-tile-source/","title":"Add a vector tile source","text":"<p>Add a vector source to a map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a vector tile source&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add a vector source to a map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        zoom: 13,\n        center: [-122.447303, 37.753574]\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('contours', {\n            type: 'vector',\n            url:\n                'https://api.maptiler.com/tiles/contours/tiles.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL'\n        });\n        map.addLayer({\n            'id': 'terrain-data',\n            'type': 'line',\n            'source': 'contours',\n            'source-layer': 'contour',\n            'layout': {\n                'line-join': 'round',\n                'line-cap': 'round'\n            },\n            'paint': {\n                'line-color': '#ff69b4',\n                'line-width': 1\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-video/","title":"Add a video","text":"<p>Display a video on top of a satellite raster baselayer.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a video&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Display a video on top of a satellite raster baselayer.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const videoStyle = {\n        'version': 8,\n        'sources': {\n            'satellite': {\n                'type': 'raster',\n                'url': 'https://api.maptiler.com/tiles/satellite/tiles.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n                'tileSize': 256\n            },\n            'video': {\n                'type': 'video',\n                'urls': [\n                    'https://static-assets.mapbox.com/mapbox-gl-js/drone.mp4',\n                    'https://static-assets.mapbox.com/mapbox-gl-js/drone.webm'\n                ],\n                'coordinates': [\n                    [-122.51596391201019, 37.56238816766053],\n                    [-122.51467645168304, 37.56410183312965],\n                    [-122.51309394836426, 37.563391708549425],\n                    [-122.51423120498657, 37.56161849366671]\n                ]\n            }\n        },\n        'layers': [\n            {\n                'id': 'background',\n                'type': 'background',\n                'paint': {\n                    'background-color': 'rgb(4,7,14)'\n                }\n            },\n            {\n                'id': 'satellite',\n                'type': 'raster',\n                'source': 'satellite'\n            },\n            {\n                'id': 'video',\n                'type': 'raster',\n                'source': 'video'\n            }\n        ]\n    };\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        minZoom: 14,\n        zoom: 17,\n        center: [-122.514426, 37.562984],\n        bearing: -96,\n        style: videoStyle\n    });\n\n    let playingVideo = true;\n\n    map.on('click', () =&gt; {\n        playingVideo = !playingVideo;\n\n        if (playingVideo) map.getSource('video').play();\n        else map.getSource('video').pause();\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-a-wms-source/","title":"Add a WMS source","text":"<p>Add an external Web Map Service raster layer to the map using addSource's tiles option.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add a WMS source&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add an external Web Map Service raster layer to the map using addSource's tiles option.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: {\n            version: 8,\n            sources: {\n                'wms-test-source': {\n                    type: 'raster',\n                    // use the tiles option to specify a WMS tile source URL\n                    // https://maplibre.org/maplibre-style-spec/sources/\n                    tiles: [\n                        'https://ows.terrestris.de/osm/service?service=WMS&amp;request=GetMap&amp;version=1.1.1&amp;layers=TOPO-WMS%2COSM-Overlay-WMS&amp;styles=&amp;format=image%2Fpng&amp;transparent=true&amp;info_format=text%2Fhtml&amp;tiled=false&amp;srs=EPSG:3857&amp;bbox={bbox-epsg-3857}&amp;width=256&amp;height=256'\n                    ],\n                    tileSize: 256\n                }\n            },\n            layers: [{\n                id: 'wms-test-layer',\n                type: 'raster',\n                source: 'wms-test-source',\n                paint: {}\n            }]\n        },\n        zoom: 8,\n        center: [-74.5447, 40.6892]\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-an-animated-icon-to-the-map/","title":"Add an animated icon to the map","text":"<p>Add an animated icon to the map that was generated at runtime with the Canvas API.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add an animated icon to the map&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add an animated icon to the map that was generated at runtime with the Canvas API.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json'\n    });\n\n    const size = 200;\n\n    // implementation of StyleImageInterface to draw a pulsing dot icon on the map\n    // Search for StyleImageInterface in https://maplibre.org/maplibre-gl-js/docs/API/\n    const pulsingDot = {\n        width: size,\n        height: size,\n        data: new Uint8Array(size * size * 4),\n\n        // get rendering context for the map canvas when layer is added to the map\n        onAdd () {\n            const canvas = document.createElement('canvas');\n            canvas.width = this.width;\n            canvas.height = this.height;\n            this.context = canvas.getContext('2d');\n        },\n\n        // called once before every frame where the icon will be used\n        render () {\n            const duration = 1000;\n            const t = (performance.now() % duration) / duration;\n\n            const radius = (size / 2) * 0.3;\n            const outerRadius = (size / 2) * 0.7 * t + radius;\n            const context = this.context;\n\n            // draw outer circle\n            context.clearRect(0, 0, this.width, this.height);\n            context.beginPath();\n            context.arc(\n                this.width / 2,\n                this.height / 2,\n                outerRadius,\n                0,\n                Math.PI * 2\n            );\n            context.fillStyle = `rgba(255, 200, 200,${1 - t})`;\n            context.fill();\n\n            // draw inner circle\n            context.beginPath();\n            context.arc(\n                this.width / 2,\n                this.height / 2,\n                radius,\n                0,\n                Math.PI * 2\n            );\n            context.fillStyle = 'rgba(255, 100, 100, 1)';\n            context.strokeStyle = 'white';\n            context.lineWidth = 2 + 4 * (1 - t);\n            context.fill();\n            context.stroke();\n\n            // update this image's data with data from the canvas\n            this.data = context.getImageData(\n                0,\n                0,\n                this.width,\n                this.height\n            ).data;\n\n            // continuously repaint the map, resulting in the smooth animation of the dot\n            map.triggerRepaint();\n\n            // return `true` to let the map know that the image was updated\n            return true;\n        }\n    };\n\n    map.on('load', () =&gt; {\n        map.addImage('pulsing-dot', pulsingDot, {pixelRatio: 2});\n\n        map.addSource('points', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [0, 0]\n                        }\n                    }\n                ]\n            }\n        });\n        map.addLayer({\n            'id': 'points',\n            'type': 'symbol',\n            'source': 'points',\n            'layout': {\n                'icon-image': 'pulsing-dot'\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-an-icon-to-the-map/","title":"Add an icon to the map","text":"<p>Add an icon to the map from an external URL and use it in a symbol layer.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add an icon to the map&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add an icon to the map from an external URL and use it in a symbol layer.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json'\n    });\n\n    map.on('load', async () =&gt; {\n        image = await map.loadImage('https://upload.wikimedia.org/wikipedia/commons/7/7c/201408_cat.png');\n        map.addImage('cat', image.data);\n        map.addSource('point', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [0, 0]\n                        }\n                    }\n                ]\n            }\n        });\n        map.addLayer({\n            'id': 'points',\n            'type': 'symbol',\n            'source': 'point',\n            'layout': {\n                'icon-image': 'cat',\n                'icon-size': 0.25\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-contour-lines/","title":"Add Contour Lines","text":"<p>Add contour lines to your map from a raster-dem source.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add Contour Lines&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add contour lines to your map from a raster-dem source.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script src=\"https://unpkg.com/maplibre-contour@0.0.5/dist/index.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    const demSource = new mlcontour.DemSource({\n        url: 'https://demotiles.maplibre.org/terrain-tiles/{z}/{x}/{y}.png',\n        encoding: 'mapbox',\n        maxzoom: 12,\n        // offload contour line computation to a web worker\n        worker: true\n    });\n\n    // calls maplibregl.addProtocol to register a dynamic vector tile provider that\n    // downloads raster-dem tiles, computes contour lines, and encodes as a vector\n    // tile for each tile request from maplibre\n    demSource.setupMaplibre(maplibregl);\n\n    const map = (window.map = new maplibregl.Map({\n        container: 'map',\n        zoom: 13,\n        center: [11.3229, 47.2738],\n        hash: true,\n        style: {\n            version: 8,\n            glyphs: 'https://demotiles.maplibre.org/font/{fontstack}/{range}.pbf',\n            sources: {\n                hillshadeSource: {\n                    type: 'raster-dem',\n                    // share cached raster-dem tiles with the contour source\n                    tiles: [demSource.sharedDemProtocolUrl],\n                    tileSize: 512,\n                    maxzoom: 12\n                },\n                contourSourceFeet: {\n                    type: 'vector',\n                    tiles: [\n                        demSource.contourProtocolUrl({\n                        // meters to feet\n                            multiplier: 3.28084,\n                            overzoom: 1,\n                            thresholds: {\n                            // zoom: [minor, major]\n                                11: [200, 1000],\n                                12: [100, 500],\n                                13: [100, 500],\n                                14: [50, 200],\n                                15: [20, 100]\n                            },\n                            elevationKey: 'ele',\n                            levelKey: 'level',\n                            contourLayer: 'contours'\n                        })\n                    ],\n                    maxzoom: 15\n                }\n            },\n            layers: [\n                {\n                    id: 'hills',\n                    type: 'hillshade',\n                    source: 'hillshadeSource',\n                    layout: {visibility: 'visible'},\n                    paint: {'hillshade-exaggeration': 0.25}\n                },\n                {\n                    id: 'contours',\n                    type: 'line',\n                    source: 'contourSourceFeet',\n                    'source-layer': 'contours',\n                    paint: {\n                        'line-opacity': 0.5,\n                        // \"major\" contours have level=1, \"minor\" have level=0\n                        'line-width': ['match', ['get', 'level'], 1, 1, 0.5]\n                    }\n                },\n                {\n                    id: 'contour-text',\n                    type: 'symbol',\n                    source: 'contourSourceFeet',\n                    'source-layer': 'contours',\n                    filter: ['&gt;', ['get', 'level'], 0],\n                    paint: {\n                        'text-halo-color': 'white',\n                        'text-halo-width': 1\n                    },\n                    layout: {\n                        'symbol-placement': 'line',\n                        'text-size': 10,\n                        'text-field': [\n                            'concat',\n                            ['number-format', ['get', 'ele'], {}],\n                            '\\''\n                        ],\n                        'text-font': ['Noto Sans Bold']\n                    }\n                }\n            ]\n        }\n    }));\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-custom-icons-with-markers/","title":"Add custom icons with Markers","text":"<p>Add custom marker icons to your map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add custom icons with Markers&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add custom marker icons to your map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .marker {\n        display: block;\n        border: none;\n        border-radius: 50%;\n        cursor: pointer;\n        padding: 0;\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const geojson = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'properties': {\n                    'message': 'Foo',\n                    'iconSize': [60, 60]\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-66.324462890625, -16.024695711685304]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'message': 'Bar',\n                    'iconSize': [50, 50]\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-61.2158203125, -15.97189158092897]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'message': 'Baz',\n                    'iconSize': [40, 40]\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-63.29223632812499, -18.28151823530889]\n                }\n            }\n        ]\n    };\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [-65.017, -16.457],\n        zoom: 5\n    });\n\n    // add markers to map\n    geojson.features.forEach((marker) =&gt; {\n        // create a DOM element for the marker\n        const el = document.createElement('div');\n        el.className = 'marker';\n        el.style.backgroundImage =\n            `url(https://picsum.photos/${\n                marker.properties.iconSize.join('/')\n            }/)`;\n        el.style.width = `${marker.properties.iconSize[0]}px`;\n        el.style.height = `${marker.properties.iconSize[1]}px`;\n\n        el.addEventListener('click', () =&gt; {\n            window.alert(marker.properties.message);\n        });\n\n        // add marker to map\n        new maplibregl.Marker({element: el})\n            .setLngLat(marker.geometry.coordinates)\n            .addTo(map);\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-live-realtime-data/","title":"Add live realtime data","text":"<p>Use realtime GeoJSON data streams to move a symbol on your map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add live realtime data&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use realtime GeoJSON data streams to move a symbol on your map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        zoom: 2\n    });\n\n    map.on('load', () =&gt; {\n        window.setInterval(() =&gt; {\n            // Make a GET request to get two random numbers\n            fetch('https://www.random.org/decimal-fractions/?num=2&amp;dec=10&amp;col=1&amp;format=plain&amp;rnd=new')\n                .then(r =&gt; r.text())\n                .then(text =&gt; {\n                    // Takes the two random numbers between 0 and 1 and converts them to degrees\n                    const coordinates = text.split('\\n').map(l =&gt; (Number(l) * 180) - 90);\n                    const json = {\n                        type: 'Feature',\n                        geometry: {\n                            type: 'Point',\n                            coordinates\n                        }\n                    };\n                    // Update the drone symbol's location on the map\n                    map.getSource('drone').setData(json);\n\n                    // Fly the map to the drone's current location\n                    map.flyTo({\n                        center: json.geometry.coordinates,\n                        speed: 0.5\n                    });\n                });\n        }, 2000);\n\n        // Set initial location at (0,0).\n        map.addSource('drone', {type: 'geojson', data: {\n            type: 'Feature',\n            geometry: {\n                type: 'Point',\n                coordinates: [0, 0]\n            }\n        }});\n        map.addLayer({\n            'id': 'drone',\n            'type': 'symbol',\n            'source': 'drone',\n            'layout': {\n                'icon-image': 'airport'\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-multiple-geometries-from-one-geojson-source/","title":"Add multiple geometries from one GeoJSON source","text":"<p>Add a polygon and circle layer from the same GeoJSON source.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add multiple geometries from one GeoJSON source&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add a polygon and circle layer from the same GeoJSON source.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-121.403732, 40.492392],\n        zoom: 10\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('national-park', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Polygon',\n                            'coordinates': [\n                                [\n                                    [-121.353637, 40.584978],\n                                    [-121.284551, 40.584758],\n                                    [-121.275349, 40.541646],\n                                    [-121.246768, 40.541017],\n                                    [-121.251343, 40.423383],\n                                    [-121.32687, 40.423768],\n                                    [-121.360619, 40.43479],\n                                    [-121.363694, 40.409124],\n                                    [-121.439713, 40.409197],\n                                    [-121.439711, 40.423791],\n                                    [-121.572133, 40.423548],\n                                    [-121.577415, 40.550766],\n                                    [-121.539486, 40.558107],\n                                    [-121.520284, 40.572459],\n                                    [-121.487219, 40.550822],\n                                    [-121.446951, 40.56319],\n                                    [-121.370644, 40.563267],\n                                    [-121.353637, 40.584978]\n                                ]\n                            ]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-121.415061, 40.506229]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-121.505184, 40.488084]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-121.354465, 40.488737]\n                        }\n                    }\n                ]\n            }\n        });\n\n        map.addLayer({\n            'id': 'park-boundary',\n            'type': 'fill',\n            'source': 'national-park',\n            'paint': {\n                'fill-color': '#888888',\n                'fill-opacity': 0.4\n            },\n            'filter': ['==', '$type', 'Polygon']\n        });\n\n        map.addLayer({\n            'id': 'park-volcanoes',\n            'type': 'circle',\n            'source': 'national-park',\n            'paint': {\n                'circle-radius': 6,\n                'circle-color': '#B42222'\n            },\n            'filter': ['==', '$type', 'Point']\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/add-support-for-right-to-left-scripts/","title":"Add support for right-to-left scripts","text":"<p>Use the mapbox-gl-rtl-text plugin to support right-to-left languages such as Arabic and Hebrew.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Add support for right-to-left scripts&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use the mapbox-gl-rtl-text plugin to support right-to-left languages such as Arabic and Hebrew.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    maplibregl.setRTLTextPlugin(\n        'https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.3.0/dist/mapbox-gl-rtl-text.js',\n        true // Lazy load the plugin\n    );\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [44.3763, 33.2788],\n        zoom: 11\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/adding-3d-models-using-threejs-on-terrain/","title":"Adding 3D models using three.js on terrain","text":"<p>Use a custom style layer with three.js to add 3D models to a map with 3d terrain.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;title&gt;Adding 3D models using three.js on terrain&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use a custom style layer with three.js to add 3D models to a map with 3d terrain.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body {\n            margin: 0;\n            padding: 0;\n        }\n\n        html,\n        body,\n        #map {\n            height: 100%;\n        }\n    &lt;/style&gt;\n    &lt;script type=\"importmap\"&gt;\n        {\n            \"imports\": {\n            \"three\": \"https://cdn.jsdelivr.net/npm/three@0.169.0/build/three.module.js\",\n            \"three/addons/\": \"https://cdn.jsdelivr.net/npm/three@0.169.0/examples/jsm/\"\n            }\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script type=\"module\"&gt;\n    import * as THREE from 'three';\n    import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\n\n        /**\n         * Objective:\n         * Given two known world-locations `model1Location` and `model2Location`,\n         * place two three.js objects on those locations at the appropriate height of\n         * the terrain.\n         */\n\n        async function main() {\n\n            const map = new maplibregl.Map({\n                container: 'map',\n                center: [11.5257, 47.668],\n                zoom: 16.27,\n                pitch: 60,\n                bearing: -28.5,\n                canvasContextAttributes: {antialias: true},\n                style: {\n                    version: 8,\n                    layers: [\n                        {\n                            id: 'baseColor', // Hides edges of terrain tiles, which have 'walls' going down to 0.\n                            type: 'background',\n                            paint: {\n                                'background-color': '#fff',\n                                'background-opacity': 1.0,\n                            },\n                        }, {\n                            id: 'hills',\n                            type: 'hillshade',\n                            source: 'hillshadeSource',\n                            layout: {visibility: 'visible'},\n                            paint: {'hillshade-shadow-color': '#473B24'}\n                        }\n                    ],\n                    terrain: {\n                        source: 'terrainSource',\n                        exaggeration: 1,\n                    },\n                    sources: {\n                        terrainSource: {\n                            type: 'raster-dem',\n                            url: 'https://demotiles.maplibre.org/terrain-tiles/tiles.json',\n                            tileSize: 256\n                        },\n                        hillshadeSource: {\n                            type: 'raster-dem',\n                            url: 'https://demotiles.maplibre.org/terrain-tiles/tiles.json',\n                            tileSize: 256\n                        }\n                    },\n                }\n            });\n\n            /*\n            * Helper function used to get threejs-scene-coordinates from mercator coordinates.\n            * This is just a quick and dirty solution - it won't work if points are far away from each other\n            * because a meter near the north-pole covers more mercator-units\n            * than a meter near the equator.\n            */\n            function calculateDistanceMercatorToMeters(from, to) {\n                const mercatorPerMeter = from.meterInMercatorCoordinateUnits();\n                // mercator x: 0=west, 1=east\n                const dEast = to.x - from.x;\n                const dEastMeter = dEast / mercatorPerMeter;\n                // mercator y: 0=north, 1=south\n                const dNorth = from.y - to.y;\n                const dNorthMeter = dNorth / mercatorPerMeter;\n                return {dEastMeter, dNorthMeter};\n            }\n\n            async function loadModel() {\n                const loader = new GLTFLoader();\n                const gltf = await loader.loadAsync('https://maplibre.org/maplibre-gl-js/docs/assets/34M_17/34M_17.gltf');\n                const model = gltf.scene;\n                return model;\n            }\n\n            // Known locations. We'll infer the elevation of those locations once terrain is loaded.\n            const sceneOrigin = new maplibregl.LngLat(11.5255, 47.6677);\n            const model1Location = new maplibregl.LngLat(11.527, 47.6678);\n            const model2Location = new maplibregl.LngLat(11.5249, 47.6676);\n\n            // Configuration of the custom layer for a 3D model, implementing `CustomLayerInterface`.\n            const customLayer = {\n                id: '3d-model',\n                type: 'custom',\n                renderingMode: '3d',\n\n                onAdd(map, gl) {\n                    /**\n                     * Setting up three.js scene.\n                     * We're placing model1 and model2 in such a way that the whole scene fits over the terrain.\n                     */\n\n                    this.camera = new THREE.Camera();\n                    this.scene = new THREE.Scene();\n                    // In threejs, y points up - we're rotating the scene such that it's y points along maplibre's up.\n                    this.scene.rotateX(Math.PI / 2);\n                    // In threejs, z points toward the viewer - mirroring it such that z points along maplibre's north.\n                    this.scene.scale.multiply(new THREE.Vector3(1, 1, -1));\n                    // We now have a scene with (x=east, y=up, z=north)\n\n                    const light = new THREE.DirectionalLight(0xffffff);\n                    // Making it just before noon - light coming from south-east.\n                    light.position.set(50, 70, -30).normalize();\n                    this.scene.add(light);\n\n                    // Axes helper to show how threejs scene is oriented.\n                    const axesHelper = new THREE.AxesHelper(60);\n                    this.scene.add(axesHelper);\n\n                    // Getting model elevations in meters above sea level\n                    const sceneElevation = map.queryTerrainElevation(sceneOrigin) || 0;\n                    const model1Elevation = map.queryTerrainElevation(model1Location) || 0;\n                    const model2Elevation = map.queryTerrainElevation(model2Location) || 0;\n                    const model1up = model1Elevation - sceneElevation;\n                    const model2up = model2Elevation - sceneElevation;\n\n                    // Getting model x and y (in meters) relative to scene origin.\n                    const sceneOriginMercator = maplibregl.MercatorCoordinate.fromLngLat(sceneOrigin);\n                    const model1Mercator = maplibregl.MercatorCoordinate.fromLngLat(model1Location);\n                    const model2Mercator = maplibregl.MercatorCoordinate.fromLngLat(model2Location);\n                    const {dEastMeter: model1east, dNorthMeter: model1north} = calculateDistanceMercatorToMeters(sceneOriginMercator, model1Mercator);\n                    const {dEastMeter: model2east, dNorthMeter: model2north} = calculateDistanceMercatorToMeters(sceneOriginMercator, model2Mercator);\n\n                    model1.position.set(model1east, model1up, model1north);\n                    model2.position.set(model2east, model2up, model2north);\n\n                    this.scene.add(model1);\n                    this.scene.add(model2);\n\n                    // Use the MapLibre GL JS map canvas for three.js.\n                    this.renderer = new THREE.WebGLRenderer({\n                        canvas: map.getCanvas(),\n                        context: gl,\n                        antialias: true\n                    });\n\n                    this.renderer.autoClear = false;\n                },\n\n                render(gl, args) {\n                    const offsetFromCenterElevation = map.queryTerrainElevation(sceneOrigin) || 0;\n                    const sceneOriginMercator = maplibregl.MercatorCoordinate.fromLngLat(sceneOrigin, offsetFromCenterElevation);\n\n                    const sceneTransform = {\n                        translateX: sceneOriginMercator.x,\n                        translateY: sceneOriginMercator.y,\n                        translateZ: sceneOriginMercator.z,\n                        scale: sceneOriginMercator.meterInMercatorCoordinateUnits()\n                    };\n\n                    const m = new THREE.Matrix4().fromArray(args.defaultProjectionData.mainMatrix);\n                    const l = new THREE.Matrix4()\n                        .makeTranslation(sceneTransform.translateX, sceneTransform.translateY, sceneTransform.translateZ)\n                        .scale(new THREE.Vector3(sceneTransform.scale, -sceneTransform.scale, sceneTransform.scale));\n\n                    this.camera.projectionMatrix = m.multiply(l);\n                    this.renderer.resetState();\n                    this.renderer.render(this.scene, this.camera);\n                    map.triggerRepaint();\n                }\n            };\n\n            const results = await Promise.all([map.once('load'), loadModel()]);\n            const model1 = results[1];\n            const model2 = model1.clone();\n\n            map.addLayer(customLayer);\n        }\n\n        main();\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/animate-a-line/","title":"Animate a line","text":"<p>Animate a line by updating a GeoJSON source on each frame.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Animate a line&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Animate a line by updating a GeoJSON source on each frame.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    button {\n        position: absolute;\n        top: 0;\n        margin: 20px;\n    }\n\n    #pause::after {\n        content: 'Pause';\n    }\n\n    #pause.pause::after {\n        content: 'Play';\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;button id=\"pause\"&gt;&lt;/button&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [0, 0],\n        zoom: 0.5\n    });\n\n    // Create a GeoJSON source with an empty lineString.\n    const geojson = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'geometry': {\n                    'type': 'LineString',\n                    'coordinates': [[0, 0]]\n                }\n            }\n        ]\n    };\n\n    const speedFactor = 30; // number of frames per longitude degree\n    let animation; // to store and cancel the animation\n    let startTime = 0;\n    let progress = 0; // progress = timestamp - startTime\n    let resetTime = false; // indicator of whether time reset is needed for the animation\n    const pauseButton = document.getElementById('pause');\n\n    map.on('load', () =&gt; {\n        map.addSource('line', {\n            'type': 'geojson',\n            'data': geojson\n        });\n\n        // add the line which will be modified in the animation\n        map.addLayer({\n            'id': 'line-animation',\n            'type': 'line',\n            'source': 'line',\n            'layout': {\n                'line-cap': 'round',\n                'line-join': 'round'\n            },\n            'paint': {\n                'line-color': '#ed6498',\n                'line-width': 5,\n                'line-opacity': 0.8\n            }\n        });\n\n        startTime = performance.now();\n\n        animateLine();\n\n        // click the button to pause or play\n        pauseButton.addEventListener('click', () =&gt; {\n            pauseButton.classList.toggle('pause');\n            if (pauseButton.classList.contains('pause')) {\n                cancelAnimationFrame(animation);\n            } else {\n                resetTime = true;\n                animateLine();\n            }\n        });\n\n        // reset startTime and progress once the tab loses or gains focus\n        // requestAnimationFrame also pauses on hidden tabs by default\n        document.addEventListener('visibilitychange', () =&gt; {\n            resetTime = true;\n        });\n\n        // animated in a circle as a sine wave along the map.\n        function animateLine(timestamp) {\n            if (resetTime) {\n                // resume previous progress\n                startTime = performance.now() - progress;\n                resetTime = false;\n            } else {\n                progress = timestamp - startTime;\n            }\n\n            // restart if it finishes a loop\n            if (progress &gt; speedFactor * 360) {\n                startTime = timestamp;\n                geojson.features[0].geometry.coordinates = [];\n            } else {\n                const x = progress / speedFactor;\n                // draw a sine wave with some math.\n                const y = Math.sin((x * Math.PI) / 90) * 40;\n                // append new coordinates to the lineString\n                geojson.features[0].geometry.coordinates.push([x, y]);\n                // then update the map\n                map.getSource('line').setData(geojson);\n            }\n            // Request the next frame of the animation.\n            animation = requestAnimationFrame(animateLine);\n        }\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/animate-a-marker/","title":"Animate a marker","text":"<p>Animate the position of a marker by updating its location on each frame.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Animate a marker&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Animate the position of a marker by updating its location on each frame.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [0, 0],\n        zoom: 2\n    });\n\n    const marker = new maplibregl.Marker();\n\n    function animateMarker(timestamp) {\n        const radius = 20;\n\n        // Update the data to a new position based on the animation timestamp. The\n        // divisor in the expression `timestamp / 1000` controls the animation speed.\n        marker.setLngLat([\n            Math.cos(timestamp / 1000) * radius,\n            Math.sin(timestamp / 1000) * radius\n        ]);\n\n        // Ensure it's added to the map. This is safe to call if it's already added.\n        marker.addTo(map);\n\n        // Request the next frame of the animation.\n        requestAnimationFrame(animateMarker);\n    }\n\n    // Start the animation.\n    requestAnimationFrame(animateMarker);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/animate-a-point-along-a-route/","title":"Animate a point along a route","text":"<p>Use Turf to smoothly animate a point along the distance of a line.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Animate a point along a route&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use Turf to smoothly animate a point along the distance of a line.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .overlay {\n        position: absolute;\n        top: 10px;\n        left: 10px;\n    }\n\n    .overlay button {\n        font: 600 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n        background-color: #3386c0;\n        color: #fff;\n        display: inline-block;\n        margin: 0;\n        padding: 10px 20px;\n        border: none;\n        cursor: pointer;\n        border-radius: 3px;\n    }\n\n    .overlay button:hover {\n        background-color: #4ea0da;\n    }\n&lt;/style&gt;\n&lt;script\n    src=\"https://www.unpkg.com/turf@2.0.0/turf.min.js\"\n    charset=\"utf-8\"\n&gt;&lt;/script&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div class=\"overlay\"&gt;\n    &lt;button id=\"replay\"&gt;Replay&lt;/button&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-96, 37.8],\n        zoom: 3\n    });\n\n    // San Francisco\n    const origin = [-122.414, 37.776];\n\n    // Washington DC\n    const destination = [-77.032, 38.913];\n\n    // A simple line from origin to destination.\n    const route = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'geometry': {\n                    'type': 'LineString',\n                    'coordinates': [origin, destination]\n                }\n            }\n        ]\n    };\n\n    // A single point that animates along the route.\n    // Coordinates are initially set to origin.\n    const point = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': origin\n                }\n            }\n        ]\n    };\n\n    // Calculate the distance in kilometers between route start/end point.\n    const lineDistance = turf.lineDistance(route.features[0], 'kilometers');\n\n    const arc = [];\n\n    // Number of steps to use in the arc and animation, more steps means\n    // a smoother arc and animation, but too many steps will result in a\n    // low frame rate\n    const steps = 500;\n\n    // Draw an arc between the `origin` &amp; `destination` of the two points\n    for (let i = 0; i &lt; lineDistance; i += lineDistance / steps) {\n        const segment = turf.along(route.features[0], i, 'kilometers');\n        arc.push(segment.geometry.coordinates);\n    }\n\n    // Update the route with calculated arc coordinates\n    route.features[0].geometry.coordinates = arc;\n\n    // Used to increment the value of the point measurement against the route.\n    let counter = 0;\n\n    map.on('load', () =&gt; {\n        // Add a source and layer displaying a point which will be animated in a circle.\n        map.addSource('route', {\n            'type': 'geojson',\n            'data': route\n        });\n\n        map.addSource('point', {\n            'type': 'geojson',\n            'data': point\n        });\n\n        map.addLayer({\n            'id': 'route',\n            'source': 'route',\n            'type': 'line',\n            'paint': {\n                'line-width': 2,\n                'line-color': '#007cbf'\n            }\n        });\n\n        map.addLayer({\n            'id': 'point',\n            'source': 'point',\n            'type': 'symbol',\n            'layout': {\n                'icon-image': 'airport',\n                'icon-rotate': ['get', 'bearing'],\n                'icon-rotation-alignment': 'map',\n                'icon-overlap': 'always',\n                'icon-ignore-placement': true\n            }\n        });\n\n        function animate() {\n            // Update point geometry to a new position based on counter denoting\n            // the index to access the arc.\n            point.features[0].geometry.coordinates =\n                route.features[0].geometry.coordinates[counter];\n\n            // Calculate the bearing to ensure the icon is rotated to match the route arc\n            // The bearing is calculate between the current point and the next point, except\n            // at the end of the arc use the previous point and the current point\n            point.features[0].properties.bearing = turf.bearing(\n                turf.point(\n                    route.features[0].geometry.coordinates[\n                        counter &gt;= steps ? counter - 1 : counter\n                    ]\n                ),\n                turf.point(\n                    route.features[0].geometry.coordinates[\n                        counter &gt;= steps ? counter : counter + 1\n                    ]\n                )\n            );\n\n            // Update the source with this new data.\n            map.getSource('point').setData(point);\n\n            // Request the next frame of animation so long the end has not been reached.\n            if (counter &lt; steps) {\n                requestAnimationFrame(animate);\n            }\n\n            counter = counter + 1;\n        }\n\n        document\n            .getElementById('replay')\n            .addEventListener('click', () =&gt; {\n                // Set the coordinates of the original point back to origin\n                point.features[0].geometry.coordinates = origin;\n\n                // Update the source layer\n                map.getSource('point').setData(point);\n\n                // Reset the counter\n                counter = 0;\n\n                // Restart the animation.\n                animate(counter);\n            });\n\n        // Start the animation.\n        animate(counter);\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/animate-a-point/","title":"Animate a point","text":"<p>Animate the position of a point by updating a GeoJSON source on each frame.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Animate a point&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Animate the position of a point by updating a GeoJSON source on each frame.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [0, 0],\n        zoom: 2\n    });\n\n    const radius = 20;\n\n    function pointOnCircle(angle) {\n        return {\n            'type': 'Point',\n            'coordinates': [Math.cos(angle) * radius, Math.sin(angle) * radius]\n        };\n    }\n\n    map.on('load', () =&gt; {\n        // Add a source and layer displaying a point which will be animated in a circle.\n        map.addSource('point', {\n            'type': 'geojson',\n            'data': pointOnCircle(0)\n        });\n\n        map.addLayer({\n            'id': 'point',\n            'source': 'point',\n            'type': 'circle',\n            'paint': {\n                'circle-radius': 10,\n                'circle-color': '#007cbf'\n            }\n        });\n\n        function animateMarker(timestamp) {\n            // Update the data to a new position based on the animation timestamp. The\n            // divisor in the expression `timestamp / 1000` controls the animation speed.\n            map.getSource('point').setData(pointOnCircle(timestamp / 1000));\n\n            // Request the next frame of the animation.\n            requestAnimationFrame(animateMarker);\n        }\n\n        // Start the animation.\n        animateMarker(0);\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/animate-a-series-of-images/","title":"Animate a series of images","text":"<p>Use a series of image sources to create an animation.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Animate a series of images&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use a series of image sources to create an animation.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        maxZoom: 5.99,\n        minZoom: 4,\n        zoom: 5,\n        center: [-75.789, 41.874]\n    });\n\n    const frameCount = 5;\n    let currentImage = 0;\n\n    function getPath() {\n        return (\n            `https://maplibre.org/maplibre-gl-js/docs/assets/radar${\n                currentImage\n            }.gif`\n        );\n    }\n\n    map.on('load', () =&gt; {\n        map.addSource('radar', {\n            type: 'image',\n            url: getPath(),\n            coordinates: [\n                [-80.425, 46.437],\n                [-71.516, 46.437],\n                [-71.516, 37.936],\n                [-80.425, 37.936]\n            ]\n        });\n        map.addLayer({\n            id: 'radar-layer',\n            'type': 'raster',\n            'source': 'radar',\n            'paint': {\n                'raster-fade-duration': 0\n            }\n        });\n\n        setInterval(() =&gt; {\n            currentImage = (currentImage + 1) % frameCount;\n            map.getSource('radar').updateImage({url: getPath()});\n        }, 200);\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/animate-map-camera-around-a-point/","title":"Animate map camera around a point","text":"<p>Animate the map camera around a point.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Animate map camera around a point&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Animate the map camera around a point.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/liberty',\n        center: [-87.62712, 41.89033],\n        zoom: 15.5,\n        pitch: 45\n    });\n\n    function rotateCamera(timestamp) {\n        // clamp the rotation between 0 -360 degrees\n        // Divide timestamp by 100 to slow rotation to ~10 degrees / sec\n        map.rotateTo((timestamp / 100) % 360, {duration: 0});\n        // Request the next frame of the animation.\n        requestAnimationFrame(rotateCamera);\n    }\n\n    map.on('load', () =&gt; {\n        // Start the animation.\n        rotateCamera(0);\n\n        // Add 3d buildings and remove label layers to enhance the map\n        const layers = map.getStyle().layers;\n        for (let i = 0; i &lt; layers.length; i++) {\n            if (layers[i].type === 'symbol' &amp;&amp; layers[i].layout['text-field']) {\n                // remove text labels\n                map.removeLayer(layers[i].id);\n            }\n        }\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/animate-symbol-to-follow-the-mouse/","title":"Animate symbol to follow the mouse","text":"<p>Animate symbol to follow the mouse.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;title&gt;Animate symbol to follow the mouse&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Animate symbol to follow the mouse.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body {\n            margin: 0;\n            padding: 0;\n        }\n\n        html,\n        body,\n        #map {\n            height: 100%;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id=\"map\"&gt;&lt;/div&gt;\n    &lt;script&gt;\n        const map = new maplibregl.Map({\n            container: 'map',\n            projection: {type: 'globe'},\n            style: 'https://demotiles.maplibre.org/style.json',\n            center: [0, 0],\n            zoom: 2\n        });\n\n        map.on('mousemove', (e) =&gt; {\n            const lngLat = e.lngLat.wrap();\n            const pointSource = map.getSource('point');\n\n            if (pointSource &amp;&amp; lngLat.lng &amp;&amp; lngLat.lat) {\n                pointSource.setData({\n                    'type': 'Point',\n                    'coordinates': [lngLat.lng, lngLat.lat]\n                });\n            }\n        });\n        map.addControl(new maplibregl.GlobeControl());\n\n        map.on('load', () =&gt; {\n\n            map.addSource('point', {\n                'type': 'geojson',\n                'data': {\n                    'type': 'Point',\n                    'coordinates': [0, 0]\n                }\n            });\n\n            map.addLayer({\n                'id': 'point',\n                'source': 'point',\n                'type': 'circle',\n                'paint': {\n                    'circle-radius': 10,\n                    'circle-color': '#007cbf'\n                }\n            });\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/attach-a-popup-to-a-marker-instance/","title":"Attach a popup to a marker instance","text":"<p>Attach a popup to a marker and display it on click.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Attach a popup to a marker instance&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Attach a popup to a marker and display it on click.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #marker {\n        background-image: url('https://maplibre.org/maplibre-gl-js/docs/assets/washington-monument.jpg');\n        background-size: cover;\n        width: 50px;\n        height: 50px;\n        border-radius: 50%;\n        cursor: pointer;\n    }\n\n    .maplibregl-popup {\n        max-width: 200px;\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const monument = [-77.0353, 38.8895];\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: monument,\n        zoom: 5\n    });\n\n    // create the popup\n    const popup = new maplibregl.Popup({offset: 25}).setText(\n        'Construction on the Washington Monument began in 1848.'\n    );\n\n    // create DOM element for the marker\n    const el = document.createElement('div');\n    el.id = 'marker';\n\n    // create the marker\n    new maplibregl.Marker({element: el})\n        .setLngLat(monument)\n        .setPopup(popup) // sets a popup on this marker\n        .addTo(map);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/center-the-map-on-a-clicked-symbol/","title":"Center the map on a clicked symbol","text":"<p>Use events and flyTo to center the map on a symbol.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Center the map on a clicked symbol&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use events and flyTo to center the map on a symbol.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [-90.96, -0.47],\n        zoom: 7.5\n    });\n\n    map.on('load', async () =&gt; {\n        // Add an image to use as a custom marker\n        const image = await map.loadImage('https://maplibre.org/maplibre-gl-js/docs/assets/custom_marker.png');\n        map.addImage('custom-marker', image.data);\n        // Add a GeoJSON source with 3 points.\n        map.addSource('points', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'properties': {},\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [\n                                -91.395263671875,\n                                -0.9145729757782163\n                            ]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {},\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [\n                                -90.32958984375,\n                                -0.6344474832838974\n                            ]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {},\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [\n                                -91.34033203125,\n                                0.01647949196029245\n                            ]\n                        }\n                    }\n                ]\n            }\n        });\n\n        // Add a symbol layer\n        map.addLayer({\n            'id': 'symbols',\n            'type': 'symbol',\n            'source': 'points',\n            'layout': {\n                'icon-image': 'custom-marker'\n            }\n        });\n\n        // Center the map on the coordinates of any clicked symbol from the 'symbols' layer.\n        map.on('click', 'symbols', (e) =&gt; {\n            map.flyTo({\n                center: e.features[0].geometry.coordinates\n            });\n        });\n\n        // Change the cursor to a pointer when the it enters a feature in the 'symbols' layer.\n        map.on('mouseenter', 'symbols', () =&gt; {\n            map.getCanvas().style.cursor = 'pointer';\n        });\n\n        // Change it back to a pointer when it leaves.\n        map.on('mouseleave', 'symbols', () =&gt; {\n            map.getCanvas().style.cursor = '';\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/change-a-layers-color-with-buttons/","title":"Change a layer's color with buttons","text":"<p>Use setPaintProperty to change a layer's fill color.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Change a layer's color with buttons&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use setPaintProperty to change a layer's fill color.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .map-overlay {\n        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n        position: absolute;\n        width: 200px;\n        top: 0;\n        left: 0;\n        padding: 10px;\n    }\n\n    .map-overlay .map-overlay-inner {\n        background-color: #fff;\n        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n        border-radius: 3px;\n        padding: 10px;\n        margin-bottom: 10px;\n    }\n\n    .map-overlay-inner fieldset {\n        border: none;\n        padding: 0;\n        margin: 0 0 10px;\n    }\n\n    .map-overlay-inner fieldset:last-child {\n        margin: 0;\n    }\n\n    .map-overlay-inner select {\n        width: 100%;\n    }\n\n    .map-overlay-inner label {\n        display: block;\n        font-weight: bold;\n        margin: 0 0 5px;\n    }\n\n    .map-overlay-inner button {\n        display: inline-block;\n        width: 36px;\n        height: 20px;\n        border: none;\n        cursor: pointer;\n    }\n\n    .map-overlay-inner button:focus {\n        outline: none;\n    }\n\n    .map-overlay-inner button:hover {\n        box-shadow: inset 0 0 0 3px rgba(0, 0, 0, 0.1);\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div class=\"map-overlay top\"&gt;\n    &lt;div class=\"map-overlay-inner\"&gt;\n        &lt;fieldset&gt;\n            &lt;label for=\"layer\"&gt;Select layer&lt;/label&gt;\n            &lt;select id=\"layer\" name=\"layer\"&gt;\n                &lt;option value=\"water\"&gt;Water&lt;/option&gt;\n                &lt;option value=\"building-top\"&gt;Buildings&lt;/option&gt;\n            &lt;/select&gt;\n        &lt;/fieldset&gt;\n        &lt;fieldset&gt;\n            &lt;label&gt;Choose a color&lt;/label&gt;\n            &lt;div id=\"swatches\"&gt;&lt;/div&gt;\n        &lt;/fieldset&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [12.338, 45.4385],\n        zoom: 17.4\n    });\n\n    const swatches = document.getElementById('swatches');\n    const layer = document.getElementById('layer');\n    const colors = [\n        '#ffffcc',\n        '#a1dab4',\n        '#41b6c4',\n        '#2c7fb8',\n        '#253494',\n        '#fed976',\n        '#feb24c',\n        '#fd8d3c',\n        '#f03b20',\n        '#bd0026'\n    ];\n\n    colors.forEach((color) =&gt; {\n        const swatch = document.createElement('button');\n        swatch.style.backgroundColor = color;\n        swatch.addEventListener('click', () =&gt; {\n            map.setPaintProperty(\n                layer.value,\n                'fill-color',\n                color\n            );\n        });\n        swatches.appendChild(swatch);\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/change-a-maps-language/","title":"Change a map's language","text":"<p>Use setLayoutProperty to switch languages dynamically.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Change a map's language&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use setLayoutProperty to switch languages dynamically.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #buttons {\n        display: flex;\n        justify-content: space-between;\n        position: absolute;\n        top: 20px;\n        width: 90%;\n    }\n    .button {\n        display: inline-block;\n        cursor: pointer;\n        width: 20%;\n        padding: 8px;\n        border-radius: 3px;\n        margin-top: 10px;\n        font-size: 12px;\n        text-align: center;\n        color: #fff;\n        background: #ee8a65;\n        font-family: sans-serif;\n        font-weight: bold;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;ul id=\"buttons\"&gt;\n    &lt;li id=\"button-fr\" class=\"button\"&gt;French&lt;/li&gt;\n    &lt;li id=\"button-ru\" class=\"button\"&gt;Russian&lt;/li&gt;\n    &lt;li id=\"button-de\" class=\"button\"&gt;German&lt;/li&gt;\n    &lt;li id=\"button-es\" class=\"button\"&gt;Spanish&lt;/li&gt;\n&lt;/ul&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [16.05, 48],\n        zoom: 2.9\n    });\n\n    document\n        .getElementById('buttons')\n        .addEventListener('click', (event) =&gt; {\n            const language = event.target.id.substr('button-'.length);\n            // Use setLayoutProperty to set the value of a layout property in a style layer.\n            // The three arguments are the id of the layer, the name of the layout property,\n            // and the new property value.\n            map.setLayoutProperty('label_country_1', 'text-field', [\n                'get',\n                `name:${language}`\n            ]);\n            map.setLayoutProperty('label_country_2', 'text-field', [\n                'get',\n                `name:${language}`\n            ]);\n            map.setLayoutProperty('label_country_3', 'text-field', [\n                'get',\n                `name:${language}`\n            ]);\n        });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/change-building-color-based-on-zoom-level/","title":"Change building color based on zoom level","text":"<p>Use the interpolate expression to ease-in the building layer and smoothly fade from one color to the next.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Change building color based on zoom level&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use the interpolate expression to ease-in the building layer and smoothly fade from one color to the next.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #zoom {\n        display: block;\n        position: absolute;\n        top: 20px;\n        left: 50%;\n        transform: translate(-50%);\n        width: 50%;\n        height: 40px;\n        padding: 10px;\n        border: none;\n        border-radius: 3px;\n        font-size: 12px;\n        text-align: center;\n        color: #fff;\n        background: #ee8a65;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;button id=\"zoom\"&gt;Zoom to buildings&lt;/button&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-90.73414, 14.55524],\n        zoom: 13\n    });\n\n    map.on('load', () =&gt; {\n        map.setPaintProperty('building-top', 'fill-color', [\n            'interpolate',\n            ['exponential', 0.5],\n            ['zoom'],\n            15,\n            '#e2714b',\n            22,\n            '#eee695'\n        ]);\n\n        map.setPaintProperty('building-top', 'fill-opacity', [\n            'interpolate',\n            ['exponential', 0.5],\n            ['zoom'],\n            15,\n            0,\n            22,\n            1\n        ]);\n    });\n\n    document.getElementById('zoom').addEventListener('click', () =&gt; {\n        map.zoomTo(19, {duration: 9000});\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/change-the-case-of-labels/","title":"Change the case of labels","text":"<p>Use the upcase and downcase expressions to change the case of labels.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Change the case of labels&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use the upcase and downcase expressions to change the case of labels.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style: 'https://tiles.openfreemap.org/styles/bright', // stylesheet location\n        center: [-116.231, 43.604], // starting position [lng, lat]\n        zoom: 11 // starting zoom\n    });\n\n    map.on('load', () =&gt; {\n        // data from https://opendata.cityofboise.org/\n        map.addSource('off-leash-areas', {\n            'type': 'geojson',\n            'data':\n                'https://maplibre.org/maplibre-gl-js/docs/assets/boise.geojson'\n        });\n        map.addLayer({\n            'id': 'off-leash-areas',\n            'type': 'symbol',\n            'source': 'off-leash-areas',\n            'layout': {\n                'icon-image': 'dog_park',\n                'text-field': [\n                    'format',\n                    ['upcase', ['get', 'FacilityName']],\n                    {'font-scale': 0.8},\n                    '\\n',\n                    {},\n                    ['downcase', ['get', 'Comments']],\n                    {'font-scale': 0.6}\n                ],\n                'text-font': ['Noto Sans Regular'],\n                'text-offset': [0, 0.6],\n                'text-anchor': 'top'\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/change-the-default-position-for-attribution/","title":"Change the default position for attribution","text":"<p>Place attribution in the top-left position when initializing a map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Change the default position for attribution&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Place attribution in the top-left position when initializing a map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [-77.04, 38.907],\n        zoom: 2,\n        attributionControl: false\n    });\n    map.addControl(new maplibregl.AttributionControl(), 'top-left');\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/check-if-webgl-is-supported/","title":"Check if WebGL is supported","text":"<p>Check for WebGL browser support.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Check if WebGL is supported&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Check for WebGL browser support.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    function isWebglSupported() {\n        if (window.WebGLRenderingContext) {\n            const canvas = document.createElement('canvas');\n            try {\n                // Note that { failIfMajorPerformanceCaveat: true } can be passed as a second argument\n                // to canvas.getContext(), causing the check to fail if hardware rendering is not available. See\n                // https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\n                // for more details.\n                const context = canvas.getContext('webgl2') || canvas.getContext('webgl');\n                if (context &amp;&amp; typeof context.getParameter == 'function') {\n                    return true;\n                }\n            } catch (e) {\n                // WebGL is supported, but disabled\n            }\n            return false;\n        }\n        // WebGL not supported\n        return false;\n    }\n    if (!isWebglSupported()) {\n        alert('Your browser does not support WebGL');\n    } else {\n        const map = new maplibregl.Map({\n            container: 'map',\n            style: 'https://demotiles.maplibre.org/style.json',\n            center: [-74.5, 40],\n            zoom: 2\n        });\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/cooperative-gestures/","title":"Cooperative gestures","text":"<p>Enable cooperative gestures. See how it behaves in fullscreen mode.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Cooperative gestures&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Enable cooperative gestures. See how it behaves in fullscreen mode.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [-74.5, 40],\n        cooperativeGestures: true,\n        zoom: 4\n    });\n    map.addControl(new maplibregl.FullscreenControl());\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/create-a-draggable-marker/","title":"Create a draggable Marker","text":"<p>Drag the marker to a new location on a map and populate its coordinates in a display.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Create a draggable Marker&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Drag the marker to a new location on a map and populate its coordinates in a display.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .coordinates {\n        background: rgba(0, 0, 0, 0.5);\n        color: #fff;\n        position: absolute;\n        bottom: 40px;\n        left: 10px;\n        padding: 5px 10px;\n        margin: 0;\n        font-size: 11px;\n        line-height: 18px;\n        border-radius: 3px;\n        display: none;\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;pre id=\"coordinates\" class=\"coordinates\"&gt;&lt;/pre&gt;\n\n&lt;script&gt;\n    const coordinates = document.getElementById('coordinates');\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [0, 0],\n        zoom: 2\n    });\n\n    const marker = new maplibregl.Marker({draggable: true})\n        .setLngLat([0, 0])\n        .addTo(map);\n\n    function onDragEnd() {\n        const lngLat = marker.getLngLat();\n        coordinates.style.display = 'block';\n        coordinates.innerHTML =\n            `Longitude: ${lngLat.lng}&lt;br /&gt;Latitude: ${lngLat.lat}`;\n    }\n\n    marker.on('dragend', onDragEnd);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/create-a-draggable-point/","title":"Create a draggable point","text":"<p>Drag the point to a new location on a map and populate its coordinates in a display.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Create a draggable point&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Drag the point to a new location on a map and populate its coordinates in a display.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .coordinates {\n        background: rgba(0, 0, 0, 0.5);\n        color: #fff;\n        position: absolute;\n        bottom: 40px;\n        left: 10px;\n        padding: 5px 10px;\n        margin: 0;\n        font-size: 11px;\n        line-height: 18px;\n        border-radius: 3px;\n        display: none;\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;pre id=\"coordinates\" class=\"coordinates\"&gt;&lt;/pre&gt;\n\n&lt;script&gt;\n    const coordinates = document.getElementById('coordinates');\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [0, 0],\n        zoom: 2\n    });\n\n    const canvas = map.getCanvasContainer();\n\n    const geojson = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [0, 0]\n                }\n            }\n        ]\n    };\n\n    function onMove(e) {\n        const coords = e.lngLat;\n\n        // Set a UI indicator for dragging.\n        canvas.style.cursor = 'grabbing';\n\n        // Update the Point feature in `geojson` coordinates\n        // and call setData to the source layer `point` on it.\n        geojson.features[0].geometry.coordinates = [coords.lng, coords.lat];\n        map.getSource('point').setData(geojson);\n    }\n\n    function onUp(e) {\n        const coords = e.lngLat;\n\n        // Print the coordinates of where the point had\n        // finished being dragged to on the map.\n        coordinates.style.display = 'block';\n        coordinates.innerHTML =\n            `Longitude: ${coords.lng}&lt;br /&gt;Latitude: ${coords.lat}`;\n        canvas.style.cursor = '';\n\n        // Unbind mouse/touch events\n        map.off('mousemove', onMove);\n        map.off('touchmove', onMove);\n    }\n\n    map.on('load', () =&gt; {\n        // Add a single point to the map\n        map.addSource('point', {\n            'type': 'geojson',\n            'data': geojson\n        });\n\n        map.addLayer({\n            'id': 'point',\n            'type': 'circle',\n            'source': 'point',\n            'paint': {\n                'circle-radius': 10,\n                'circle-color': '#3887be'\n            }\n        });\n\n        // When the cursor enters a feature in the point layer, prepare for dragging.\n        map.on('mouseenter', 'point', () =&gt; {\n            map.setPaintProperty('point', 'circle-color', '#3bb2d0');\n            canvas.style.cursor = 'move';\n        });\n\n        map.on('mouseleave', 'point', () =&gt; {\n            map.setPaintProperty('point', 'circle-color', '#3887be');\n            canvas.style.cursor = '';\n        });\n\n        map.on('mousedown', 'point', (e) =&gt; {\n            // Prevent the default map drag behavior.\n            e.preventDefault();\n\n            canvas.style.cursor = 'grab';\n\n            map.on('mousemove', onMove);\n            map.once('mouseup', onUp);\n        });\n\n        map.on('touchstart', 'point', (e) =&gt; {\n            if (e.points.length !== 1) return;\n\n            // Prevent the default map drag behavior.\n            e.preventDefault();\n\n            map.on('touchmove', onMove);\n            map.once('touchend', onUp);\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/create-a-gradient-dashed-line-using-an-expression/","title":"Create a gradient line with dasharray using an expression","text":"<p>Use the line-gradient and line-dasharray paint properties together to create a dashed line with gradient colors.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Create a gradient line with dasharray using an expression&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use the line-gradient and line-dasharray paint properties together to create a dashed line with gradient colors.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = (window.map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-77.035, 38.875],\n        zoom: 12\n    }));\n\n    const geojson = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'coordinates': [\n                        [-77.044211, 38.852924],\n                        [-77.045659, 38.860158],\n                        [-77.044232, 38.862326],\n                        [-77.040879, 38.865454],\n                        [-77.039936, 38.867698],\n                        [-77.040338, 38.86943],\n                        [-77.04264, 38.872528],\n                        [-77.03696, 38.878424],\n                        [-77.032309, 38.87937],\n                        [-77.030056, 38.880945],\n                        [-77.027645, 38.881779],\n                        [-77.026946, 38.882645],\n                        [-77.026942, 38.885502],\n                        [-77.028054, 38.887449],\n                        [-77.02806, 38.892088],\n                        [-77.03364, 38.892108],\n                        [-77.033643, 38.899926]\n                    ],\n                    'type': 'LineString'\n                }\n            }\n        ]\n    };\n\n    map.on('load', () =&gt; {\n        // 'line-gradient' can only be used with GeoJSON sources\n        // and the source must have the 'lineMetrics' option set to true\n        map.addSource('line', {\n            type: 'geojson',\n            lineMetrics: true,\n            data: geojson\n        });\n\n        // the layer must be of type 'line'\n        map.addLayer({\n            type: 'line',\n            source: 'line',\n            id: 'line',\n            paint: {\n                'line-color': 'red',\n                'line-width': 14,\n                // 'line-gradient' must be specified using an expression\n                // with the special 'line-progress' property\n                'line-gradient': [\n                    'interpolate',\n                    ['linear'],\n                    ['line-progress'],\n                    0,\n                    'blue',\n                    0.1,\n                    'royalblue',\n                    0.3,\n                    'cyan',\n                    0.5,\n                    'lime',\n                    0.7,\n                    'yellow',\n                    1,\n                    'red'\n                ],\n                // 'line-dasharray' can be combined with 'line-gradient'\n                'line-dasharray': [10, 2.4]\n            },\n            layout: {\n                'line-cap': 'round',\n                'line-join': 'round'\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/create-a-gradient-line-using-an-expression/","title":"Create a gradient line using an expression","text":"<p>Use the line-gradient paint property and an expression to visualize distance from the starting point of a line.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Create a gradient line using an expression&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use the line-gradient paint property and an expression to visualize distance from the starting point of a line.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = (window.map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-77.035, 38.875],\n        zoom: 12\n    }));\n\n    const geojson = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'coordinates': [\n                        [-77.044211, 38.852924],\n                        [-77.045659, 38.860158],\n                        [-77.044232, 38.862326],\n                        [-77.040879, 38.865454],\n                        [-77.039936, 38.867698],\n                        [-77.040338, 38.86943],\n                        [-77.04264, 38.872528],\n                        [-77.03696, 38.878424],\n                        [-77.032309, 38.87937],\n                        [-77.030056, 38.880945],\n                        [-77.027645, 38.881779],\n                        [-77.026946, 38.882645],\n                        [-77.026942, 38.885502],\n                        [-77.028054, 38.887449],\n                        [-77.02806, 38.892088],\n                        [-77.03364, 38.892108],\n                        [-77.033643, 38.899926]\n                    ],\n                    'type': 'LineString'\n                }\n            }\n        ]\n    };\n\n    map.on('load', () =&gt; {\n        // 'line-gradient' can only be used with GeoJSON sources\n        // and the source must have the 'lineMetrics' option set to true\n        map.addSource('line', {\n            type: 'geojson',\n            lineMetrics: true,\n            data: geojson\n        });\n\n        // the layer must be of type 'line'\n        map.addLayer({\n            type: 'line',\n            source: 'line',\n            id: 'line',\n            paint: {\n                'line-color': 'red',\n                'line-width': 14,\n                // 'line-gradient' must be specified using an expression\n                // with the special 'line-progress' property\n                'line-gradient': [\n                    'interpolate',\n                    ['linear'],\n                    ['line-progress'],\n                    0,\n                    'blue',\n                    0.1,\n                    'royalblue',\n                    0.3,\n                    'cyan',\n                    0.5,\n                    'lime',\n                    0.7,\n                    'yellow',\n                    1,\n                    'red'\n                ]\n            },\n            layout: {\n                'line-cap': 'round',\n                'line-join': 'round'\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/create-a-heatmap-layer-on-a-globe-with-terrain-elevation/","title":"Create a Heatmap layer on a globe with terrain elevation","text":"<p>Create a Heatmap layer on a globe with terrain elevation.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;title&gt;Create a Heatmap layer on a globe with terrain elevation&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Create a Heatmap layer on a globe with terrain elevation.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body {\n            margin: 0;\n            padding: 0;\n        }\n\n        html,\n        body,\n        #map {\n            height: 100%;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id=\"map\"&gt;&lt;/div&gt;\n    &lt;script&gt;\n\n\n\n        const map = new maplibregl.Map({\n            container: 'map',\n            maxPitch: 95,\n            center: [-120, 37.422],\n            zoom: 7.25,\n            bearing: 57,\n            pitch: 71,\n            hash: true\n        });\n\n        map.setStyle('https://tiles.openfreemap.org/styles/liberty', {\n            transformStyle: (previousStyle, nextStyle) =&gt; {\n                nextStyle.projection = { type: 'globe' };\n                nextStyle.sources = {\n                    ...nextStyle.sources, terrainSource: {\n                        type: 'raster-dem',\n                        url: 'https://api.maptiler.com/tiles/terrain-rgb-v2/tiles.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n                        tileSize: 256\n                    },\n                    hillshadeSource: {\n                        type: 'raster-dem',\n                        url: 'https://api.maptiler.com/tiles/terrain-rgb-v2/tiles.json?key=get_your_own_OpIi9ZULNHzrESv6T2vL',\n                        tileSize: 256\n                    }\n                }\n                nextStyle.terrain = {\n                    source: 'terrainSource',\n                    exaggeration: 1\n                }\n\n                nextStyle.sky = {\n                    'atmosphere-blend': [\n                        'interpolate',\n                        ['linear'],\n                        ['zoom'],\n                        0, 1,\n                        2, 0\n                    ],\n                }\n\n                nextStyle.layers.push({\n                    id: 'hills',\n                    type: 'hillshade',\n                    source: 'hillshadeSource',\n                    layout: { visibility: 'visible' },\n                    paint: { 'hillshade-shadow-color': '#473B24' }\n                })\n\n                return nextStyle\n            }\n        })\n\n        map.addControl(\n            new maplibregl.NavigationControl({\n                visualizePitch: true,\n                showZoom: true,\n                showCompass: true\n            })\n        );\n\n\n        map.addControl(\n            new maplibregl.GlobeControl()\n        );\n\n        map.addControl(\n            new maplibregl.TerrainControl({\n                source: 'terrainSource',\n                exaggeration: 1\n            })\n        );\n\n        map.on('load', () =&gt; {\n            // Add a geojson point source.\n            // Heatmap layers also work with a vector tile source.\n            map.addSource('earthquakes', {\n                'type': 'geojson',\n                'data':\n                    'https://maplibre.org/maplibre-gl-js/docs/assets/earthquakes.geojson'\n            });\n\n            map.addLayer(\n                {\n                    'id': 'earthquakes-heat',\n                    'type': 'heatmap',\n                    'source': 'earthquakes',\n                    'maxzoom': 9,\n                    'paint': {\n                        // Increase the heatmap weight based on frequency and property magnitude\n                        'heatmap-weight': [\n                            'interpolate',\n                            ['linear'],\n                            ['get', 'mag'],\n                            0,\n                            0,\n                            6,\n                            1\n                        ],\n                        // Increase the heatmap color weight weight by zoom level\n                        // heatmap-intensity is a multiplier on top of heatmap-weight\n                        'heatmap-intensity': [\n                            'interpolate',\n                            ['linear'],\n                            ['zoom'],\n                            0,\n                            1,\n                            9,\n                            3\n                        ],\n                        // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n                        // Begin color ramp at 0-stop with a 0-transparency color\n                        // to create a blur-like effect.\n                        'heatmap-color': [\n                            'interpolate',\n                            ['linear'],\n                            ['heatmap-density'],\n                            0,\n                            'rgba(33,102,172,0)',\n                            0.2,\n                            'rgb(103,169,207)',\n                            0.4,\n                            'rgb(209,229,240)',\n                            0.6,\n                            'rgb(253,219,199)',\n                            0.8,\n                            'rgb(239,138,98)',\n                            1,\n                            'rgb(178,24,43)'\n                        ],\n                        // Adjust the heatmap radius by zoom level\n                        'heatmap-radius': [\n                            'interpolate',\n                            ['linear'],\n                            ['zoom'],\n                            0,\n                            2,\n                            9,\n                            20\n                        ],\n                        // Transition from heatmap to circle layer by zoom level\n                        'heatmap-opacity': [\n                            'interpolate',\n                            ['linear'],\n                            ['zoom'],\n                            7,\n                            1,\n                            9,\n                            0\n                        ]\n                    }\n                }\n            );\n\n\n            map.addLayer(\n                {\n                    'id': 'earthquakes-point',\n                    'type': 'circle',\n                    'source': 'earthquakes',\n                    'minzoom': 7,\n                    'paint': {\n                        // Size circle radius by earthquake magnitude and zoom level\n                        'circle-radius': [\n                            'interpolate',\n                            ['linear'],\n                            ['zoom'],\n                            7,\n                            ['interpolate', ['linear'], ['get', 'mag'], 1, 1, 6, 4],\n                            16,\n                            ['interpolate', ['linear'], ['get', 'mag'], 1, 5, 6, 50]\n                        ],\n                        'circle-color': [\n                            'interpolate',\n                            ['linear'],\n                            ['get', 'mag'],\n                            1,\n                            'rgba(33,102,172,0)',\n                            2,\n                            'rgb(103,169,207)',\n                            3,\n                            'rgb(209,229,240)',\n                            4,\n                            'rgb(253,219,199)',\n                            5,\n                            'rgb(239,138,98)',\n                            6,\n                            'rgb(178,24,43)'\n                        ],\n                        'circle-stroke-color': 'white',\n                        'circle-stroke-width': 1,\n                        // Transition from heatmap to circle layer by zoom level\n                        'circle-opacity': [\n                            'interpolate',\n                            ['linear'],\n                            ['zoom'],\n                            7,\n                            0,\n                            8,\n                            1\n                        ]\n                    }\n                }\n            );\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/create-a-heatmap-layer/","title":"Create a heatmap layer","text":"<p>Visualize earthquake frequency by location using a heatmap layer.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Create a heatmap layer&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Visualize earthquake frequency by location using a heatmap layer.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [-120, 50],\n        zoom: 2\n    });\n\n    map.on('load', () =&gt; {\n        // Add a geojson point source.\n        // Heatmap layers also work with a vector tile source.\n        map.addSource('earthquakes', {\n            'type': 'geojson',\n            'data':\n                'https://maplibre.org/maplibre-gl-js/docs/assets/earthquakes.geojson'\n        });\n\n        map.addLayer(\n            {\n                'id': 'earthquakes-heat',\n                'type': 'heatmap',\n                'source': 'earthquakes',\n                'maxzoom': 9,\n                'paint': {\n                    // Increase the heatmap weight based on frequency and property magnitude\n                    'heatmap-weight': [\n                        'interpolate',\n                        ['linear'],\n                        ['get', 'mag'],\n                        0,\n                        0,\n                        6,\n                        1\n                    ],\n                    // Increase the heatmap color weight weight by zoom level\n                    // heatmap-intensity is a multiplier on top of heatmap-weight\n                    'heatmap-intensity': [\n                        'interpolate',\n                        ['linear'],\n                        ['zoom'],\n                        0,\n                        1,\n                        9,\n                        3\n                    ],\n                    // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n                    // Begin color ramp at 0-stop with a 0-transparency color\n                    // to create a blur-like effect.\n                    'heatmap-color': [\n                        'interpolate',\n                        ['linear'],\n                        ['heatmap-density'],\n                        0,\n                        'rgba(33,102,172,0)',\n                        0.2,\n                        'rgb(103,169,207)',\n                        0.4,\n                        'rgb(209,229,240)',\n                        0.6,\n                        'rgb(253,219,199)',\n                        0.8,\n                        'rgb(239,138,98)',\n                        1,\n                        'rgb(178,24,43)'\n                    ],\n                    // Adjust the heatmap radius by zoom level\n                    'heatmap-radius': [\n                        'interpolate',\n                        ['linear'],\n                        ['zoom'],\n                        0,\n                        2,\n                        9,\n                        20\n                    ],\n                    // Transition from heatmap to circle layer by zoom level\n                    'heatmap-opacity': [\n                        'interpolate',\n                        ['linear'],\n                        ['zoom'],\n                        7,\n                        1,\n                        9,\n                        0\n                    ]\n                }\n            }\n        );\n\n        map.addLayer(\n            {\n                'id': 'earthquakes-point',\n                'type': 'circle',\n                'source': 'earthquakes',\n                'minzoom': 7,\n                'paint': {\n                    // Size circle radius by earthquake magnitude and zoom level\n                    'circle-radius': [\n                        'interpolate',\n                        ['linear'],\n                        ['zoom'],\n                        7,\n                        ['interpolate', ['linear'], ['get', 'mag'], 1, 1, 6, 4],\n                        16,\n                        ['interpolate', ['linear'], ['get', 'mag'], 1, 5, 6, 50]\n                    ],\n                    // Color circle by earthquake magnitude\n                    'circle-color': [\n                        'interpolate',\n                        ['linear'],\n                        ['get', 'mag'],\n                        1,\n                        'rgba(33,102,172,0)',\n                        2,\n                        'rgb(103,169,207)',\n                        3,\n                        'rgb(209,229,240)',\n                        4,\n                        'rgb(253,219,199)',\n                        5,\n                        'rgb(239,138,98)',\n                        6,\n                        'rgb(178,24,43)'\n                    ],\n                    'circle-stroke-color': 'white',\n                    'circle-stroke-width': 1,\n                    // Transition from heatmap to circle layer by zoom level\n                    'circle-opacity': [\n                        'interpolate',\n                        ['linear'],\n                        ['zoom'],\n                        7,\n                        0,\n                        8,\n                        1\n                    ]\n                }\n            }\n        );\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/create-a-hover-effect/","title":"Create a hover effect","text":"<p>Use events and feature states to create a per feature hover effect.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Create a hover effect&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use events and feature states to create a per feature hover effect.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [-100.486052, 37.830348],\n        zoom: 2\n    });\n    let hoveredStateId = null;\n\n    map.on('load', () =&gt; {\n        map.addSource('states', {\n            'type': 'geojson',\n            'data':\n                'https://maplibre.org/maplibre-gl-js/docs/assets/us_states.geojson'\n        });\n\n        // The feature-state dependent fill-opacity expression will render the hover effect\n        // when a feature's hover state is set to true.\n        map.addLayer({\n            'id': 'state-fills',\n            'type': 'fill',\n            'source': 'states',\n            'layout': {},\n            'paint': {\n                'fill-color': '#627BC1',\n                'fill-opacity': [\n                    'case',\n                    ['boolean', ['feature-state', 'hover'], false],\n                    1,\n                    0.5\n                ]\n            }\n        });\n\n        map.addLayer({\n            'id': 'state-borders',\n            'type': 'line',\n            'source': 'states',\n            'layout': {},\n            'paint': {\n                'line-color': '#627BC1',\n                'line-width': 2\n            }\n        });\n\n        // When the user moves their mouse over the state-fill layer, we'll update the\n        // feature state for the feature under the mouse.\n        map.on('mousemove', 'state-fills', (e) =&gt; {\n            if (e.features.length &gt; 0) {\n                if (hoveredStateId) {\n                    map.setFeatureState(\n                        {source: 'states', id: hoveredStateId},\n                        {hover: false}\n                    );\n                }\n                hoveredStateId = e.features[0].id;\n                map.setFeatureState(\n                    {source: 'states', id: hoveredStateId},\n                    {hover: true}\n                );\n            }\n        });\n\n        // When the mouse leaves the state-fill layer, update the feature state of the\n        // previously hovered feature.\n        map.on('mouseleave', 'state-fills', () =&gt; {\n            if (hoveredStateId) {\n                map.setFeatureState(\n                    {source: 'states', id: hoveredStateId},\n                    {hover: false}\n                );\n            }\n            hoveredStateId = null;\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/create-a-time-slider/","title":"Create a time slider","text":"<p>Visualize earthquakes with a range slider.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Create a time slider&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Visualize earthquakes with a range slider.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .map-overlay {\n        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n        position: absolute;\n        width: 25%;\n        top: 0;\n        left: 0;\n        padding: 10px;\n    }\n\n    .map-overlay .map-overlay-inner {\n        background-color: #fff;\n        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\n        border-radius: 3px;\n        padding: 10px;\n        margin-bottom: 10px;\n    }\n\n    .map-overlay h2 {\n        line-height: 24px;\n        display: block;\n        margin: 0 0 10px;\n    }\n\n    .map-overlay .legend .bar {\n        height: 10px;\n        width: 100%;\n        background: linear-gradient(to right, #fca107, #7f3121);\n    }\n\n    .map-overlay input {\n        background-color: transparent;\n        display: inline-block;\n        width: 100%;\n        position: relative;\n        margin: 0;\n        cursor: ew-resize;\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;div class=\"map-overlay top\"&gt;\n    &lt;div class=\"map-overlay-inner\"&gt;\n        &lt;h2&gt;Significant earthquakes in 2015&lt;/h2&gt;\n        &lt;label id=\"month\" for=\"slider\"&gt;&lt;/label&gt;\n        &lt;input id=\"slider\" type=\"range\" min=\"0\" max=\"11\" step=\"1\" value=\"0\" /&gt;\n    &lt;/div&gt;\n    &lt;div class=\"map-overlay-inner\"&gt;\n        &lt;div id=\"legend\" class=\"legend\"&gt;\n            &lt;div class=\"bar\"&gt;&lt;/div&gt;\n            &lt;div&gt;Magnitude (m)&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script src=\"https://d3js.org/d3.v3.min.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [31.4606, 20.7927],\n        zoom: 0.5\n    });\n\n    const months = [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December'\n    ];\n\n    function filterBy(month) {\n        const filters = ['==', 'month', month];\n        map.setFilter('earthquake-circles', filters);\n        map.setFilter('earthquake-labels', filters);\n\n        // Set the label to the month\n        document.getElementById('month').textContent = months[month];\n    }\n\n    map.on('load', () =&gt; {\n        // Data courtesy of https://www.usgs.gov/programs/earthquake-hazards\n        // Query for significant earthquakes in 2015 URL request looked like this:\n        // https://earthquake.usgs.gov/fdsnws/event/1/query\n        //    ?format=geojson\n        //    &amp;starttime=2015-01-01\n        //    &amp;endtime=2015-12-31\n        //    &amp;minmagnitude=6'\n        //\n        // Here we're using d3 to help us make the ajax request but you can use\n        // Any request method (library or otherwise) you wish.\n        d3.json(\n            'https://maplibre.org/maplibre-gl-js/docs/assets/significant-earthquakes-2015.geojson',\n            (err, data) =&gt; {\n                if (err) throw err;\n\n                // Create a month property value based on time\n                // used to filter against.\n                data.features = data.features.map((d) =&gt; {\n                    d.properties.month = new Date(d.properties.time).getMonth();\n                    return d;\n                });\n\n                map.addSource('earthquakes', {\n                    'type': 'geojson',\n                    data\n                });\n\n                map.addLayer({\n                    'id': 'earthquake-circles',\n                    'type': 'circle',\n                    'source': 'earthquakes',\n                    'paint': {\n                        'circle-color': [\n                            'interpolate',\n                            ['linear'],\n                            ['get', 'mag'],\n                            6,\n                            '#FCA107',\n                            8,\n                            '#7F3121'\n                        ],\n                        'circle-opacity': 0.75,\n                        'circle-radius': [\n                            'interpolate',\n                            ['linear'],\n                            ['get', 'mag'],\n                            6,\n                            20,\n                            8,\n                            40\n                        ]\n                    }\n                });\n\n                map.addLayer({\n                    'id': 'earthquake-labels',\n                    'type': 'symbol',\n                    'source': 'earthquakes',\n                    'layout': {\n                        'text-field': [\n                            'concat',\n                            ['to-string', ['get', 'mag']],\n                            'm'\n                        ],\n                        'text-font': [ 'Noto Sans Regular' ],\n                        'text-size': 12\n                    },\n                    'paint': {\n                        'text-color': 'rgba(0,0,0,0.5)'\n                    }\n                });\n\n                // Set filter to first month of the year\n                // 0 = January\n                filterBy(0);\n\n                document\n                    .getElementById('slider')\n                    .addEventListener('input', (e) =&gt; {\n                        const month = parseInt(e.target.value, 10);\n                        filterBy(month);\n                    });\n            }\n        );\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/create-and-style-clusters/","title":"Create and style clusters","text":"<p>Use MapLibre GL JS' built-in functions to visualize points as clusters.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Create and style clusters&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use MapLibre GL JS' built-in functions to visualize points as clusters.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [-103.59179687498357, 40.66995747013945],\n        zoom: 3\n    });\n\n    map.on('load', () =&gt; {\n        // Add a new source from our GeoJSON data and\n        // set the 'cluster' option to true. GL-JS will\n        // add the point_count property to your source data.\n        map.addSource('earthquakes', {\n            type: 'geojson',\n            // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes\n            // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.\n            data: 'https://maplibre.org/maplibre-gl-js/docs/assets/earthquakes.geojson',\n            cluster: true,\n            clusterMaxZoom: 14, // Max zoom to cluster points on\n            clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)\n        });\n\n        map.addLayer({\n            id: 'clusters',\n            type: 'circle',\n            source: 'earthquakes',\n            filter: ['has', 'point_count'],\n            paint: {\n                // Use step expressions (https://maplibre.org/maplibre-style-spec/#expressions-step)\n                // with three steps to implement three types of circles:\n                //   * Blue, 20px circles when point count is less than 100\n                //   * Yellow, 30px circles when point count is between 100 and 750\n                //   * Pink, 40px circles when point count is greater than or equal to 750\n                'circle-color': [\n                    'step',\n                    ['get', 'point_count'],\n                    '#51bbd6',\n                    100,\n                    '#f1f075',\n                    750,\n                    '#f28cb1'\n                ],\n                'circle-radius': [\n                    'step',\n                    ['get', 'point_count'],\n                    20,\n                    100,\n                    30,\n                    750,\n                    40\n                ]\n            }\n        });\n\n        map.addLayer({\n            id: 'cluster-count',\n            type: 'symbol',\n            source: 'earthquakes',\n            filter: ['has', 'point_count'],\n            layout: {\n                'text-field': '{point_count_abbreviated}',\n                'text-font': ['Noto Sans Regular'],\n                'text-size': 12\n            }\n        });\n\n        map.addLayer({\n            id: 'unclustered-point',\n            type: 'circle',\n            source: 'earthquakes',\n            filter: ['!', ['has', 'point_count']],\n            paint: {\n                'circle-color': '#11b4da',\n                'circle-radius': 4,\n                'circle-stroke-width': 1,\n                'circle-stroke-color': '#fff'\n            }\n        });\n\n        // inspect a cluster on click\n        map.on('click', 'clusters', async (e) =&gt; {\n            const features = map.queryRenderedFeatures(e.point, {\n                layers: ['clusters']\n            });\n            const clusterId = features[0].properties.cluster_id;\n            const zoom = await map.getSource('earthquakes').getClusterExpansionZoom(clusterId);\n            map.easeTo({\n                center: features[0].geometry.coordinates,\n                zoom\n            });\n        });\n\n        // When a click event occurs on a feature in\n        // the unclustered-point layer, open a popup at\n        // the location of the feature, with\n        // description HTML from its properties.\n        map.on('click', 'unclustered-point', (e) =&gt; {\n            const coordinates = e.features[0].geometry.coordinates.slice();\n            const mag = e.features[0].properties.mag;\n            let tsunami;\n\n            if (e.features[0].properties.tsunami === 1) {\n                tsunami = 'yes';\n            } else {\n                tsunami = 'no';\n            }\n\n            // Ensure that if the map is zoomed out such that\n            // multiple copies of the feature are visible, the\n            // popup appears over the copy being pointed to.\n            while (Math.abs(e.lngLat.lng - coordinates[0]) &gt; 180) {\n                coordinates[0] += e.lngLat.lng &gt; coordinates[0] ? 360 : -360;\n            }\n\n            new maplibregl.Popup()\n                .setLngLat(coordinates)\n                .setHTML(\n                    `magnitude: ${mag}&lt;br&gt;Was there a tsunami?: ${tsunami}`\n                )\n                .addTo(map);\n        });\n\n        map.on('mouseenter', 'clusters', () =&gt; {\n            map.getCanvas().style.cursor = 'pointer';\n        });\n        map.on('mouseleave', 'clusters', () =&gt; {\n            map.getCanvas().style.cursor = '';\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/create-deckgl-layer-using-rest-api/","title":"Create deck.gl layer using REST API","text":"<p>Create a deck.gl layer as an overlay from a REST API.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;Create deck.gl layer using REST API&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Create a deck.gl layer as an overlay from a REST API.\" /&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css\" /&gt;\n    &lt;script src=\"https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/deck.gl@8.9.33/dist.min.js\"&gt;&lt;/script&gt;\n    &lt;style&gt;\n      body {\n        margin: 0;\n        padding: 0;\n      }\n      html,\n      body,\n      #map {\n        height: 100%;\n      }\n      /* Deck.gl layer is added as an overlay, popup needs to be displayed over it */\n      .maplibregl-popup {\n        z-index: 2;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"map\"&gt;&lt;/div&gt;\n    &lt;script&gt;\n\n      const map = new maplibregl.Map({\n          container: 'map',\n          style: 'https://tiles.openfreemap.org/styles/liberty',\n          center: [2.343957, 48.862011],\n          zoom: 10.5,\n      });\n      map.addControl(new maplibregl.NavigationControl(), 'top-right');\n\n      // 20 + 1 random colors for all the districts of Paris and outside of the districts\n      const colorPalette = [\n          [255, 102, 51],\n          [255, 179, 153],\n          [255, 51, 255],\n          [255, 255, 153],\n          [0, 179, 230],\n          [230, 179, 51],\n          [51, 102, 230],\n          [153, 153, 102],\n          [153, 255, 153],\n          [179, 77, 77],\n          [128, 179, 0],\n          [128, 153, 0],\n          [230, 179, 179],\n          [102, 128, 179],\n          [102, 153, 26],\n          [255, 153, 230],\n          [204, 255, 26],\n          [255, 26, 102],\n          [230, 51, 26],\n          [51, 255, 204],\n          [102, 153, 77],\n      ];\n\n      const limit = 100;\n      // Sample data source = https://data.iledefrance.fr\n      const parisSights = `https://data.iledefrance.fr/api/explore/v2.1/catalog/datasets/principaux-sites-touristiques-en-ile-de-france0/records?limit=${limit}`;\n\n      let layerControl;\n\n      // Add the overlay as a control\n      map.on('load', async () =&gt; {\n          // Fetch the data\n          const response = await fetch(parisSights);\n          const responseJSON = await response.json();\n\n          const layer = new deck.ScatterplotLayer({\n              id: 'scatterplot-layer',\n              data: responseJSON.results,\n              pickable: true,\n              opacity: 0.7,\n              stroked: true,\n              filled: true,\n              radiusMinPixels: 14,\n              radiusMaxPixels: 100,\n              lineWidthMinPixels: 5,\n              // Using appropriate fields for coordinates from the dataset\n              getPosition: (d) =&gt; [d.geo_point_2d.lon, d.geo_point_2d.lat],\n              getFillColor: (d) =&gt; {\n                  // Filtering by postal code\n                  if ('insee' in d &amp;&amp; d.insee.startsWith('75')) {\n                      // Districts in Paris\n                      return colorPalette[parseInt(d.insee.substring(3))];\n                  } else {\n                      // Out of Paris\n                      return colorPalette[20];\n                  }\n              },\n              getLineColor: (d) =&gt; [14, 16, 255],\n              onClick: (info) =&gt; {\n                  const {coordinate, object} = info;\n                  const description = `&lt;p&gt;${object.nom_carto || 'Unknown'}&lt;/p&gt;`;\n\n                  new maplibregl.Popup()\n                      .setLngLat(coordinate)\n                      .setHTML(description)\n                      .addTo(map);\n              },\n          });\n\n          // Create the overlay\n          const overlay = new deck.MapboxOverlay({\n              layers: [layer],\n          });\n          map.addControl(overlay);\n      });\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/customize-camera-animations/","title":"Customize camera animations","text":"<p>Customize camera animations using AnimationOptions.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Customize camera animations&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Customize camera animations using AnimationOptions.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .map-overlay {\n        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n        position: absolute;\n        width: 200px;\n        top: 0;\n        left: 0;\n        padding: 10px;\n    }\n\n    .map-overlay .map-overlay-inner {\n        background-color: #fff;\n        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n        border-radius: 3px;\n        padding: 10px;\n        margin-bottom: 10px;\n    }\n\n    .map-overlay-inner fieldset {\n        border: none;\n        padding: 0;\n        margin: 0 0 10px;\n    }\n\n    .map-overlay-inner fieldset:last-child {\n        margin: 0;\n    }\n\n    .map-overlay-inner select {\n        width: 100%;\n    }\n\n    .map-overlay-inner p {\n        margin: 0;\n    }\n\n    .map-overlay-inner label {\n        display: block;\n        font-weight: bold;\n    }\n\n    .map-overlay-inner button {\n        background-color: cornflowerblue;\n        color: white;\n        border-radius: 5px;\n        display: inline-block;\n        height: 20px;\n        border: none;\n        cursor: pointer;\n    }\n\n    .map-overlay-inner button:focus {\n        outline: none;\n    }\n\n    .map-overlay-inner button:hover {\n        background-color: blue;\n        box-shadow: inset 0 0 0 3px rgba(0, 0, 0, 0.1);\n        -webkit-transition: background-color 500ms linear;\n        -ms-transition: background-color 500ms linear;\n        transition: background-color 500ms linear;\n    }\n\n    .offset &gt; label,\n    .offset &gt; input {\n        display: inline;\n    }\n\n    #animateLabel {\n        display: inline-block;\n        min-width: 20px;\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div class=\"map-overlay top\"&gt;\n    &lt;div class=\"map-overlay-inner\"&gt;\n        &lt;fieldset&gt;\n            &lt;label for=\"easing\"&gt;Select easing function&lt;/label&gt;\n            &lt;select id=\"easing\" name=\"easing\"&gt;\n                &lt;option value=\"easeInCubic\"&gt;Ease In Cubic&lt;/option&gt;\n                &lt;option value=\"easeOutQuint\"&gt;Ease Out Quint&lt;/option&gt;\n                &lt;option value=\"easeInOutCirc\"&gt;Ease In/Out Circ&lt;/option&gt;\n                &lt;option value=\"easeOutBounce\"&gt;Ease Out Bounce&lt;/option&gt;\n            &lt;/select&gt;\n        &lt;/fieldset&gt;\n        &lt;fieldset&gt;\n            &lt;label for=\"duration\"&gt;Set animation duration&lt;/label&gt;\n            &lt;p id=\"durationValue\"&gt;&lt;/p&gt;\n            &lt;input\n                type=\"range\"\n                id=\"duration\"\n                name=\"duration\"\n                min=\"0\"\n                max=\"10000\"\n                step=\"500\"\n                value=\"1000\"\n            /&gt;\n        &lt;/fieldset&gt;\n        &lt;fieldset&gt;\n            &lt;label&gt;Animate camera motion&lt;/label&gt;\n            &lt;label for=\"animate\" id=\"animateLabel\"&gt;Yes&lt;/label&gt;\n            &lt;input type=\"checkbox\" id=\"animate\" name=\"animate\" checked /&gt;\n        &lt;/fieldset&gt;\n        &lt;fieldset class=\"offset\"&gt;\n            &lt;label for=\"offset-x\"&gt;Offset-X&lt;/label&gt;\n            &lt;input\n                type=\"number\"\n                id=\"offset-x\"\n                name=\"offset-x\"\n                min=\"-200\"\n                max=\"200\"\n                step=\"50\"\n                value=\"0\"\n            /&gt;\n        &lt;/fieldset&gt;\n        &lt;fieldset class=\"offset\"&gt;\n            &lt;label for=\"offset-y\"&gt;Offset-Y&lt;/label&gt;\n            &lt;input\n                type=\"number\"\n                id=\"offset-y\"\n                name=\"offset-y\"\n                min=\"-200\"\n                max=\"200\"\n                step=\"50\"\n                value=\"0\"\n            /&gt;\n            &lt;p&gt;Offsets can be negative&lt;/p&gt;\n        &lt;/fieldset&gt;\n        &lt;button type=\"button\" id=\"animateButton\" name=\"test-animation\"&gt;\n            Test Animation\n        &lt;/button&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    // declare various easing functions.\n    // easing functions mathematically describe\n    // how fast a value changes during an animation.\n    // each function takes a parameter t that represents\n    // the progress of the animation.\n    // t is in a range of 0 to 1 where 0 is the initial\n    // state and 1 is the completed state.\n    const easingFunctions = {\n    // start slow and gradually increase speed\n        easeInCubic (t) {\n            return t * t * t;\n        },\n        // start fast with a long, slow wind-down\n        easeOutQuint (t) {\n            return 1 - Math.pow(1 - t, 5);\n        },\n        // slow start and finish with fast middle\n        easeInOutCirc (t) {\n            return t &lt; 0.5 ?\n                (1 - Math.sqrt(1 - Math.pow(2 * t, 2))) / 2 :\n                (Math.sqrt(1 - Math.pow(-2 * t + 2, 2)) + 1) / 2;\n        },\n        // fast start with a \"bounce\" at the end\n        easeOutBounce (t) {\n            const n1 = 7.5625;\n            const d1 = 2.75;\n\n            if (t &lt; 1 / d1) {\n                return n1 * t * t;\n            } else if (t &lt; 2 / d1) {\n                return n1 * (t -= 1.5 / d1) * t + 0.75;\n            } else if (t &lt; 2.5 / d1) {\n                return n1 * (t -= 2.25 / d1) * t + 0.9375;\n            } else {\n                return n1 * (t -= 2.625 / d1) * t + 0.984375;\n            }\n        }\n    };\n\n    // set up some helpful UX on the form\n    const durationValueSpan = document.getElementById('durationValue');\n    const durationInput = document.getElementById('duration');\n    durationValueSpan.innerHTML = `${durationInput.value / 1000} seconds`;\n    durationInput.addEventListener('change', (e) =&gt; {\n        durationValueSpan.innerHTML = `${e.target.value / 1000} seconds`;\n    });\n\n    const animateLabel = document.getElementById('animateLabel');\n    const animateValue = document.getElementById('animate');\n    animateValue.addEventListener('change', (e) =&gt; {\n        animateLabel.innerHTML = e.target.checked ? 'Yes' : 'No';\n    });\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [-95, 40],\n        zoom: 3\n    });\n\n    map.on('load', () =&gt; {\n        // add a layer to display the map's center point\n        map.addSource('center', {\n            'type': 'geojson',\n            'data': {\n                'type': 'Point',\n                'coordinates': [-94, 40]\n            }\n        });\n        map.addLayer({\n            'id': 'center',\n            'type': 'symbol',\n            'source': 'center',\n            'layout': {\n                'text-field': 'Center: [-94, 40]',\n                'text-font': ['Noto Sans Regular'],\n                'text-offset': [0, 0.6],\n                'text-anchor': 'top'\n            }\n        });\n        map.addLayer({\n            'id': 'center-circle',\n            'type': 'circle',\n            'source': 'center',\n            'paint': {\n                'circle-radius': 6,\n                'circle-color': '#007cbf'\n            }\n        });\n\n        const animateButton = document.getElementById('animateButton');\n        animateButton.addEventListener('click', () =&gt; {\n            const easingInput = document.getElementById('easing');\n            const easingFn =\n            easingFunctions[\n                easingInput.options[easingInput.selectedIndex].value\n            ];\n            const duration = parseInt(durationInput.value, 10);\n            const animate = animateValue.checked;\n            const offsetX = parseInt(\n                document.getElementById('offset-x').value,\n                10\n            );\n            const offsetY = parseInt(\n                document.getElementById('offset-y').value,\n                10\n            );\n\n            const animationOptions = {\n                duration,\n                easing: easingFn,\n                offset: [offsetX, offsetY],\n                animate,\n                essential: true // animation will happen even if user has `prefers-reduced-motion` setting on\n            };\n\n            // Create a random location to fly to by offsetting the map's\n            // initial center point by up to 10 degrees.\n            const center = [\n                -95 + (Math.random() - 0.5) * 20,\n                40 + (Math.random() - 0.5) * 20\n            ];\n\n            // merge animationOptions with other flyTo options\n            animationOptions.center = center;\n\n            map.flyTo(animationOptions);\n            // update 'center' source and layer to show our new map center\n            // compare this center point to where the camera ends up when an offset is applied\n            map.getSource('center').setData({\n                'type': 'Point',\n                'coordinates': center\n            });\n            map.setLayoutProperty(\n                'center',\n                'text-field',\n                `Center: [${\n                    center[0].toFixed(1)\n                }, ${\n                    center[1].toFixed(1)\n                }]`\n            );\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/customize-the-map-transform-constrain/","title":"Customize the map transform constrain","text":"<pre><code>&lt;meta property='og:description' content='Customize the constrain callback of the map transform. For example, to allow users to underzoom and overpan the bounds.' /&gt;\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang='en'&gt;\n&lt;head&gt;\n    &lt;title&gt;Customize the map transform constrain&lt;/title&gt;\n    &lt;meta property='og:description' content='Customize the constrain callback of the map transform. For example, to allow users to underzoom and overpan the bounds.' /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name='viewport' content='width=device-width, initial-scale=1'&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body {\n            margin: 0;\n            padding: 0;\n            background: repeating-conic-gradient(#000 0 25%, #444 0 50%) 50% / 32px 32px;\n        }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id='map'&gt;&lt;/div&gt;\n&lt;script&gt;\n    function customTransformConstrain(lngLat, zoom) {\n        return {center: lngLat, zoom: zoom ?? 0}\n    };\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        renderWorldCopies: false,\n        transformConstrain: customTransformConstrain,\n        zoom: -2,\n        center: [360, 0],\n        style: {\n            version: 8,\n            sources: {\n                rgb: {\n                    type: 'raster',\n                    tiles: ['https://a.tile.openstreetmap.org/{z}/{x}/{y}.png'],\n                    tileSize: 256,\n                    attribution: '&amp;copy; OpenStreetMap Contributors',\n                    maxzoom: 19\n                },\n            },\n            layers: [{id: 'rgb', type: 'raster', source: 'rgb'}]\n        },\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/disable-map-rotation/","title":"Disable map rotation","text":"<p>Prevent users from rotating a map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Disable map rotation&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Prevent users from rotating a map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style: 'https://demotiles.maplibre.org/style.json', // style URL\n        center: [-122.65, 45.52], // starting position\n        zoom: 3 // starting zoom\n    });\n\n    // disable map rotation using right click + drag\n    map.dragRotate.disable();\n\n    // disable map rotation using keyboard\n    map.keyboard.disable();\n\n    // disable map rotation using touch rotation gesture\n    map.touchZoomRotate.disableRotation();\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/disable-scroll-zoom/","title":"Disable scroll zoom","text":"<p>Prevent scroll from zooming a map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Disable scroll zoom&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Prevent scroll from zooming a map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style: 'https://demotiles.maplibre.org/style.json', // style URL\n        center: [-122.65, 45.52], // starting position\n        zoom: 3 // starting zoom\n    });\n\n    // disable map zoom when using scroll\n    map.scrollZoom.disable();\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/display-a-globe-with-a-fill-extrusion-layer/","title":"Display a globe with a fill extrusion layer","text":"<p>Display a globe with a fill extrusion layer.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display a globe with a fill extrusion layer&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Display a globe with a fill extrusion layer.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [30.0, 40.0],\n    });\n\n    map.addControl(new maplibregl.GlobeControl(), 'top-right');\n\n    map.on('style.load', () =&gt; {\n        map.setProjection({\n            type: 'globe', // Set projection to globe\n        });\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('extrude-polygons', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Polygon',\n                            'coordinates': [\n                                [\n                                    [-120.0, 10.0],\n                                    [120.0, 10.0],\n                                    [120.0, -10.0],\n                                    [-120.0, -10.0]\n                                ]\n                            ]\n                        },\n                        'properties': {\n                            'height': 150000,\n                            'color': '#ff0044'\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Polygon',\n                            'coordinates': [\n                                [\n                                    [10.0, 50.0],\n                                    [20.0, 50.0],\n                                    [20.0, 40.0],\n                                    [10.0, 40.0]\n                                ]\n                            ]\n                        },\n                        'properties': {\n                            'height': 450000,\n                            'color': '#22ff44'\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Polygon',\n                            'coordinates': [\n                                [\n                                    [-70.0, 55.0],\n                                    [-65.0, 55.0],\n                                    [-65.0, 50.0],\n                                    [-70.0, 50.0]\n                                ]\n                            ]\n                        },\n                        'properties': {\n                            'height': 600000,\n                            'color': '#4400ff'\n                        }\n                    }\n                ]\n            }\n        });\n        map.addLayer({\n            'id': 'extrude-polygon-layer',\n            'source': 'extrude-polygons',\n            'type': 'fill-extrusion',\n            'paint': {\n                'fill-extrusion-color': ['get', 'color'],\n                'fill-extrusion-opacity': 1,\n                'fill-extrusion-height': ['get', 'height'],\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/display-a-globe-with-a-vector-map/","title":"Display a globe with a vector map","text":"<p>Display a globe with a vector map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display a globe with a vector map&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Display a globe with a vector map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        zoom: 2,\n        center: [0, 0],\n    });\n\n    map.on('style.load', () =&gt; {\n        map.setProjection({\n            type: 'globe', // Set projection to globe\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/display-a-globe-with-an-atmosphere/","title":"Display a globe with an atmosphere","text":"<p>Display a globe with an atmosphere.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display a globe with an atmosphere&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Display a globe with an atmosphere.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;style&gt;\n    #map {\n        background: #000;\n    }\n&lt;/style&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        zoom: 0,\n        center: [137.9150899566626, 36.25956997955441],\n        style: {\n            'version': 8,\n            'projection': {\n                'type': 'globe'\n            },\n            'sources': {\n                'satellite': {\n                    'tiles': ['https://tiles.maps.eox.at/wmts/1.0.0/s2cloudless-2020_3857/default/g/{z}/{y}/{x}.jpg'],\n                    'type': 'raster'\n                },\n            },\n            'layers': [\n                {\n                    'id': 'Satellite',\n                    'type': 'raster',\n                    'source': 'satellite',\n                },\n            ],\n            'sky': {\n                'atmosphere-blend': [\n                    'interpolate',\n                    ['linear'],\n                    ['zoom'],\n                    0, 1,\n                    5, 1,\n                    7, 0\n                ]\n            },\n            'light': {\n                'anchor': 'map',\n                'position': [1.5, 90, 80]\n            }\n        }\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/display-a-hybrid-satellite-map-with-terrain-elevation/","title":"Display a hybrid satellite map with terrain elevation","text":"<p>Display a hybrid satellite map with terrain elevation.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display a hybrid satellite map with terrain elevation&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Display a hybrid satellite map with terrain elevation.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        zoom: 12,\n        center: [11.39085, 47.27574],\n        pitch: 70,\n        maxPitch: 95\n    });\n\n    map.setStyle('https://tiles.openfreemap.org/styles/bright', {\n            transformStyle: (previousStyle, nextStyle) =&gt; {\n                nextStyle.projection = {type: 'globe'};\n                nextStyle.sources = {\n                    ...nextStyle.sources,\n                    satelliteSource: {\n                        type: 'raster',\n                        tiles: [\n                            'https://tiles.maps.eox.at/wmts/1.0.0/s2cloudless-2020_3857/default/g/{z}/{y}/{x}.jpg'\n                        ],\n                        tileSize: 256\n                    },\n                    terrainSource: {\n                        type: 'raster-dem',\n                        url: 'https://demotiles.maplibre.org/terrain-tiles/tiles.json',\n                        tileSize: 256\n                    },\n                    hillshadeSource: {\n                        type: 'raster-dem',\n                        url: 'https://demotiles.maplibre.org/terrain-tiles/tiles.json',\n                        tileSize: 256\n                    }\n                }\n                nextStyle.terrain = {\n                    source: 'terrainSource',\n                    exaggeration: 1\n                }\n\n                nextStyle.sky = {\n                    'atmosphere-blend': [\n                        'interpolate',\n                        ['linear'],\n                        ['zoom'],\n                        0, 1,\n                        2, 0\n                    ],\n                }\n\n                nextStyle.layers.push({\n                    id: 'hills',\n                    type: 'hillshade',\n                    source: 'hillshadeSource',\n                    layout: { visibility: 'visible' },\n                    paint: { 'hillshade-shadow-color': '#473B24' }\n                })\n\n                const firstNonFillLayer = nextStyle.layers.find(layer =&gt; layer.type !== 'fill' &amp;&amp; layer.type !== 'background');\n                nextStyle.layers.splice(nextStyle.layers.indexOf(firstNonFillLayer), 0, {\n                    id: 'satellite',\n                    type: 'raster',\n                    source: 'satelliteSource',\n                    layout: { visibility: 'visible' },\n                    paint: { 'raster-opacity': 1 }\n                });\n\n                return nextStyle;\n            }\n        })\n\n    map.addControl(\n        new maplibregl.NavigationControl({\n            visualizePitch: true,\n            showZoom: true,\n            showCompass: true\n        })\n    );\n\n\n    map.addControl(\n        new maplibregl.GlobeControl()\n    );\n\n    map.addControl(\n        new maplibregl.TerrainControl({\n            source: 'terrainSource',\n            exaggeration: 1\n        })\n    );\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/display-a-map/","title":"Display a map","text":"<p>Initialize a map in an HTML element with MapLibre GL JS.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display a map&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Initialize a map in an HTML element with MapLibre GL JS.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style: 'https://demotiles.maplibre.org/style.json', // style URL\n        center: [0, 0], // starting position [lng, lat]\n        zoom: 1, // starting zoom\n        maplibreLogo: true\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/display-a-non-interactive-map/","title":"Display a non-interactive map","text":"<p>Disable interactivity to create a static map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display a non-interactive map&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Disable interactivity to create a static map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [74.5, 40],\n        zoom: 3,\n        // causes pan &amp; zoom handlers not to be applied, similar to\n        // .dragging.disable() and other handler .disable() functions in Leaflet.\n        interactive: false\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/display-a-popup-on-click/","title":"Display a popup on click","text":"<p>When a user clicks a symbol, show a popup containing more information.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display a popup on click&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"When a user clicks a symbol, show a popup containing more information.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .maplibregl-popup {\n        max-width: 400px;\n        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-77.04, 38.907],\n        zoom: 11.15\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('places', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Make it Mount Pleasant&lt;/strong&gt;&lt;p&gt;&lt;a href=\"http://www.mtpleasantdc.com/makeitmtpleasant\" target=\"_blank\" title=\"Opens in a new window\"&gt;Make it Mount Pleasant&lt;/a&gt; is a handmade and vintage market and afternoon of live entertainment and kids activities. 12:00-6:00 p.m.&lt;/p&gt;',\n                            'icon': 'theatre'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.038659, 38.931567]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Mad Men Season Five Finale Watch Party&lt;/strong&gt;&lt;p&gt;Head to Lounge 201 (201 Massachusetts Avenue NE) Sunday for a &lt;a href=\"http://madmens5finale.eventbrite.com/\" target=\"_blank\" title=\"Opens in a new window\"&gt;Mad Men Season Five Finale Watch Party&lt;/a&gt;, complete with 60s costume contest, Mad Men trivia, and retro food and drink. 8:00-11:00 p.m. $10 general admission, $20 admission and two hour open bar.&lt;/p&gt;',\n                            'icon': 'theatre'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.003168, 38.894651]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Big Backyard Beach Bash and Wine Fest&lt;/strong&gt;&lt;p&gt;EatBar (2761 Washington Boulevard Arlington VA) is throwing a &lt;a href=\"http://tallulaeatbar.ticketleap.com/2012beachblanket/\" target=\"_blank\" title=\"Opens in a new window\"&gt;Big Backyard Beach Bash and Wine Fest&lt;/a&gt; on Saturday, serving up conch fritters, fish tacos and crab sliders, and Red Apron hot dogs. 12:00-3:00 p.m. $25.grill hot dogs.&lt;/p&gt;',\n                            'icon': 'bar'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.090372, 38.881189]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Ballston Arts &amp; Crafts Market&lt;/strong&gt;&lt;p&gt;The &lt;a href=\"https://ballstonarts-craftsmarket.blogspot.com/\" target=\"_blank\" title=\"Opens in a new window\"&gt;Ballston Arts &amp; Crafts Market&lt;/a&gt; sets up shop next to the Ballston metro this Saturday for the first of five dates this summer. Nearly 35 artists and crafters will be on hand selling their wares. 10:00-4:00 p.m.&lt;/p&gt;',\n                            'icon': 'art-gallery'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.111561, 38.882342]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Seersucker Bike Ride and Social&lt;/strong&gt;&lt;p&gt;Feeling dandy? Get fancy, grab your bike, and take part in this year\\'s &lt;a href=\"http://dandiesandquaintrelles.com/2012/04/the-seersucker-social-is-set-for-june-9th-save-the-date-and-start-planning-your-look/\" target=\"_blank\" title=\"Opens in a new window\"&gt;Seersucker Social&lt;/a&gt; bike ride from Dandies and Quaintrelles. After the ride enjoy a lawn party at Hillwood with jazz, cocktails, paper hat-making, and more. 11:00-7:00 p.m.&lt;/p&gt;',\n                            'icon': 'bicycle'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.052477, 38.943951]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Capital Pride Parade&lt;/strong&gt;&lt;p&gt;The annual &lt;a href=\"https://www.capitalpride.org/parade\" target=\"_blank\" title=\"Opens in a new window\"&gt;Capital Pride Parade&lt;/a&gt; makes its way through Dupont this Saturday. 4:30 p.m. Free.&lt;/p&gt;',\n                            'icon': 'rocket'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.043444, 38.909664]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Muhsinah&lt;/strong&gt;&lt;p&gt;Jazz-influenced hip hop artist &lt;a href=\"https://www.muhsinah.com\" target=\"_blank\" title=\"Opens in a new window\"&gt;Muhsinah&lt;/a&gt; plays the &lt;a href=\"https://www.blackcatdc.com\"&gt;Black Cat&lt;/a&gt; (1811 14th Street NW) tonight with &lt;a href=\"https://www.exitclov.com\" target=\"_blank\" title=\"Opens in a new window\"&gt;Exit Clov&lt;/a&gt; and &lt;a href=\"https://godsilla.bandcamp.com\" target=\"_blank\" title=\"Opens in a new window\"&gt;Gods\u2019illa&lt;/a&gt;. 9:00 p.m. $12.&lt;/p&gt;',\n                            'icon': 'music'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.031706, 38.914581]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;A Little Night Music&lt;/strong&gt;&lt;p&gt;The Arlington Players\\' production of Stephen Sondheim\\'s  &lt;a href=\"http://www.thearlingtonplayers.org/drupal-6.20/node/4661/show\" target=\"_blank\" title=\"Opens in a new window\"&gt;&lt;em&gt;A Little Night Music&lt;/em&gt;&lt;/a&gt; comes to the Kogod Cradle at The Mead Center for American Theater (1101 6th Street SW) this weekend and next. 8:00 p.m.&lt;/p&gt;',\n                            'icon': 'music'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.020945, 38.878241]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Truckeroo&lt;/strong&gt;&lt;p&gt;&lt;a href=\"http://www.truckeroodc.com/www/\" target=\"_blank\"&gt;Truckeroo&lt;/a&gt; brings dozens of food trucks, live music, and games to half and M Street SE (across from Navy Yard Metro Station) today from 11:00 a.m. to 11:00 p.m.&lt;/p&gt;',\n                            'icon': 'music'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.007481, 38.876516]\n                        }\n                    }\n                ]\n            }\n        });\n        // Add a layer showing the places.\n        map.addLayer({\n            'id': 'places',\n            'type': 'symbol',\n            'source': 'places',\n            'layout': {\n                'icon-image': '{icon}',\n                'icon-overlap': 'always'\n            }\n        });\n\n        // When a click event occurs on a feature in the places layer, open a popup at the\n        // location of the feature, with description HTML from its properties.\n        map.on('click', 'places', (e) =&gt; {\n            const coordinates = e.features[0].geometry.coordinates.slice();\n            const description = e.features[0].properties.description;\n\n            // Ensure that if the map is zoomed out such that multiple\n            // copies of the feature are visible, the popup appears\n            // over the copy being pointed to.\n            while (Math.abs(e.lngLat.lng - coordinates[0]) &gt; 180) {\n                coordinates[0] += e.lngLat.lng &gt; coordinates[0] ? 360 : -360;\n            }\n\n            new maplibregl.Popup()\n                .setLngLat(coordinates)\n                .setHTML(description)\n                .addTo(map);\n        });\n\n        // Change the cursor to a pointer when the mouse is over the places layer.\n        map.on('mouseenter', 'places', () =&gt; {\n            map.getCanvas().style.cursor = 'pointer';\n        });\n\n        // Change it back to a pointer when it leaves.\n        map.on('mouseleave', 'places', () =&gt; {\n            map.getCanvas().style.cursor = '';\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/display-a-popup-on-hover/","title":"Display a popup on hover","text":"<p>When a user hovers over a custom marker, show a popup containing more information.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display a popup on hover&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"When a user hovers over a custom marker, show a popup containing more information.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .maplibregl-popup {\n        max-width: 400px;\n        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-77.04, 38.907],\n        zoom: 11.15\n    });\n\n    map.on('load', async () =&gt; {\n        const image = await map.loadImage('https://maplibre.org/maplibre-gl-js/docs/assets/custom_marker.png');\n        // Add an image to use as a custom marker\n        map.addImage('custom-marker', image.data);\n\n        map.addSource('places', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Make it Mount Pleasant&lt;/strong&gt;&lt;p&gt;Make it Mount Pleasant is a handmade and vintage market and afternoon of live entertainment and kids activities. 12:00-6:00 p.m.&lt;/p&gt;'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.038659, 38.931567]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Mad Men Season Five Finale Watch Party&lt;/strong&gt;&lt;p&gt;Head to Lounge 201 (201 Massachusetts Avenue NE) Sunday for a Mad Men Season Five Finale Watch Party, complete with 60s costume contest, Mad Men trivia, and retro food and drink. 8:00-11:00 p.m. $10 general admission, $20 admission and two hour open bar.&lt;/p&gt;'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.003168, 38.894651]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Big Backyard Beach Bash and Wine Fest&lt;/strong&gt;&lt;p&gt;EatBar (2761 Washington Boulevard Arlington VA) is throwing a Big Backyard Beach Bash and Wine Fest on Saturday, serving up conch fritters, fish tacos and crab sliders, and Red Apron hot dogs. 12:00-3:00 p.m. $25.&lt;/p&gt;'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.090372, 38.881189]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Ballston Arts &amp; Crafts Market&lt;/strong&gt;&lt;p&gt;The Ballston Arts &amp; Crafts Market sets up shop next to the Ballston metro this Saturday for the first of five dates this summer. Nearly 35 artists and crafters will be on hand selling their wares. 10:00-4:00 p.m.&lt;/p&gt;'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.111561, 38.882342]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Seersucker Bike Ride and Social&lt;/strong&gt;&lt;p&gt;Feeling dandy? Get fancy, grab your bike, and take part in this year\\'s Seersucker Social bike ride from Dandies and Quaintrelles. After the ride enjoy a lawn party at Hillwood with jazz, cocktails, paper hat-making, and more. 11:00-7:00 p.m.&lt;/p&gt;'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.052477, 38.943951]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Capital Pride Parade&lt;/strong&gt;&lt;p&gt;The annual Capital Pride Parade makes its way through Dupont this Saturday. 4:30 p.m. Free.&lt;/p&gt;'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.043444, 38.909664]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Muhsinah&lt;/strong&gt;&lt;p&gt;Jazz-influenced hip hop artist Muhsinah plays the Black Cat (1811 14th Street NW) tonight with Exit Clov and Gods\u2019illa. 9:00 p.m. $12.&lt;/p&gt;'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.031706, 38.914581]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;A Little Night Music&lt;/strong&gt;&lt;p&gt;The Arlington Players\\' production of Stephen Sondheim\\'s &lt;em&gt;A Little Night Music&lt;/em&gt; comes to the Kogod Cradle at The Mead Center for American Theater (1101 6th Street SW) this weekend and next. 8:00 p.m.&lt;/p&gt;'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.020945, 38.878241]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'description':\n                                '&lt;strong&gt;Truckeroo&lt;/strong&gt;&lt;p&gt;Truckeroo brings dozens of food trucks, live music, and games to half and M Street SE (across from Navy Yard Metro Station) today from 11:00 a.m. to 11:00 p.m.&lt;/p&gt;'\n                        },\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-77.007481, 38.876516]\n                        }\n                    }\n                ]\n            }\n        });\n\n        // Add a layer showing the places.\n        map.addLayer({\n            'id': 'places',\n            'type': 'symbol',\n            'source': 'places',\n            'layout': {\n                'icon-image': 'custom-marker',\n                'icon-overlap': 'always'\n            }\n        });\n\n        // Create a popup, but don't add it to the map yet.\n        const popup = new maplibregl.Popup({\n            closeButton: false,\n            closeOnClick: false\n        });\n\n        // Make sure to detect marker change for overlapping markers\n        // and use mousemove instead of mouseenter event\n        let currentFeatureCoordinates = undefined;\n        map.on('mousemove', 'places', (e) =&gt; {\n            const featureCoordinates = e.features[0].geometry.coordinates.toString();\n            if (currentFeatureCoordinates !== featureCoordinates) {\n                currentFeatureCoordinates = featureCoordinates;\n\n                // Change the cursor style as a UI indicator.\n                map.getCanvas().style.cursor = 'pointer';\n\n                const coordinates = e.features[0].geometry.coordinates.slice();\n                const description = e.features[0].properties.description;\n\n                // Ensure that if the map is zoomed out such that multiple\n                // copies of the feature are visible, the popup appears\n                // over the copy being pointed to.\n                while (Math.abs(e.lngLat.lng - coordinates[0]) &gt; 180) {\n                    coordinates[0] += e.lngLat.lng &gt; coordinates[0] ? 360 : -360;\n                }\n\n                // Populate the popup and set its coordinates\n                // based on the feature found.\n                popup.setLngLat(coordinates).setHTML(description).addTo(map);\n            }\n        });\n\n        map.on('mouseleave', 'places', () =&gt; {\n            currentFeatureCoordinates = undefined;\n            map.getCanvas().style.cursor = '';\n            popup.remove();\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/display-a-popup/","title":"Display a popup","text":"<p>Add a popup to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display a popup&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add a popup to the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [-96, 37.8],\n        zoom: 3\n    });\n\n    const popup = new maplibregl.Popup({closeOnClick: false})\n        .setLngLat([-96, 37.8])\n        .setHTML('&lt;h1&gt;Hello World!&lt;/h1&gt;')\n        .addTo(map);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/display-a-remote-svg-symbol/","title":"Display a remote SVG symbol","text":"<p>Uses the 'styleimagemissing' event to load a remote image and use it.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display a remote SVG symbol&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Uses the 'styleimagemissing' event to load a remote image and use it.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style: 'https://demotiles.maplibre.org/style.json', // style URL\n        center: [0, 0], // starting position [lng, lat]\n        zoom: 1, // starting zoom\n        maplibreLogo: true\n    });\n    map.on('load', () =&gt; {\n        const existingImages = {};\n        map.on('styleimagemissing', async (e) =&gt; {\n            if (existingImages[e.id]) {\n                return;\n            }\n            existingImages[e.id] = true;\n            const response = await fetch(e.id);\n            const svgText = await response.text();\n            const svg = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svgText);\n            const image = new Image();\n            const promise = new Promise((resolve) =&gt; {\n                image.onload = resolve;\n            });\n            image.src = svg;\n            await promise; // Wait for the image to load\n            map.addImage(e.id, image);\n        });\n\n        map.addSource('point', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [0, 0]\n                        },\n                    },\n\n                ]\n            }\n        });\n        map.addLayer({\n            'id': 'svg-symbol',\n            'type': 'symbol',\n            'source': 'point',\n            'layout': {\n                'icon-image': 'https://maplibre.org/maplibre-gl-js/docs/assets/logo.svg',\n                'icon-overlap': 'always',\n                'text-overlap': 'always'\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/display-a-satellite-map/","title":"Display a satellite map","text":"<p>Display a satellite raster baselayer.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display a satellite map&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Display a satellite raster baselayer.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        zoom: 9,\n        center: [137.9150899566626, 36.25956997955441],\n        style: {\n            \"version\": 8,\n            \"sources\": {\n                \"satellite\": {\n                    \"type\": \"raster\",\n                    \"tiles\": [\n                        \"https://tiles.maps.eox.at/wmts/1.0.0/s2cloudless-2020_3857/default/g/{z}/{y}/{x}.jpg\"\n                    ],\n                    \"tileSize\": 256\n                }\n            },\n            \"layers\": [{\n                \"id\": \"satellite\",\n                \"type\": \"raster\",\n                \"source\": \"satellite\"\n            }]\n        }\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/display-and-style-rich-text-labels/","title":"Display and style rich text labels","text":"<p>Use the format expression to display country labels in both English and in the local language.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display and style rich text labels&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use the format expression to display country labels in both English and in the local language.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;!-- The lang attribute is read from the map container if present, otherwise from the HTML document --&gt;\n&lt;div id=\"map\" lang=\"zh-HK\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    maplibregl.setRTLTextPlugin(\n        'https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.3.0/dist/mapbox-gl-rtl-text.js'\n    );\n\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style: 'https://tiles.openfreemap.org/styles/bright', // style URL\n        center: [17.49, 40.01], // starting position [lng, lat]\n        zoom: 4 // starting zoom\n    });\n\n    map.on('load', () =&gt; {\n        map.setLayoutProperty('label_country', 'text-field', [\n            'format',\n            ['get', 'name_en'],\n            {'font-scale': 1.2},\n            '\\n',\n            {},\n            ['get', 'name'],\n            {\n                'font-scale': 0.8,\n                'text-font': [\n                    'literal',\n                    ['Noto Sans Regular']\n                ]\n            }\n        ]);\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/display-buildings-in-3d/","title":"Display buildings in 3D","text":"<p>Use extrusions to display buildings' height in 3D.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;title&gt;Display buildings in 3D&lt;/title&gt;\n  &lt;meta property=\"og:description\" content=\"Use extrusions to display buildings' height in 3D.\" /&gt;\n  &lt;meta charset='utf-8'&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n  &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n  &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n  &lt;style&gt;\n      body { margin: 0; padding: 0; }\n      html, body, #map { height: 100%; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n  const map = new maplibregl.Map({\n      style: `https://tiles.openfreemap.org/styles/bright`,\n      center: [-74.0066, 40.7135],\n      zoom: 15.5,\n      pitch: 45,\n      bearing: -17.6,\n      container: 'map',\n      canvasContextAttributes: {antialias: true}\n  });\n\n  // The 'building' layer in the streets vector source contains building-height\n  // data from OpenStreetMap.\n  map.on('load', () =&gt; {\n      // Insert the layer beneath any symbol layer.\n      const layers = map.getStyle().layers;\n\n      let labelLayerId;\n      for (let i = 0; i &lt; layers.length; i++) {\n          if (layers[i].type === 'symbol' &amp;&amp; layers[i].layout['text-field']) {\n              labelLayerId = layers[i].id;\n              break;\n          }\n      }\n\n      map.addSource('openfreemap', {\n          url: `https://tiles.openfreemap.org/planet`,\n          type: 'vector',\n      });\n\n      map.addLayer(\n          {\n              'id': '3d-buildings',\n              'source': 'openfreemap',\n              'source-layer': 'building',\n              'type': 'fill-extrusion',\n              'minzoom': 15,\n              'filter': ['!=', ['get', 'hide_3d'], true],\n              'paint': {\n                  'fill-extrusion-color': [\n                      'interpolate',\n                      ['linear'],\n                      ['get', 'render_height'], 0, 'lightgray', 200, 'royalblue', 400, 'lightblue'\n                  ],\n                  'fill-extrusion-height': [\n                      'interpolate',\n                      ['linear'],\n                      ['zoom'],\n                      15,\n                      0,\n                      16,\n                      ['get', 'render_height']\n                  ],\n                  'fill-extrusion-base': ['case',\n                      ['&gt;=', ['get', 'zoom'], 16],\n                      ['get', 'render_min_height'], 0\n                  ]\n              }\n          },\n          labelLayerId\n      );\n  });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/display-html-clusters-with-custom-properties/","title":"Display HTML clusters with custom properties","text":"<p>Extend clustering with HTML markers and custom property expressions. </p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display HTML clusters with custom properties&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Extend clustering with HTML markers and custom property expressions. \" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        zoom: 0.3,\n        center: [0, 20],\n        style: 'https://demotiles.maplibre.org/style.json'\n    });\n\n    map.addControl(new maplibregl.NavigationControl());\n\n    // filters for classifying earthquakes into five categories based on magnitude\n    const mag1 = ['&lt;', ['get', 'mag'], 2];\n    const mag2 = ['all', ['&gt;=', ['get', 'mag'], 2], ['&lt;', ['get', 'mag'], 3]];\n    const mag3 = ['all', ['&gt;=', ['get', 'mag'], 3], ['&lt;', ['get', 'mag'], 4]];\n    const mag4 = ['all', ['&gt;=', ['get', 'mag'], 4], ['&lt;', ['get', 'mag'], 5]];\n    const mag5 = ['&gt;=', ['get', 'mag'], 5];\n\n    // colors to use for the categories\n    const colors = ['#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c'];\n\n    map.on('load', () =&gt; {\n        // add a clustered GeoJSON source for a sample set of earthquakes\n        map.addSource('earthquakes', {\n            'type': 'geojson',\n            'data':\n                'https://maplibre.org/maplibre-gl-js/docs/assets/earthquakes.geojson',\n            'cluster': true,\n            'clusterRadius': 80,\n            'clusterProperties': {\n                // keep separate counts for each magnitude category in a cluster\n                'mag1': ['+', ['case', mag1, 1, 0]],\n                'mag2': ['+', ['case', mag2, 1, 0]],\n                'mag3': ['+', ['case', mag3, 1, 0]],\n                'mag4': ['+', ['case', mag4, 1, 0]],\n                'mag5': ['+', ['case', mag5, 1, 0]]\n            }\n        });\n        // circle and symbol layers for rendering individual earthquakes (unclustered points)\n        map.addLayer({\n            'id': 'earthquake_circle',\n            'type': 'circle',\n            'source': 'earthquakes',\n            'filter': ['!=', 'cluster', true],\n            'paint': {\n                'circle-color': [\n                    'case',\n                    mag1,\n                    colors[0],\n                    mag2,\n                    colors[1],\n                    mag3,\n                    colors[2],\n                    mag4,\n                    colors[3],\n                    colors[4]\n                ],\n                'circle-opacity': 0.6,\n                'circle-radius': 12\n            }\n        });\n        map.addLayer({\n            'id': 'earthquake_label',\n            'type': 'symbol',\n            'source': 'earthquakes',\n            'filter': ['!=', 'cluster', true],\n            'layout': {\n                'text-field': [\n                    'number-format',\n                    ['get', 'mag'],\n                    {'min-fraction-digits': 1, 'max-fraction-digits': 1}\n                ],\n                'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n                'text-size': 10\n            },\n            'paint': {\n                'text-color': [\n                    'case',\n                    ['&lt;', ['get', 'mag'], 3],\n                    'black',\n                    'white'\n                ]\n            }\n        });\n\n        // objects for caching and keeping track of HTML marker objects (for performance)\n        const markers = {};\n        let markersOnScreen = {};\n\n        function updateMarkers() {\n            const newMarkers = {};\n            const features = map.querySourceFeatures('earthquakes');\n\n            // for every cluster on the screen, create an HTML marker for it (if we didn't yet),\n            // and add it to the map if it's not there already\n            for (let i = 0; i &lt; features.length; i++) {\n                const coords = features[i].geometry.coordinates;\n                const props = features[i].properties;\n                if (!props.cluster) continue;\n                const id = props.cluster_id;\n\n                let marker = markers[id];\n                if (!marker) {\n                    const el = createDonutChart(props);\n                    marker = markers[id] = new maplibregl.Marker({\n                        element: el\n                    }).setLngLat(coords);\n                }\n                newMarkers[id] = marker;\n\n                if (!markersOnScreen[id]) marker.addTo(map);\n            }\n            // for every marker we've added previously, remove those that are no longer visible\n            for (id in markersOnScreen) {\n                if (!newMarkers[id]) markersOnScreen[id].remove();\n            }\n            markersOnScreen = newMarkers;\n        }\n\n        // after the GeoJSON data is loaded, update markers on the screen and do so on every map move/moveend\n        map.on('data', (e) =&gt; {\n            if (e.sourceId !== 'earthquakes' || !e.isSourceLoaded) return;\n\n            map.on('move', updateMarkers);\n            map.on('moveend', updateMarkers);\n            updateMarkers();\n        });\n    });\n\n    // code for creating an SVG donut chart from feature properties\n    function createDonutChart(props) {\n        const offsets = [];\n        const counts = [\n            props.mag1,\n            props.mag2,\n            props.mag3,\n            props.mag4,\n            props.mag5\n        ];\n        let total = 0;\n        for (let i = 0; i &lt; counts.length; i++) {\n            offsets.push(total);\n            total += counts[i];\n        }\n        const fontSize =\n        total &gt;= 1000 ? 22 : total &gt;= 100 ? 20 : total &gt;= 10 ? 18 : 16;\n        const r = total &gt;= 1000 ? 50 : total &gt;= 100 ? 32 : total &gt;= 10 ? 24 : 18;\n        const r0 = Math.round(r * 0.6);\n        const w = r * 2;\n\n        let html =\n            `&lt;div&gt;&lt;svg width=\"${\n                w\n            }\" height=\"${\n                w\n            }\" viewbox=\"0 0 ${\n                w\n            } ${\n                w\n            }\" text-anchor=\"middle\" style=\"font: ${\n                fontSize\n            }px sans-serif; display: block\"&gt;`;\n\n        for (i = 0; i &lt; counts.length; i++) {\n            html += donutSegment(\n                offsets[i] / total,\n                (offsets[i] + counts[i]) / total,\n                r,\n                r0,\n                colors[i]\n            );\n        }\n        html +=\n            `&lt;circle cx=\"${\n                r\n            }\" cy=\"${\n                r\n            }\" r=\"${\n                r0\n            }\" fill=\"white\" /&gt;&lt;text dominant-baseline=\"central\" transform=\"translate(${\n                r\n            }, ${\n                r\n            })\"&gt;${\n                total.toLocaleString()\n            }&lt;/text&gt;&lt;/svg&gt;&lt;/div&gt;`;\n\n        const el = document.createElement('div');\n        el.innerHTML = html;\n        return el.firstChild;\n    }\n\n    function donutSegment(start, end, r, r0, color) {\n        if (end - start === 1) end -= 0.00001;\n        const a0 = 2 * Math.PI * (start - 0.25);\n        const a1 = 2 * Math.PI * (end - 0.25);\n        const x0 = Math.cos(a0),\n            y0 = Math.sin(a0);\n        const x1 = Math.cos(a1),\n            y1 = Math.sin(a1);\n        const largeArc = end - start &gt; 0.5 ? 1 : 0;\n\n        return [\n            '&lt;path d=\"M',\n            r + r0 * x0,\n            r + r0 * y0,\n            'L',\n            r + r * x0,\n            r + r * y0,\n            'A',\n            r,\n            r,\n            0,\n            largeArc,\n            1,\n            r + r * x1,\n            r + r * y1,\n            'L',\n            r + r0 * x1,\n            r + r0 * y1,\n            'A',\n            r0,\n            r0,\n            0,\n            largeArc,\n            0,\n            r + r0 * x0,\n            r + r0 * y0,\n            `\" fill=\"${color}\" /&gt;`\n        ].join(' ');\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/display-line-that-crosses-180th-meridian/","title":"Display line that crosses 180th meridian","text":"<p>Draw a line across the 180th meridian using a GeoJSON source.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display line that crosses 180th meridian&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Draw a line across the 180th meridian using a GeoJSON source.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [-41.62667, 26.11598],\n        zoom: 0\n    });\n\n    map.on('load', () =&gt; {\n        map.addLayer({\n            'id': 'route',\n            'type': 'line',\n            'source': {\n                'type': 'geojson',\n                'data': {\n                    'type': 'Feature',\n                    'properties': {},\n                    'geometry': createGeometry(false)\n                }\n            },\n            'layout': {'line-cap': 'round'},\n            'paint': {\n                'line-color': '#007296',\n                'line-width': 4\n            }\n        });\n\n        map.addLayer({\n            'id': 'route-label',\n            'type': 'symbol',\n            'source': 'route',\n            'layout': {\n                'symbol-placement': 'line-center',\n                'text-field': 'Crosses the world'\n            }\n        });\n\n        map.addLayer({\n            'id': 'route-two',\n            'type': 'line',\n            'source': {\n                'type': 'geojson',\n                'data': {\n                    'type': 'Feature',\n                    'properties': {},\n                    'geometry': createGeometry(true)\n                }\n            },\n            'layout': {'line-cap': 'round'},\n            'paint': {\n                'line-color': '#F06317',\n                'line-width': 4\n            }\n        });\n\n        map.addLayer({\n            'id': 'route-two-label',\n            'type': 'symbol',\n            'source': 'route-two',\n            'layout': {\n                'symbol-placement': 'line-center',\n                'text-field': 'Crosses 180th meridian'\n            }\n        });\n\n        function createGeometry(doesCrossAntimeridian) {\n            const geometry = {\n                'type': 'LineString',\n                'coordinates': [\n                    [-72.42187, -16.59408],\n                    [140.27343, 35.67514]\n                ]\n            };\n\n            // To draw a line across the 180th meridian,\n            // if the longitude of the second point minus\n            // the longitude of original (or previous) point is &gt;= 180,\n            // subtract 360 from the longitude of the second point.\n            // If it is less than 180, add 360 to the second point.\n\n            if (doesCrossAntimeridian) {\n                const startLng = geometry.coordinates[0][0];\n                const endLng = geometry.coordinates[1][0];\n\n                if (endLng - startLng &gt;= 180) {\n                    geometry.coordinates[1][0] -= 360;\n                } else if (endLng - startLng &lt; 180) {\n                    geometry.coordinates[1][0] += 360;\n                }\n            }\n\n            return geometry;\n        }\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/display-map-navigation-controls/","title":"Display map navigation controls","text":"<p>Add zoom and rotation controls to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Display map navigation controls&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Add zoom and rotation controls to the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [-74.5, 40], // starting position\n        zoom: 2, // starting zoom\n        rollEnabled: true // Enable mouse control of camera roll angle with `Ctrl` + right-click and drag\n    });\n\n    // Add zoom and rotation controls to the map.\n    map.addControl(new maplibregl.NavigationControl({\n        visualizePitch: true,\n        visualizeRoll: true,\n        showZoom: true,\n        showCompass: true\n    }));\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/draw-a-circle/","title":"Draw a Circle","text":"<p>Draw a radius to approximate a location with Turf.js</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Draw a Circle&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Draw a radius to approximate a location with Turf.js\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script src=\"https://cdn.jsdelivr.net/npm/@turf/turf@7/turf.min.js\"&gt;&lt;/script&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const radiusCenter = [2.3454, 48.8452];\n    const map = new maplibregl.Map({\n        container: 'map',\n        zoom: 13,\n        center: radiusCenter,\n        style: {\n            version: 8,\n            sources: {\n                osm: {\n                    type: 'raster',\n                    tiles: ['https://tile.openstreetmap.org/{z}/{x}/{y}.png'],\n                    tileSize: 256,\n                    attribution: '&amp;copy; OpenStreetMap Contributors',\n                    maxzoom: 19\n                }\n            },\n            layers: [\n                {\n                    id: 'osm',\n                    type: 'raster',\n                    source: 'osm'\n                }\n            ]\n        },\n        maxZoom: 18,\n        maxPitch: 85\n    });\n\n    map.on('load', () =&gt; {\n        // Generate a polygon using turf.circle\n        // See https://turfjs.org/docs/#circle\n        const radius = 1; // kilometer\n        const options = {\n            steps: 64,\n            units: 'kilometers'\n        };\n        const circle = turf.circle(radiusCenter, radius, options);\n\n        // Add the circle as a GeoJSON source\n        map.addSource('location-radius', {\n            type: 'geojson',\n            data: circle\n        });\n\n        // Add a fill layer with some transparency\n        map.addLayer({\n            id: 'location-radius',\n            type: 'fill',\n            source: 'location-radius',\n            paint: {\n                'fill-color': '#8CCFFF',\n                'fill-opacity': 0.5\n            }\n        });\n\n        // Add a line layer to draw the circle outline\n        map.addLayer({\n            id: 'location-radius-outline',\n            type: 'line',\n            source: 'location-radius',\n            paint: {\n                'line-color': '#0094ff',\n                'line-width': 3\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/draw-geojson-points/","title":"Draw GeoJSON points","text":"<p>Draw points from a GeoJSON collection to a map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Draw GeoJSON points&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Draw points from a GeoJSON collection to a map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [0, 0],\n        zoom: 1\n    });\n\n    map.on('load', async () =&gt; {\n        // Add an image to use as a custom marker\n        const image = await map.loadImage('https://maplibre.org/maplibre-gl-js/docs/assets/osgeo-logo.png');\n        map.addImage('custom-marker', image.data);\n        // Add a GeoJSON source with 15 points\n        map.addSource('conferences', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [100.4933, 13.7551]\n                        },\n                        'properties': {'year': '2004'}\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [6.6523, 46.5535]\n                        },\n                        'properties': {'year': '2006'}\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-123.3596, 48.4268]\n                        },\n                        'properties': {'year': '2007'}\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [18.4264, -33.9224]\n                        },\n                        'properties': {'year': '2008'}\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [151.195, -33.8552]\n                        },\n                        'properties': {'year': '2009'}\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [2.1404, 41.3925]\n                        },\n                        'properties': {'year': '2010'}\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-104.8548, 39.7644]\n                        },\n                        'properties': {'year': '2011'}\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-1.1665, 52.9539]\n                        },\n                        'properties': {'year': '2013'}\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-122.6544, 45.5428]\n                        },\n                        'properties': {'year': '2014'}\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [126.974, 37.5651]\n                        },\n                        'properties': {'year': '2015'}\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [7.1112, 50.7255]\n                        },\n                        'properties': {'year': '2016'}\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-71.0314, 42.3539]\n                        },\n                        'properties': {'year': '2017'}\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [39.2794, -6.8173]\n                        },\n                        'properties': {'year': '2018'}\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [26.0961, 44.4379]\n                        },\n                        'properties': {'year': '2019'}\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-114.0879, 51.0279]\n                        },\n                        'properties': {'year': '2020'}\n                    }\n                ]\n            }\n        });\n\n        // Add a symbol layer\n        map.addLayer({\n            'id': 'conferences',\n            'type': 'symbol',\n            'source': 'conferences',\n            'layout': {\n                'icon-image': 'custom-marker',\n                // get the year from the source's \"year\" property\n                'text-field': ['get', 'year'],\n                'text-font': [ 'Noto Sans Regular' ],\n                'text-offset': [0, 1.25],\n                'text-anchor': 'top'\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/draw-geometries-with-terra-draw/","title":"Draw geometries with terra-draw","text":"<p>Use maplibre-gl-terradraw to draw a geometry in various forms such as point, line or polygon on your map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Draw geometries with terra-draw&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use maplibre-gl-terradraw to draw a geometry in various forms such as point, line or polygon on your map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;script src=\"https://cdn.jsdelivr.net/npm/@watergis/maplibre-gl-terradraw@1.0.1/dist/maplibre-gl-terradraw.umd.js\"&gt;&lt;/script&gt;\n&lt;link\n    rel=\"stylesheet\"\n    href=\"https://cdn.jsdelivr.net/npm/@watergis/maplibre-gl-terradraw@1.0.1/dist/maplibre-gl-terradraw.css\"\n/&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style: 'https://tiles.openfreemap.org/styles/bright', // style URL\n        center: [-91.874, 42.76], // starting position\n        zoom: 12 // starting zoom\n    });\n\n    // By default, all terra-draw drawing modes are enabled.\n    // you can disable some of modes in the constructor options if you want.\n    const draw = new MaplibreTerradrawControl.MaplibreTerradrawControl({\n        modes: [\n            // 'render', comment this to always show drawing tool\n            'point',\n            'linestring',\n            'polygon',\n            'rectangle',\n            'circle',\n            'freehand',\n            'angled-rectangle',\n            'sensor',\n            'sector',\n            'select',\n            'delete-selection',\n            'delete',\n            'download'\n        ],\n        open: true,\n    });\n    map.addControl(draw, 'top-left');\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/draw-polygon-with-mapbox-gl-draw/","title":"Draw polygon with mapbox-gl-draw","text":"<p>Use mapbox-gl-draw to draw a polygon and Turf.js to calculate its area in square meters.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Draw polygon with mapbox-gl-draw&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use mapbox-gl-draw to draw a polygon and Turf.js to calculate its area in square meters.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .calculation-box {\n        height: 75px;\n        width: 150px;\n        position: absolute;\n        bottom: 40px;\n        left: 10px;\n        background-color: rgba(255, 255, 255, 0.9);\n        padding: 15px;\n        text-align: center;\n    }\n\n    p {\n        font-family: 'Open Sans';\n        margin: 0;\n        font-size: 13px;\n    }\n&lt;/style&gt;\n    &lt;script src=\"https://www.unpkg.com/@mapbox/mapbox-gl-draw@1.5.0/dist/mapbox-gl-draw.js\"&gt;&lt;/script&gt;\n    &lt;link\n        rel=\"stylesheet\"\n        href=\"https://www.unpkg.com/@mapbox/mapbox-gl-draw@1.5.0/dist/mapbox-gl-draw.css\"\n    /&gt;\n    &lt;div id=\"map\"&gt;&lt;/div&gt;\n    &lt;div class=\"calculation-box\"&gt;\n        &lt;p&gt;Draw a polygon using the draw tools.&lt;/p&gt;\n        &lt;div id=\"calculated-area\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script type=\"module\"&gt;\n\n\n    import * as turf from 'https://esm.sh/@turf/turf@7.1.0';\n\n    MapboxDraw.constants.classes.CANVAS  = 'maplibregl-canvas';\n    MapboxDraw.constants.classes.CONTROL_BASE  = 'maplibregl-ctrl';\n    MapboxDraw.constants.classes.CONTROL_PREFIX = 'maplibregl-ctrl-';\n    MapboxDraw.constants.classes.CONTROL_GROUP = 'maplibregl-ctrl-group';\n    MapboxDraw.constants.classes.ATTRIBUTION = 'maplibregl-ctrl-attrib';\n\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style: 'https://tiles.openfreemap.org/styles/bright', // style URL\n        center: [-91.874, 42.76], // starting position\n        zoom: 12 // starting zoom\n    });\n\n    // https://github.com/mapbox/mapbox-gl-draw/issues/1357\n    // https://github.com/mapbox/mapbox-gl-draw/pull/1078 - reverted\n    const styles = [{'id': 'gl-draw-polygon-fill-inactive','type': 'fill','filter': ['all',['==', 'active', 'false'],['==', '$type', 'Polygon'],['!=', 'mode', 'static']],'paint': {'fill-color': '#3bb2d0','fill-outline-color': '#3bb2d0','fill-opacity': 0.1}},{'id': 'gl-draw-polygon-fill-active','type': 'fill','filter': ['all', ['==', 'active', 'true'], ['==', '$type', 'Polygon']],'paint': {'fill-color': '#fbb03b','fill-outline-color': '#fbb03b','fill-opacity': 0.1}},{'id': 'gl-draw-polygon-midpoint','type': 'circle','filter': ['all',['==', '$type', 'Point'],['==', 'meta', 'midpoint']],'paint': {'circle-radius': 3,'circle-color': '#fbb03b'}},{'id': 'gl-draw-polygon-stroke-inactive','type': 'line','filter': ['all',['==', 'active', 'false'],['==', '$type', 'Polygon'],['!=', 'mode', 'static']],'layout': {'line-cap': 'round','line-join': 'round'},'paint': {'line-color': '#3bb2d0','line-width': 2}},{'id': 'gl-draw-polygon-stroke-active','type': 'line','filter': ['all', ['==', 'active', 'true'], ['==', '$type', 'Polygon']],'layout': {'line-cap': 'round','line-join': 'round'},'paint': {'line-color': '#fbb03b','line-dasharray': [0.2, 2],'line-width': 2}},{'id': 'gl-draw-line-inactive','type': 'line','filter': ['all',['==', 'active', 'false'],['==', '$type', 'LineString'],['!=', 'mode', 'static']],'layout': {'line-cap': 'round','line-join': 'round'},'paint': {'line-color': '#3bb2d0','line-width': 2}},{'id': 'gl-draw-line-active','type': 'line','filter': ['all',['==', '$type', 'LineString'],['==', 'active', 'true']],'layout': {'line-cap': 'round','line-join': 'round'},'paint': {'line-color': '#fbb03b','line-dasharray': [0.2, 2],'line-width': 2}},{'id': 'gl-draw-polygon-and-line-vertex-stroke-inactive','type': 'circle','filter': ['all',['==', 'meta', 'vertex'],['==', '$type', 'Point'],['!=', 'mode', 'static']],'paint': {'circle-radius': 5,'circle-color': '#fff'}},{'id': 'gl-draw-polygon-and-line-vertex-inactive','type': 'circle','filter': ['all',['==', 'meta', 'vertex'],['==', '$type', 'Point'],['!=', 'mode', 'static']],'paint': {'circle-radius': 3,'circle-color': '#fbb03b'}},{'id': 'gl-draw-point-point-stroke-inactive','type': 'circle','filter': ['all',['==', 'active', 'false'],['==', '$type', 'Point'],['==', 'meta', 'feature'],['!=', 'mode', 'static']],'paint': {'circle-radius': 5,'circle-opacity': 1,'circle-color': '#fff'}},{'id': 'gl-draw-point-inactive','type': 'circle','filter': ['all',['==', 'active', 'false'],['==', '$type', 'Point'],['==', 'meta', 'feature'],['!=', 'mode', 'static']],'paint': {'circle-radius': 3,'circle-color': '#3bb2d0'}},{'id': 'gl-draw-point-stroke-active','type': 'circle','filter': ['all',['==', '$type', 'Point'],['==', 'active', 'true'],['!=', 'meta', 'midpoint']],'paint': {'circle-radius': 7,'circle-color': '#fff'}},{'id': 'gl-draw-point-active','type': 'circle','filter': ['all',['==', '$type', 'Point'],['!=', 'meta', 'midpoint'],['==', 'active', 'true']],'paint': {'circle-radius': 5,'circle-color': '#fbb03b'}},{'id': 'gl-draw-polygon-fill-static','type': 'fill','filter': ['all', ['==', 'mode', 'static'], ['==', '$type', 'Polygon']],'paint': {'fill-color': '#404040','fill-outline-color': '#404040','fill-opacity': 0.1}},{'id': 'gl-draw-polygon-stroke-static','type': 'line','filter': ['all', ['==', 'mode', 'static'], ['==', '$type', 'Polygon']],'layout': {'line-cap': 'round','line-join': 'round'},'paint': {'line-color': '#404040','line-width': 2}},{'id': 'gl-draw-line-static','type': 'line','filter': ['all', ['==', 'mode', 'static'], ['==', '$type', 'LineString']],'layout': {'line-cap': 'round','line-join': 'round'},'paint': {'line-color': '#404040','line-width': 2}},{'id': 'gl-draw-point-static','type': 'circle','filter': ['all', ['==', 'mode', 'static'], ['==', '$type', 'Point']],'paint': {'circle-radius': 5,'circle-color': '#404040'}}];\n\n    const draw = new MapboxDraw({\n        displayControlsDefault: false,\n        controls: {\n            polygon: true,\n            trash: true\n        },\n        styles\n    });\n    map.addControl(draw);\n\n    map.on('draw.create', updateArea);\n    map.on('draw.delete', updateArea);\n    map.on('draw.update', updateArea);\n\n    function updateArea(e) {\n        const data = draw.getAll();\n        const answer = document.getElementById('calculated-area');\n        if (data.features.length &gt; 0) {\n            const area = turf.area(data);\n            // restrict to area to 2 decimal points\n            const roundedArea = Math.round(area * 100) / 100;\n            answer.innerHTML =\n                `&lt;p&gt;&lt;strong&gt;${\n                    roundedArea\n                }&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;square meters&lt;/p&gt;`;\n        } else {\n            answer.innerHTML = '';\n            if (e.type !== 'draw.delete')\n                alert('Use the draw tools to draw a polygon!');\n        }\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/extrude-polygons-for-3d-indoor-mapping/","title":"Extrude polygons for 3D indoor mapping","text":"<p>Create a 3D indoor map with the fill-extrude-height paint property.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Extrude polygons for 3D indoor mapping&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Create a 3D indoor map with the fill-extrude-height paint property.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: {\n            'id': 'raster',\n            'version': 8,\n            'name': 'Raster tiles',\n            'center': [0, 0],\n            'zoom': 0,\n            'sources': {\n                'raster-tiles': {\n                    'type': 'raster',\n                    'tiles': ['https://tile.openstreetmap.org/{z}/{x}/{y}.png'],\n                    'tileSize': 256,\n                    'minzoom': 0,\n                    'maxzoom': 19\n                }\n            },\n            'layers': [\n                {\n                    'id': 'background',\n                    'type': 'background',\n                    'paint': {\n                        'background-color': '#e0dfdf'\n                    }\n                },\n                {\n                    'id': 'simple-tiles',\n                    'type': 'raster',\n                    'source': 'raster-tiles'\n                }\n            ]\n        },\n        center: [-87.61694, 41.86625],\n        zoom: 15.99,\n        pitch: 40,\n        bearing: 20,\n        canvasContextAttributes: {antialias: true}\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('floorplan', {\n            // GeoJSON Data source used in vector tiles, documented at\n            // https://gist.github.com/ryanbaumann/a7d970386ce59d11c16278b90dde094d\n            'type': 'geojson',\n            'data': 'https://maplibre.org/maplibre-gl-js/docs/assets/indoor-3d-map.geojson'\n        });\n        map.addLayer({\n            'id': 'room-extrusion',\n            'type': 'fill-extrusion',\n            'source': 'floorplan',\n            'paint': {\n                // See the MapLibre Style Specification for details on data expressions.\n                // https://maplibre.org/maplibre-style-spec/expressions/\n\n                // Get the fill-extrusion-color from the source 'color' property.\n                'fill-extrusion-color': ['get', 'color'],\n\n                // Get fill-extrusion-height from the source 'height' property.\n                'fill-extrusion-height': ['get', 'height'],\n\n                // Get fill-extrusion-base from the source 'base_height' property.\n                'fill-extrusion-base': ['get', 'base_height'],\n\n                // Make extrusions slightly opaque for see through indoor walls.\n                'fill-extrusion-opacity': 0.5\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/filter-layer-symbols-using-global-state/","title":"Filter layer symbols using global state","text":"<p>Filter a layer symbols based on user input using setGlobalStateProperty().</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang='en'&gt;\n&lt;head&gt;\n    &lt;title&gt;Filter layer symbols using global state&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Filter a layer symbols based on user input using setGlobalStateProperty().\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name='viewport' content='width=device-width, initial-scale=1'&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body {\n            margin: 0;\n            padding: 0;\n        }\n\n        html,\n        body,\n        #map {\n            height: 100%;\n        }\n\n        fieldset {\n            position: absolute;\n            top: 10px;\n            left: 10px;\n            background-color: white;\n            padding: 10px;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id='map'&gt;&lt;/div&gt;\n    &lt;fieldset&gt;\n        Filter by type\n        &lt;select name=\"type\"&gt;\n            &lt;option value=\"\" selected&gt;All&lt;/option&gt;\n            &lt;option value=\"lift\"&gt;Aerial lift&lt;/option&gt;\n            &lt;option value=\"railway\"&gt;Cable railway&lt;/option&gt;\n        &lt;/select&gt;\n    &lt;/fieldset&gt;\n&lt;/body&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [9.0679, 45.8822],\n        zoom: 9\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('railways_and_lifts', {\n            type: 'geojson',\n            data: 'https://maplibre.org/maplibre-gl-js/docs/assets/funicolares-and-funivias-como.json'\n        });\n\n        map.addLayer({\n            id: 'railways_and_lifts_labels',\n            type: 'symbol',\n            source: 'railways_and_lifts',\n            layout: {\n                'text-field': '{name}',\n                'text-font': ['Open Sans Semibold'],\n                'text-offset': [0, 1],\n                'text-anchor': 'top'\n            },\n            paint: {\n                'text-color': '#000000',\n                'text-halo-color': '#ffffff',\n                'text-halo-width': 2\n            },\n            filter: [\n                'case',\n                ['==', ['to-string', ['global-state', 'type']], ''],\n                true,\n                ['==', ['get', 'type'], ['global-state', 'type']]\n            ]\n        });\n        map.addLayer({\n            type: 'circle',\n            id: 'railways_and_lifts_points',\n            source: 'railways_and_lifts',\n            paint: {\n                'circle-radius': 5,\n                'circle-color': '#000000',\n            },\n            filter: [\n                'case',\n                ['==', ['to-string', ['global-state', 'type']], ''],\n                true,\n                ['==', ['get', 'type'], ['global-state', 'type']]\n            ]\n        });\n\n        const select = document.querySelector('select[name=\"type\"]');\n        map.setGlobalStateProperty('type', select.value);\n\n        select.addEventListener('change', (e) =&gt; {\n            const value = e.target.value;\n            map.setGlobalStateProperty('type', value);\n        });\n    });\n&lt;/script&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/filter-symbols-by-text-input/","title":"Filter symbols by text input","text":"<p>Filter symbols by icon name by typing in a text input.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Filter symbols by text input&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Filter symbols by icon name by typing in a text input.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .filter-ctrl {\n        position: absolute;\n        top: 10px;\n        right: 10px;\n        z-index: 1;\n    }\n\n    .filter-ctrl input[type='search'] {\n        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n        border: 0;\n        background-color: #fff;\n        margin: 0;\n        color: rgba(0, 0, 0, 0.5);\n        padding: 10px;\n        box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);\n        border-radius: 3px;\n        width: 180px;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div class=\"filter-ctrl\"&gt;\n    &lt;input\n        id=\"filter-input\"\n        type=\"search\"\n        name=\"filter\"\n        placeholder=\"Filter by name\"\n    /&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    const places = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'theatre'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.038659, 38.931567]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'theatre'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.003168, 38.894651]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'bar'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.090372, 38.881189]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'bicycle'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.052477, 38.943951]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.031706, 38.914581]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.020945, 38.878241]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.007481, 38.876516]\n                }\n            }\n        ]\n    };\n\n    const layerIDs = []; // Will contain a list used to filter against.\n    const filterInput = document.getElementById('filter-input');\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-77.04, 38.907],\n        zoom: 11.15\n    });\n\n    map.on('load', () =&gt; {\n        // Add a GeoJSON source containing place coordinates and information.\n        map.addSource('places', {\n            'type': 'geojson',\n            'data': places\n        });\n\n        places.features.forEach((feature) =&gt; {\n            const symbol = feature.properties['icon'];\n            const layerID = `poi-${symbol}`;\n\n            // Add a layer for this symbol type if it hasn't been added already.\n            if (!map.getLayer(layerID)) {\n                map.addLayer({\n                    'id': layerID,\n                    'type': 'symbol',\n                    'source': 'places',\n                    'layout': {\n                        'icon-image': `${symbol}_11`,\n                        'icon-overlap': 'always',\n                        'text-field': symbol,\n                        'text-font': ['Noto Sans Regular'],\n                        'text-size': 11,\n                        'text-transform': 'uppercase',\n                        'text-letter-spacing': 0.05,\n                        'text-offset': [0, 1.5]\n                    },\n                    'paint': {\n                        'text-color': '#202',\n                        'text-halo-color': '#fff',\n                        'text-halo-width': 2\n                    },\n                    'filter': ['==', ['get', 'icon'], symbol]\n                });\n\n                layerIDs.push(layerID);\n            }\n        });\n\n        filterInput.addEventListener('keyup', (e) =&gt; {\n            // If the input value matches a layerID set\n            // it's visibility to 'visible' or else hide it.\n            const value = e.target.value.trim().toLowerCase();\n            layerIDs.forEach((layerID) =&gt; {\n                map.setLayoutProperty(\n                    layerID,\n                    'visibility',\n                    layerID.indexOf(value) &gt; -1 ? 'visible' : 'none'\n                );\n            });\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/filter-symbols-by-toggling-a-list/","title":"Filter symbols by toggling a list","text":"<p>Filter a set of symbols based on a property value in the data.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Filter symbols by toggling a list&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Filter a set of symbols based on a property value in the data.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .filter-group {\n        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n        font-weight: 600;\n        position: absolute;\n        top: 10px;\n        right: 10px;\n        z-index: 1;\n        border-radius: 3px;\n        width: 120px;\n        color: #fff;\n    }\n\n    .filter-group input[type='checkbox']:first-child + label {\n        border-radius: 3px 3px 0 0;\n    }\n\n    .filter-group label:last-child {\n        border-radius: 0 0 3px 3px;\n        border: none;\n    }\n\n    .filter-group input[type='checkbox'] {\n        display: none;\n    }\n\n    .filter-group input[type='checkbox'] + label {\n        background-color: #3386c0;\n        display: block;\n        cursor: pointer;\n        padding: 10px;\n        border-bottom: 1px solid rgba(0, 0, 0, 0.25);\n    }\n\n    .filter-group input[type='checkbox'] + label {\n        background-color: #3386c0;\n        text-transform: capitalize;\n    }\n\n    .filter-group input[type='checkbox'] + label:hover,\n    .filter-group input[type='checkbox']:checked + label {\n        background-color: #4ea0da;\n    }\n\n    .filter-group input[type='checkbox']:checked + label:before {\n        content: '\u2714';\n        margin-right: 5px;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;nav id=\"filter-group\" class=\"filter-group\"&gt;&lt;/nav&gt;\n\n&lt;script&gt;\n    const places = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'theatre'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.038659, 38.931567]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'theatre'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.003168, 38.894651]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'bar'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.090372, 38.881189]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'bicycle'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.052477, 38.943951]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.031706, 38.914581]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.020945, 38.878241]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.007481, 38.876516]\n                }\n            }\n        ]\n    };\n\n    const filterGroup = document.getElementById('filter-group');\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-77.04, 38.907],\n        zoom: 11.15\n    });\n\n    map.on('load', () =&gt; {\n        // Add a GeoJSON source containing place coordinates and information.\n        map.addSource('places', {\n            'type': 'geojson',\n            'data': places\n        });\n\n        places.features.forEach((feature) =&gt; {\n            const symbol = feature.properties['icon'];\n            const layerID = `poi-${symbol}`;\n\n            // Add a layer for this symbol type if it hasn't been added already.\n            if (!map.getLayer(layerID)) {\n                map.addLayer({\n                    'id': layerID,\n                    'type': 'symbol',\n                    'source': 'places',\n                    'layout': {\n                        'icon-image': `${symbol}_11`,\n                        'icon-overlap': 'always'\n                    },\n                    'filter': ['==', 'icon', symbol]\n                });\n\n                // Add checkbox and label elements for the layer.\n                const input = document.createElement('input');\n                input.type = 'checkbox';\n                input.id = layerID;\n                input.checked = true;\n                filterGroup.appendChild(input);\n\n                const label = document.createElement('label');\n                label.setAttribute('for', layerID);\n                label.textContent = symbol;\n                filterGroup.appendChild(label);\n\n                // When the checkbox changes, update the visibility of the layer.\n                input.addEventListener('change', (e) =&gt; {\n                    map.setLayoutProperty(\n                        layerID,\n                        'visibility',\n                        e.target.checked ? 'visible' : 'none'\n                    );\n                });\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/filter-within-a-layer/","title":"Filter within a Layer","text":"<p>Filter a layer based on user input using setFilter().</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Filter within a Layer&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Filter a layer based on user input using setFilter().\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    html, body, #map {\n        height: 100%;\n    }\n\n    .map-overlay {\n        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n        position: absolute;\n        width: 31.8%;\n        top: 0;\n        left: 0;\n        padding: 10px;\n    }\n\n    .map-overlay .map-overlay-inner {\n        background-color: #fff;\n        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\n        border-radius: 3px;\n        padding: 10px;\n        margin-bottom: 10px;\n    }\n\n    .map-overlay input {\n        margin: 2px;\n    }\n\n    input[type=number] {\n        width: 25%\n    }\n\n    #filter-result {\n        font-size: 8px;\n        font-family: \"Courier New\";\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;div class=\"map-overlay top\"&gt;\n    &lt;div class=\"map-overlay-inner\"&gt;\n        &lt;nav id=\"nav-filter\"&gt;\n            &lt;fieldset&gt;\n                &lt;legend&gt;\ud83e\udee8 Earthquake &lt;code&gt;felt&lt;/code&gt;?&lt;/legend&gt;\n                &lt;div&gt;\n                    &lt;input id=\"felt\" type=\"checkbox\" /&gt;\n                    &lt;label for=\"felt\"&gt;Apply &lt;code&gt;felt&lt;/code&gt; Filter&lt;/label&gt;\n                    &lt;div&gt;\n                        &lt;div&gt;\n                            &lt;label for=\"operator-felt\"&gt;Operator:&lt;/label&gt;\n                            &lt;select name=\"operator\" id=\"operator-felt\"&gt;\n                                &lt;option value=\"&gt;\"&gt;&gt;&lt;/option&gt;\n                                &lt;option value=\"==\" selected&gt;==&lt;/option&gt;\n                                &lt;option value=\"&lt;\"&gt;&lt;&lt;/option&gt;\n                            &lt;/select&gt;\n                            &lt;br&gt;\n                            &lt;label for=\"range-felt\"&gt;Felt:&lt;/label&gt;\n                            &lt;input type=\"number\" id=\"range-felt\" name=\"range\" value=\"4\" min=\"1.0\" max=\"10000\" /&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n            &lt;/fieldset&gt;\n\n            &lt;fieldset&gt;\n                &lt;legend&gt;\ud83d\udcc8 Magnitude&lt;/legend&gt;\n                &lt;div&gt;\n                    &lt;input id=\"mag\" type=\"checkbox\" /&gt;\n                    &lt;label for=\"mag\"&gt;Apply &lt;code&gt;magnitude&lt;/code&gt; Filter&lt;/label&gt;\n                    &lt;div&gt;\n                        &lt;div&gt;\n                            &lt;label for=\"operator-mag\"&gt;Operator:&lt;/label&gt;\n                            &lt;select name=\"operator\" id=\"operator-mag\"&gt;\n                                &lt;option value=\"&gt;\"&gt;&gt;&lt;/option&gt;\n                                &lt;option value=\"==\" selected&gt;==&lt;/option&gt;\n                                &lt;option value=\"&lt;\"&gt;&lt;&lt;/option&gt;\n                            &lt;/select&gt;\n                            &lt;br&gt;\n                            &lt;label for=\"range-mag\"&gt;Magnitude:&lt;/label&gt;\n                            &lt;input type=\"number\" id=\"range-mag\" name=\"range\" value=\"2.71\" min=\"0.0\" max=\"100\" /&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n            &lt;/fieldset&gt;\n\n            &lt;fieldset&gt;\n                &lt;legend&gt;\ud83c\udf0a Tsunami (0 or 1)&lt;/legend&gt;\n                &lt;input id=\"tsunami\" type=\"checkbox\" /&gt;\n                &lt;label for=\"tsunami\"&gt;Apply &lt;code&gt;tsunami&lt;/code&gt; filter&lt;/label&gt;\n                &lt;div id=\"radio-tsunamis\"&gt;\n                    &lt;input type=\"radio\" id=\"t0\" name=\"tsunami\" value=\"0\" /&gt;&lt;label for=\"t0\"&gt;0&lt;/label&gt;\n                    &lt;input type=\"radio\" id=\"t1\" name=\"tsunami\" value=\"1\" /&gt;&lt;label for=\"t1\"&gt;1&lt;/label&gt;\n                &lt;/div&gt;\n            &lt;/fieldset&gt;\n        &lt;/nav&gt;\n        &lt;hr /&gt;\n        &lt;div id='filter-result'&gt;[\"all\"]&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    const data = {};\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [-117, 32],\n        zoom: 0,\n    });\n\n    map.on('load', () =&gt; {\n        // add a clustered GeoJSON source for a sample set of earthquakes\n        map.addSource('earthquakes', {\n            'type': 'geojson',\n            'data':\n                'https://maplibre.org/maplibre-gl-js/docs/assets/earthquakes.geojson'\n        });\n        // Basic circle and symbol layers earthquakes\n        map.addLayer({\n            'id': 'earthquakes',\n            'type': 'circle',\n            'source': 'earthquakes',\n            'paint': {\n                'circle-color': '#ff0000'\n            }\n        });\n    });\n\n    document.getElementById('nav-filter').addEventListener('change', (e) =&gt; {\n        let filterOnValue = ['all'];\n        let operator = '==';\n\n        switch (e.target.id) {\n            /// example: `map.setFilter(\"earthquakes\", [\"any\", [\"&gt;\", \"felt\", 16.0]])`\n            case 'felt':\n                operatorFelt = document.getElementById('operator-felt');\n                felt = document.getElementById('range-felt');\n                operator = operatorFelt.value;\n\n                e.target.checked ? data.felt = Number(felt.value) : delete data['felt'];\n\n                break;\n\n            /// example: `map.setFilter(\"earthquakes\", [\"any\", [\"&gt;\", \"mag\", 5.0]])`\n            case 'mag':\n                operatorMag = document.getElementById('operator-mag');\n                mag = document.getElementById('range-mag');\n                operator = operatorMag.value;\n\n                e.target.checked ? data.mag = Number(mag.value) : delete data['mag'];\n\n                break;\n\n            /// example: `map.setFilter(\"earthquakes\", [\"any\", [\"&gt;\", \"tsunami\", 0]])`\n            case 'tsunami':\n                tsunami = document.querySelector('input[type=\"radio\"][name=tsunami]:checked');\n                operator = '==';\n\n                e.target.checked ? data.tsunami = Number(tsunami.value) : delete data['tsunami'];\n\n                break;\n            default:\n                console.log('default');\n        }\n\n        filterOnValue = Object.keys(data);\n\n        mapLibreFilterSpread = ['all', ...filterOnValue.map(id =&gt; [operator, id, data[id]])];\n        mapLibreFilter = mapLibreFilterSpread;\n\n        document.getElementById('filter-result').textContent = JSON.stringify(mapLibreFilter);\n\n        map.setFilter('earthquakes', mapLibreFilter);\n    });\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/fit-a-map-to-a-bounding-box/","title":"Fit a map to a bounding box","text":"<p>Fit the map to a specific area, regardless of the pixel size of the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Fit a map to a bounding box&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Fit the map to a specific area, regardless of the pixel size of the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #fit {\n        display: block;\n        position: absolute;\n        top: 20px;\n        left: 50%;\n        transform: translate(-50%);\n        width: 50%;\n        height: 40px;\n        padding: 10px;\n        border: none;\n        border-radius: 3px;\n        font-size: 12px;\n        text-align: center;\n        color: #fff;\n        background: #ee8a65;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;br /&gt;\n&lt;button id=\"fit\"&gt;Fit to Kenya&lt;/button&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-74.5, 40],\n        zoom: 9\n    });\n\n    document.getElementById('fit').addEventListener('click', () =&gt; {\n        map.fitBounds([\n            [32.958984, -5.353521],\n            [43.50585, 5.615985]\n        ]);\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/fit-to-the-bounds-of-a-linestring/","title":"Fit to the bounds of a LineString","text":"<p>Get the bounds of a LineString.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Fit to the bounds of a LineString&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Get the bounds of a LineString.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .btn-control {\n        font: bold 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n        background-color: #3386c0;\n        color: #fff;\n        position: absolute;\n        top: 20px;\n        left: 50%;\n        z-index: 1;\n        border: none;\n        width: 200px;\n        margin-left: -100px;\n        display: block;\n        cursor: pointer;\n        padding: 10px 20px;\n        border-radius: 3px;\n    }\n\n    .btn-control:hover {\n        background-color: #4ea0da;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;button id=\"zoomto\" class=\"btn-control\"&gt;Zoom to bounds&lt;/button&gt;\n\n&lt;script&gt;\n    // A GeoJSON object with a LineString route from the White House to Capitol Hill\n    const geojson = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'geometry': {\n                    'type': 'LineString',\n                    'properties': {},\n                    'coordinates': [\n                        [-77.0366048812866, 38.89873175227713],\n                        [-77.03364372253417, 38.89876515143842],\n                        [-77.03364372253417, 38.89549195896866],\n                        [-77.02982425689697, 38.89549195896866],\n                        [-77.02400922775269, 38.89387200688839],\n                        [-77.01519012451172, 38.891416957534204],\n                        [-77.01521158218382, 38.892068305429156],\n                        [-77.00813055038452, 38.892051604275686],\n                        [-77.00832366943358, 38.89143365883688],\n                        [-77.00818419456482, 38.89082405874451],\n                        [-77.00815200805664, 38.88989712255097]\n                    ]\n                }\n            }\n        ]\n    };\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-77.0214, 38.897],\n        zoom: 12\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('LineString', {\n            'type': 'geojson',\n            'data': geojson\n        });\n        map.addLayer({\n            'id': 'LineString',\n            'type': 'line',\n            'source': 'LineString',\n            'layout': {\n                'line-join': 'round',\n                'line-cap': 'round'\n            },\n            'paint': {\n                'line-color': '#BF93E4',\n                'line-width': 5\n            }\n        });\n\n        document\n            .getElementById('zoomto')\n            .addEventListener('click', () =&gt; {\n                // Geographic coordinates of the LineString\n                const coordinates = geojson.features[0].geometry.coordinates;\n\n                // Pass the first coordinates in the LineString to `lngLatBounds` &amp;\n                // wrap each coordinate pair in `extend` to include them in the bounds\n                // result. A variation of this technique could be applied to zooming\n                // to the bounds of multiple Points or Polygon geometries - it just\n                // requires wrapping all the coordinates with the extend method.\n                const bounds = coordinates.reduce((bounds, coord) =&gt; {\n                    return bounds.extend(coord);\n                }, new maplibregl.LngLatBounds(coordinates[0], coordinates[0]));\n\n                map.fitBounds(bounds, {\n                    padding: 20\n                });\n            });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/fly-to-a-location-based-on-scroll-position/","title":"Fly to a location based on scroll position","text":"<p>Scroll down through the story and the map will fly to the chapter's location.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Fly to a location based on scroll position&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Scroll down through the story and the map will fly to the chapter's location.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #map {\n        position: fixed;\n        width: 50%;\n    }\n    #features {\n        width: 50%;\n        margin-left: 50%;\n        font-family: sans-serif;\n        overflow-y: scroll;\n        background-color: #fafafa;\n    }\n    section {\n        padding: 25px 50px;\n        line-height: 25px;\n        border-bottom: 1px solid #ddd;\n        opacity: 0.25;\n        font-size: 13px;\n    }\n    section.active {\n        opacity: 1;\n    }\n    section:last-child {\n        border-bottom: none;\n        margin-bottom: 200px;\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div id=\"features\"&gt;\n    &lt;section id=\"baker\" class=\"active\"&gt;\n        &lt;h3&gt;221b Baker St.&lt;/h3&gt;\n        &lt;p&gt;\n            November 1895. London is shrouded in fog and Sherlock Holmes and\n            Watson pass time restlessly awaiting a new case. \"The London\n            criminal is certainly a dull fellow,\" Sherlock bemoans. \"There have\n            been numerous petty thefts,\" Watson offers in response. Just then a\n            telegram arrives from Sherlock's brother Mycroft with a mysterious\n            case.\n        &lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section id=\"aldgate\"&gt;\n        &lt;h3&gt;Aldgate Station&lt;/h3&gt;\n        &lt;p&gt;\n            Arthur Cadogan West was found dead, head crushed in on train tracks\n            at Aldgate Station at 6AM Tuesday morning. West worked at Woolwich\n            Arsenal on the Bruce-Partington submarine, a secret military\n            project. Plans for the submarine had been stolen and seven of the\n            ten missing papers were found in West's possession. Mycroft implores\n            Sherlock to take the case and recover the three missing papers.\n        &lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section id=\"london-bridge\"&gt;\n        &lt;h3&gt;London Bridge&lt;/h3&gt;\n        &lt;p&gt;\n            Holmes and Watson's investigations take them across London. Sherlock\n            deduces that West was murdered elsewhere, then moved to Aldgate\n            Station to create the illusion that he was crushed on the tracks by\n            a train. On their way to Woolwich Sherlock dispatches a telegram to\n            Mycroft at London Bridge: \"Send list of all foreign spies known to\n            be in England, with full address.\"\n        &lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section id=\"woolwich\"&gt;\n        &lt;h3&gt;Woolwich Arsenal&lt;/h3&gt;\n        &lt;p&gt;\n            While investigating at Woolwich Arsenal Sherlock learns that West\n            did not have the three keys&amp;mdash;door, office, and\n            safe&amp;mdash;necessary to steal the papers. The train station clerk\n            mentions seeing an agitated West boarding the 8:15 train to London\n            Bridge. Sherlock suspects West of following someone who had access\n            to the Woolwich chief's keyring with all three keys.\n        &lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section id=\"gloucester\"&gt;\n        &lt;h3&gt;Gloucester Road&lt;/h3&gt;\n        &lt;p&gt;\n            Mycroft responds to Sherlock's telegram and mentions several spies.\n            Hugo Oberstein of 13 Caulfield Gardens catches Sherlock's eye. He\n            heads to the nearby Gloucester Road station to investigate and\n            learns that the windows of Caulfield Gardens open over rail tracks\n            where trains stop frequently.\n        &lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section id=\"caulfield-gardens\"&gt;\n        &lt;h3&gt;13 Caulfield Gardens&lt;/h3&gt;\n        &lt;p&gt;\n            Holmes deduces that the murderer placed West atop a stopped train at\n            Caulfield Gardens. The train traveled to Aldgate Station before\n            West's body finally toppled off. Backtracking to the criminal's\n            apartment, Holmes finds a series of classified ads from\n            &lt;em&gt;The Daily Telegraph&lt;/em&gt; stashed away. All are under the name\n            Pierrot: \"Monday night after nine. Two taps. Only ourselves. Do not\n            be so suspicious. Payment in hard cash when goods delivered.\"\n        &lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section id=\"telegraph\"&gt;\n        &lt;h3&gt;The Daily Telegraph&lt;/h3&gt;\n        &lt;p&gt;\n            Holmes and Watson head to The Daily Telegraph and place an ad to\n            draw out the criminal. It reads: \"To-night. Same hour. Same place.\n            Two taps. Most vitally important. Your own safety at stake.\n            Pierrot.\" The trap works and Holmes catches the criminal: Colonel\n            Valentine Walter, the brother of Woolwich Arsenal's chief. He\n            confesses to working for Hugo Oberstein to obtain the submarine\n            plans in order to pay off his debts.\n        &lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section id=\"charing-cross\"&gt;\n        &lt;h3&gt;Charing Cross Hotel&lt;/h3&gt;\n        &lt;p&gt;\n            Walter writes to Oberstein and convinces him to meet in the smoking\n            room of the Charing Cross Hotel where he promises additional plans\n            for the submarine in exchange for money. The plan works and Holmes\n            and Watson catch both criminals.\n        &lt;/p&gt;\n        &lt;small id=\"citation\"&gt;\n            Adapted from\n            &lt;a href=\"https://www.gutenberg.org/files/2346/2346-h/2346-h.htm\"\n                &gt;Project Gutenberg&lt;/a\n            &gt;\n        &lt;/small&gt;\n    &lt;/section&gt;\n&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-0.15591514, 51.51830379],\n        zoom: 15.5,\n        bearing: 27,\n        pitch: 45\n    });\n\n    const chapters = {\n        'baker': {\n            bearing: 27,\n            center: [-0.15591514, 51.51830379],\n            zoom: 15.5,\n            pitch: 20\n        },\n        'aldgate': {\n            duration: 6000,\n            center: [-0.07571203, 51.51424049],\n            bearing: 150,\n            zoom: 15,\n            pitch: 0\n        },\n        'london-bridge': {\n            bearing: 90,\n            center: [-0.08533793, 51.50438536],\n            zoom: 13,\n            speed: 0.6,\n            pitch: 40\n        },\n        'woolwich': {\n            bearing: 90,\n            center: [0.05991101, 51.48752939],\n            zoom: 12.3\n        },\n        'gloucester': {\n            bearing: 45,\n            center: [-0.18335806, 51.49439521],\n            zoom: 15.3,\n            pitch: 20,\n            speed: 0.5\n        },\n        'caulfield-gardens': {\n            bearing: 180,\n            center: [-0.19684993, 51.5033856],\n            zoom: 12.3\n        },\n        'telegraph': {\n            bearing: 90,\n            center: [-0.10669358, 51.51433123],\n            zoom: 17.3,\n            pitch: 40\n        },\n        'charing-cross': {\n            bearing: 90,\n            center: [-0.12416858, 51.50779757],\n            zoom: 14.3,\n            pitch: 20\n        }\n    };\n\n    // On every scroll event, check which element is on screen\n    window.onscroll = function () {\n        const chapterNames = Object.keys(chapters);\n        for (let i = 0; i &lt; chapterNames.length; i++) {\n            const chapterName = chapterNames[i];\n            if (isElementOnScreen(chapterName)) {\n                setActiveChapter(chapterName);\n                break;\n            }\n        }\n    };\n\n    let activeChapterName = 'baker';\n    function setActiveChapter(chapterName) {\n        if (chapterName === activeChapterName) return;\n\n        map.flyTo(chapters[chapterName]);\n\n        document.getElementById(chapterName).setAttribute('class', 'active');\n        document.getElementById(activeChapterName).setAttribute('class', '');\n\n        activeChapterName = chapterName;\n    }\n\n    function isElementOnScreen(id) {\n        const element = document.getElementById(id);\n        const bounds = element.getBoundingClientRect();\n        return bounds.top &lt; window.innerHeight &amp;&amp; bounds.bottom &gt; 0;\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/fly-to-a-location/","title":"Fly to a location","text":"<p>Use flyTo to smoothly interpolate between locations.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Fly to a location&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use flyTo to smoothly interpolate between locations.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #fly {\n        display: block;\n        position: absolute;\n        top: 20px;\n        left: 50%;\n        transform: translate(-50%);\n        width: 50%;\n        height: 40px;\n        padding: 10px;\n        border: none;\n        border-radius: 3px;\n        font-size: 12px;\n        text-align: center;\n        color: #fff;\n        background: #ee8a65;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;br /&gt;\n&lt;button id=\"fly\"&gt;Fly&lt;/button&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-74.5, 40],\n        zoom: 9\n    });\n\n    document.getElementById('fly').addEventListener('click', () =&gt; {\n        // Fly to a random location by offsetting the point -74.50, 40\n        // by up to 5 degrees.\n        map.flyTo({\n            center: [\n                -74.5 + (Math.random() - 0.5) * 10,\n                40 + (Math.random() - 0.5) * 10\n            ],\n            essential: true // this animation is considered essential with respect to prefers-reduced-motion\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/generate-and-add-a-missing-icon-to-the-map/","title":"Generate and add a missing icon to the map","text":"<p>Dynamically generate a missing icon at runtime and add it to the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Generate and add a missing icon to the map&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Dynamically generate a missing icon at runtime and add it to the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n    });\n\n    map.on('styleimagemissing', (e) =&gt; {\n        const id = e.id; // id of the missing image\n\n        // check if this missing icon is one this function can generate\n        const prefix = 'square-rgb-';\n        if (id.indexOf(prefix) !== 0) return;\n\n        // extract the color from the id\n        const rgb = id.replace(prefix, '').split(',').map(Number);\n\n        const width = 64; // The image will be 64 pixels square\n        const bytesPerPixel = 4; // Each pixel is represented by 4 bytes: red, green, blue, and alpha.\n        const data = new Uint8Array(width * width * bytesPerPixel);\n\n        for (let x = 0; x &lt; width; x++) {\n            for (let y = 0; y &lt; width; y++) {\n                const offset = (y * width + x) * bytesPerPixel;\n                data[offset + 0] = rgb[0]; // red\n                data[offset + 1] = rgb[1]; // green\n                data[offset + 2] = rgb[2]; // blue\n                data[offset + 3] = 255; // alpha\n            }\n        }\n\n        map.addImage(id, {width, height: width, data});\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('points', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [0, 0]\n                        },\n                        'properties': {\n                            'color': '255,0,0'\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [50, 0]\n                        },\n                        'properties': {\n                            'color': '255,209,28'\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-50, 0]\n                        },\n                        'properties': {\n                            'color': '242,127,32'\n                        }\n                    }\n                ]\n            }\n        });\n\n        map.addLayer({\n            'id': 'points',\n            'type': 'symbol',\n            'source': 'points',\n            'layout': {\n                'icon-image': ['concat', 'square-rgb-', ['get', 'color']]\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/geocode-with-nominatim/","title":"Geocode with Nominatim","text":"<p>Geocode with Nominatim and the maplibre-gl-geocoder plugin.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Geocode with Nominatim&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Geocode with Nominatim and the maplibre-gl-geocoder plugin.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;!-- Load the `maplibre-gl-geocoder` plugin. --&gt;\n&lt;script src=\"https://unpkg.com/@maplibre/maplibre-gl-geocoder@1.5.0/dist/maplibre-gl-geocoder.min.js\"&gt;&lt;/script&gt;\n&lt;link\n    rel=\"stylesheet\"\n    href=\"https://unpkg.com/@maplibre/maplibre-gl-geocoder@1.5.0/dist/maplibre-gl-geocoder.css\"\n/&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        // Use a minimalist raster style\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-87.61694, 41.86625],\n        zoom: 15.99,\n        pitch: 40,\n        bearing: 20,\n        canvasContextAttributes: {antialias: true}\n    });\n\n    const geocoderApi = {\n        forwardGeocode: async (config) =&gt; {\n            const features = [];\n            try {\n                const request =\n            `https://nominatim.openstreetmap.org/search?q=${\n                config.query\n            }&amp;format=geojson&amp;polygon_geojson=1&amp;addressdetails=1`;\n                const response = await fetch(request);\n                const geojson = await response.json();\n                for (const feature of geojson.features) {\n                    const center = [\n                        feature.bbox[0] +\n                    (feature.bbox[2] - feature.bbox[0]) / 2,\n                        feature.bbox[1] +\n                    (feature.bbox[3] - feature.bbox[1]) / 2\n                    ];\n                    const point = {\n                        type: 'Feature',\n                        geometry: {\n                            type: 'Point',\n                            coordinates: center\n                        },\n                        place_name: feature.properties.display_name,\n                        properties: feature.properties,\n                        text: feature.properties.display_name,\n                        place_type: ['place'],\n                        center\n                    };\n                    features.push(point);\n                }\n            } catch (e) {\n                console.error(`Failed to forwardGeocode with error: ${e}`);\n            }\n\n            return {\n                features\n            };\n        }\n    };\n    map.addControl(\n        new MaplibreGeocoder(geocoderApi, {\n            maplibregl\n        })\n    );\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/get-coordinates-of-the-mouse-pointer/","title":"Get coordinates of the mouse pointer","text":"<p>Show mouse position on hover with pixel and latitude and longitude coordinates.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Get coordinates of the mouse pointer&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Show mouse position on hover with pixel and latitude and longitude coordinates.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #info {\n        display: block;\n        position: absolute;\n        top: 20px;\n        left: 50%;\n        transform: translate(-50%);\n        width: 50%;\n        padding: 10px;\n        border: none;\n        border-radius: 3px;\n        font-size: 12px;\n        text-align: center;\n        color: #222;\n        background: #fff;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;pre id=\"info\"&gt;&lt;/pre&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [-74.5, 40], // starting position\n        zoom: 3 // starting zoom\n    });\n\n    map.on('mousemove', (e) =&gt; {\n        document.getElementById('info').innerHTML =\n            // e.point is the x, y coordinates of the mousemove event relative\n            // to the top-left corner of the map\n            `${JSON.stringify(e.point)\n            }&lt;br /&gt;${\n                // e.lngLat is the longitude, latitude geographical position of the event\n                JSON.stringify(e.lngLat.wrap())}`;\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/get-features-under-the-mouse-pointer/","title":"Get features under the mouse pointer","text":"<p>Use queryRenderedFeatures to show properties of hovered-over map elements.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Get features under the mouse pointer&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use queryRenderedFeatures to show properties of hovered-over map elements.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #features {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        width: 50%;\n        overflow: auto;\n        background: rgba(255, 255, 255, 0.8);\n    }\n    #map canvas {\n        cursor: crosshair;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;pre id=\"features\"&gt;&lt;/pre&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-96, 37.8],\n        zoom: 3\n    });\n\n    map.on('mousemove', (e) =&gt; {\n        const features = map.queryRenderedFeatures(e.point);\n\n        // Limit the number of properties we're displaying for\n        // legibility and performance\n        const displayProperties = [\n            'type',\n            'properties',\n            'id',\n            'layer',\n            'source',\n            'sourceLayer',\n            'state'\n        ];\n\n        const displayFeatures = features.map((feat) =&gt; {\n            const displayFeat = {};\n            displayProperties.forEach((prop) =&gt; {\n                displayFeat[prop] = feat[prop];\n            });\n            return displayFeat;\n        });\n\n        document.getElementById('features').innerHTML = JSON.stringify(\n            displayFeatures,\n            null,\n            2\n        );\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/hash-routing/","title":"Hash routing","text":"<p>Keep the viewport state in the url with hash routing.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Hash routing&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Keep the viewport state in the url with hash routing.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n        #urlHash {\n            position: fixed;\n            left: 0;\n            top: 0;\n            height: 30px;\n            background-color: white;\n            display: flex;\n            align-items: center;\n            border-radius: 10px;\n            padding: 0 10px;\n            margin: 10px;\n            border: 1px solid #888;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;span id=\"urlHash\"&gt;&lt;/span&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        hash: true, // &lt;- Enable hash routing\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [0, 0],\n        zoom: 1,\n        maplibreLogo: true\n    });\n\n    // Set an interval to update the url hash in a map overlay\n    const urlHash = document.getElementById('urlHash');\n    setInterval(() =&gt; {\n        urlHash.textContent = `URL hash: ${window.location.hash}`;\n    }, 100);\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/jump-to-a-series-of-locations/","title":"Jump to a series of locations","text":"<p>Use the jumpTo function to showcase multiple locations.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Jump to a series of locations&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use the jumpTo function to showcase multiple locations.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const cities = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [100.507, 13.745]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [98.993, 18.793]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [99.838, 19.924]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [102.812, 17.408]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [100.458, 7.001]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [100.905, 12.935]\n                }\n            }\n        ]\n    };\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [100.507, 13.745],\n        zoom: 9\n    });\n\n    map.on('load', () =&gt; {\n        cities.features.forEach((city, index) =&gt; {\n            setTimeout(() =&gt; {\n                map.jumpTo({center: city.geometry.coordinates});\n            }, 2000 * index);\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/level-of-detail-control/","title":"Level of Detail Control","text":"<p>Modify how Level of Detail behaves at high pitch angles.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Level of Detail Control&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Modify how Level of Detail behaves at high pitch angles.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n        .listing-group {\n            font-family: 'Helvetica Neue', Arial, Helvetica, sans-serif;\n            position: absolute;\n            bottom: 10px;\n            left: 10px;\n            color: #fff;\n            background-color: gray;\n            padding: 10px;\n            border-radius: 4px;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;table id=\"listing-group\" class=\"listing-group\"&gt;\n    &lt;tr&gt;&lt;td&gt;&lt;label for=\"max-zoom-levels-slider\"&gt;Max Zoom Levels On Screen&lt;/label&gt;&lt;/td&gt;&lt;td&gt;&lt;input type=\"range\" id=\"max-zoom-levels-slider\" min=\"1\" max=\"11\" step=\"1.0\" value=\"9.0\" /&gt;&lt;/td&gt;&lt;td&gt;&lt;span id=\"max-zoom-levels-value\"&gt;9.0&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;&lt;label for=\"tile-count-ratio-slider\"&gt;Tile Count Max/Min Ratio&lt;/label&gt;&lt;/td&gt;&lt;td&gt;&lt;input type=\"range\" id=\"tile-count-ratio-slider\" min=\"1\" max=\"10\" step=\"0.1\" value=\"3.0\" /&gt;&lt;/td&gt;&lt;td&gt;&lt;span id=\"tile-count-ratio-value\"&gt;3.0&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n&lt;script&gt;\n    function setLodParamsFromUi() {\n        map.setSourceTileLodParams(document.getElementById('max-zoom-levels-slider').value, document.getElementById('tile-count-ratio-slider').value);\n        document.getElementById('max-zoom-levels-value').textContent = document.getElementById('max-zoom-levels-slider').value;\n        document.getElementById('tile-count-ratio-value').textContent = document.getElementById('tile-count-ratio-slider').value;\n    }\n    const map = (window.map = new maplibregl.Map({\n        container: 'map',\n        zoom: 12,\n        center: [0,0],\n        pitch: 77,\n        hash: true,\n        style: {\n            version: 8,\n            sources: {\n                numbers: {\n                    type: 'raster',\n                    url: 'https://demotiles.maplibre.org/debug-tiles/number/tiles.json',\n                    tileSize: 256,\n                    maxzoom: 19\n                }\n            },\n            layers: [\n                {\n                    id: 'numbers',\n                    type: 'raster',\n                    source: 'numbers'\n                }\n            ]\n        },\n        maxZoom: 22,\n        maxPitch: 85\n    }));\n    map.on('load', () =&gt; {\n        document.getElementById('max-zoom-levels-slider').addEventListener('change', setLodParamsFromUi);\n        document.getElementById('tile-count-ratio-slider').addEventListener('change', setLodParamsFromUi);\n        setLodParamsFromUi();\n    });\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/locale-switching/","title":"Locale switching","text":"<p>Show how localization can be applied manually to UI elements. Hover over a control to see the translated tooltip.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Locale switching&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Show how localization can be applied manually to UI elements. Hover over a control to see the translated tooltip.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    /* cSpell:disable */\n    const spanishLocale = {\n        'AttributionControl.ToggleAttribution': 'Alternar atribuci\u00f3n',\n        'AttributionControl.MapFeedback': 'Comentarios del mapa',\n        'FullscreenControl.Enter': 'Entrar en pantalla completa',\n        'FullscreenControl.Exit': 'Salir de pantalla completa',\n    };\n    /* cSpell:enable */\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [-74.5, 40],\n        zoom: 4,\n        locale: spanishLocale,\n    });\n\n    const fullscreenControl = new maplibregl.FullscreenControl();\n    map.addControl(fullscreenControl, 'top-left');\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/locate-the-user/","title":"Locate the user","text":"<p>Geolocate the user and then track their current location on the map using the GeolocateControl.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Locate the user&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Geolocate the user and then track their current location on the map using the GeolocateControl.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-96, 37.8], // starting position\n        zoom: 3 // starting zoom\n    });\n\n    // Add geolocate control to the map.\n    map.addControl(\n        new maplibregl.GeolocateControl({\n            positionOptions: {\n                enableHighAccuracy: true\n            },\n            trackUserLocation: true\n        })\n    );\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/measure-distances/","title":"Measure distances","text":"<p>Click points on a map to create lines that measure distanced using turf.length.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Measure distances&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Click points on a map to create lines that measure distanced using turf.length.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .distance-container {\n        position: absolute;\n        top: 10px;\n        left: 10px;\n        z-index: 1;\n    }\n\n    .distance-container &gt; * {\n        background-color: rgba(0, 0, 0, 0.5);\n        color: #fff;\n        font-size: 11px;\n        line-height: 18px;\n        display: block;\n        margin: 0;\n        padding: 5px 10px;\n        border-radius: 3px;\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div id=\"distance\" class=\"distance-container\"&gt;&lt;/div&gt;\n\n&lt;script src=\"https://cdn.jsdelivr.net/npm/@turf/turf@7/turf.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [2.3399, 48.8555],\n        zoom: 12\n    });\n\n    const distanceContainer = document.getElementById('distance');\n\n    // GeoJSON object to hold our measurement features\n    const geojson = {\n        'type': 'FeatureCollection',\n        'features': []\n    };\n\n    // Used to draw a line between points\n    const linestring = {\n        'type': 'Feature',\n        'geometry': {\n            'type': 'LineString',\n            'coordinates': []\n        }\n    };\n\n    map.on('load', () =&gt; {\n        map.addSource('geojson', {\n            'type': 'geojson',\n            'data': geojson\n        });\n\n        // Add styles to the map\n        map.addLayer({\n            id: 'measure-points',\n            type: 'circle',\n            source: 'geojson',\n            paint: {\n                'circle-radius': 5,\n                'circle-color': '#000'\n            },\n            filter: ['in', '$type', 'Point']\n        });\n        map.addLayer({\n            id: 'measure-lines',\n            type: 'line',\n            source: 'geojson',\n            layout: {\n                'line-cap': 'round',\n                'line-join': 'round'\n            },\n            paint: {\n                'line-color': '#000',\n                'line-width': 2.5\n            },\n            filter: ['in', '$type', 'LineString']\n        });\n\n        map.on('click', (e) =&gt; {\n            const features = map.queryRenderedFeatures(e.point, {\n                layers: ['measure-points']\n            });\n\n            // Remove the linestring from the group\n            // So we can redraw it based on the points collection\n            if (geojson.features.length &gt; 1) geojson.features.pop();\n\n            // Clear the Distance container to populate it with a new value\n            distanceContainer.innerHTML = '';\n\n            // If a feature was clicked, remove it from the map\n            if (features.length) {\n                const id = features[0].properties.id;\n                geojson.features = geojson.features.filter((point) =&gt; {\n                    return point.properties.id !== id;\n                });\n            } else {\n                const point = {\n                    'type': 'Feature',\n                    'geometry': {\n                        'type': 'Point',\n                        'coordinates': [e.lngLat.lng, e.lngLat.lat]\n                    },\n                    'properties': {\n                        'id': String(new Date().getTime())\n                    }\n                };\n\n                geojson.features.push(point);\n            }\n\n            if (geojson.features.length &gt; 1) {\n                linestring.geometry.coordinates = geojson.features.map(\n                    (point) =&gt; {\n                        return point.geometry.coordinates;\n                    }\n                );\n\n                geojson.features.push(linestring);\n\n                // Populate the distanceContainer with total distance\n                const value = document.createElement('pre');\n                value.textContent =\n                    `Total distance: ${\n                        turf.length(linestring).toLocaleString()\n                    }km`;\n                distanceContainer.appendChild(value);\n            }\n\n            map.getSource('geojson').setData(geojson);\n        });\n    });\n\n    map.on('mousemove', (e) =&gt; {\n        const features = map.queryRenderedFeatures(e.point, {\n            layers: ['measure-points']\n        });\n        // UI indicator for clicking/hovering a point on the map\n        map.getCanvas().style.cursor = features.length ?\n            'pointer' :\n            'crosshair';\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/navigate-the-map-with-game-like-controls/","title":"Navigate the map with game-like controls","text":"<p>Use the keyboard's arrow keys to move around the map with game-like controls.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Navigate the map with game-like controls&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use the keyboard's arrow keys to move around the map with game-like controls.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/liberty',\n        center: [-87.6298, 41.8781],\n        zoom: 19,\n        bearing: -12,\n        pitch: 60,\n        interactive: false\n    });\n\n    // pixels the map pans when the up or down arrow is clicked\n    const deltaDistance = 100;\n\n    // degrees the map rotates when the left or right arrow is clicked\n    const deltaDegrees = 25;\n\n    function easing(t) {\n        return t * (2 - t);\n    }\n\n    map.on('load', () =&gt; {\n        map.getCanvas().focus();\n\n        map.getCanvas().addEventListener(\n            'keydown',\n            (e) =&gt; {\n                e.preventDefault();\n                if (e.which === 38) {\n                    // up\n                    map.panBy([0, -deltaDistance], {\n                        easing\n                    });\n                } else if (e.which === 40) {\n                    // down\n                    map.panBy([0, deltaDistance], {\n                        easing\n                    });\n                } else if (e.which === 37) {\n                    // left\n                    map.easeTo({\n                        bearing: map.getBearing() - deltaDegrees,\n                        easing\n                    });\n                } else if (e.which === 39) {\n                    // right\n                    map.easeTo({\n                        bearing: map.getBearing() + deltaDegrees,\n                        easing\n                    });\n                }\n            },\n            true\n        );\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/offset-the-vanishing-point-using-padding/","title":"Offset the vanishing point using padding","text":"<p>Offset the center or vanishing point of the map to reduce distortion when floating elements are displayed over the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Offset the vanishing point using padding&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Offset the center or vanishing point of the map to reduce distortion when floating elements are displayed over the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .rounded-rect {\n        background: white;\n        border-radius: 10px;\n        box-shadow: 0 0 50px -25px black;\n    }\n\n    .flex-center {\n        position: absolute;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n\n    .flex-center.left {\n        left: 0px;\n    }\n\n    .flex-center.right {\n        right: 0px;\n    }\n\n    .sidebar-content {\n        position: absolute;\n        width: 95%;\n        height: 95%;\n        font-family: Arial, Helvetica, sans-serif;\n        font-size: 32px;\n        color: gray;\n    }\n\n    .sidebar-toggle {\n        position: absolute;\n        width: 1.3em;\n        height: 1.3em;\n        overflow: visible;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n\n    .sidebar-toggle.left {\n        right: -1.5em;\n    }\n\n    .sidebar-toggle.right {\n        left: -1.5em;\n    }\n\n    .sidebar-toggle:hover {\n        color: #0aa1cf;\n        cursor: pointer;\n    }\n\n    .sidebar {\n        transition: transform 1s;\n        z-index: 1;\n        width: 300px;\n        height: 100%;\n    }\n\n    /*\n  The sidebar styling has them \"expanded\" by default, we use CSS transforms to push them offscreen\n  The toggleSidebar() function removes this class from the element in order to expand it.\n*/\n    .left.collapsed {\n        transform: translateX(-295px);\n    }\n\n    .right.collapsed {\n        transform: translateX(295px);\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;\n    &lt;div id=\"left\" class=\"sidebar flex-center left collapsed\"&gt;\n        &lt;div class=\"sidebar-content rounded-rect flex-center\"&gt;\n            Left Sidebar\n            &lt;div\n                class=\"sidebar-toggle rounded-rect left\"\n                onclick=\"toggleSidebar('left')\"\n            &gt;\n                &amp;rarr;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=\"right\" class=\"sidebar flex-center right collapsed\"&gt;\n        &lt;div class=\"sidebar-content rounded-rect flex-center\"&gt;\n            Right Sidebar\n            &lt;div\n                class=\"sidebar-toggle rounded-rect right\"\n                onclick=\"toggleSidebar('right')\"\n            &gt;\n                &amp;larr;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    const center = [-77.01866, 38.888];\n    const map = new maplibregl.Map({\n        container: 'map',\n        zoom: 4,\n        center,\n        pitch: 60,\n        style: 'https://demotiles.maplibre.org/style.json'\n    });\n\n    new maplibregl.Marker().setLngLat(center).addTo(map);\n\n    function toggleSidebar(id) {\n        const elem = document.getElementById(id);\n        const classes = elem.className.split(' ');\n        const collapsed = classes.indexOf('collapsed') !== -1;\n\n        const padding = {};\n\n        if (collapsed) {\n            // Remove the 'collapsed' class from the class list of the element, this sets it back to the expanded state.\n            classes.splice(classes.indexOf('collapsed'), 1);\n\n            padding[id] = 300; // In px, matches the width of the sidebars set in .sidebar CSS class\n            map.easeTo({\n                padding,\n                duration: 1000 // In ms, CSS transition duration property for the sidebar matches this value\n            });\n        } else {\n            padding[id] = 0;\n            // Add the 'collapsed' class to the class list of the element\n            classes.push('collapsed');\n\n            map.easeTo({\n                padding,\n                duration: 1000\n            });\n        }\n\n        // Update the class list on the element\n        elem.className = classes.join(' ');\n    }\n\n    map.on('load', () =&gt; {\n        toggleSidebar('left');\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/pmtiles-source-and-protocol/","title":"PMTiles source and protocol","text":"<p>Uses the PMTiles plugin and protocol to present a map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;PMTiles source and protocol&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Uses the PMTiles plugin and protocol to present a map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/pmtiles@3.2.0/dist/pmtiles.js\"&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n\n    // add the PMTiles plugin to the maplibregl global.\n    const protocol = new pmtiles.Protocol();\n    maplibregl.addProtocol('pmtiles', protocol.tile);\n\n    const PMTILES_URL = 'https://pmtiles.io/protomaps(vector)ODbL_firenze.pmtiles';\n\n    const p = new pmtiles.PMTiles(PMTILES_URL);\n\n    // this is so we share one instance across the JS code and the map renderer\n    protocol.add(p);\n\n    // we first fetch the header so we can get the center lon, lat of the map.\n    p.getHeader().then(h =&gt; {\n        const map = new maplibregl.Map({\n            container: 'map',\n            zoom: h.maxZoom - 2,\n            center: [h.centerLon, h.centerLat],\n            style: {\n                version: 8,\n                sources: {\n                    'example_source': {\n                        type: 'vector',\n                        url: `pmtiles://${PMTILES_URL}`,\n                        attribution: '\u00a9 &lt;a href=\"https://openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt;'\n                    }\n                },\n                layers: [\n                    {\n                        'id': 'buildings',\n                        'source': 'example_source',\n                        'source-layer': 'landuse',\n                        'type': 'fill',\n                        'paint': {\n                            'fill-color': 'steelblue'\n                        }\n                    },\n                    {\n                        'id': 'roads',\n                        'source': 'example_source',\n                        'source-layer': 'roads',\n                        'type': 'line',\n                        'paint': {\n                            'line-color': 'black'\n                        }\n                    },\n                    {\n                        'id': 'mask',\n                        'source': 'example_source',\n                        'source-layer': 'mask',\n                        'type': 'fill',\n                        'paint': {\n                            'fill-color': 'white'\n                        }\n                    }\n                ]\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/render-world-copies/","title":"Render world copies","text":"<p>Toggle between rendering a single world and multiple copies of the world using setRenderWorldCopies.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Render world copies&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Toggle between rendering a single world and multiple copies of the world using setRenderWorldCopies.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #menu {\n        position: absolute;\n        top: 0;\n        left: 0;\n        background: #fff;\n        padding: 10px;\n        font-family: 'Open Sans', sans-serif;\n    }\n&lt;/style&gt;\n\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;div id=\"menu\"&gt;\n    &lt;div&gt;Set &lt;code&gt;renderWorldCopies&lt;/code&gt; to:&lt;/div&gt;\n    &lt;div&gt;\n        &lt;input type=\"radio\" id=\"true\" name=\"rtoggle\" value=\"true\" checked /&gt;\n        &lt;label for=\"true\"&gt;true&lt;/label&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n        &lt;input type=\"radio\" id=\"false\" name=\"rtoggle\" value=\"false\" /&gt;\n        &lt;label for=\"false\"&gt;false&lt;/label&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style: 'https://demotiles.maplibre.org/style.json', // stylesheet location\n        center: [179, 0], // starting position [lng, lat]\n        zoom: 0.01 // starting zoom\n    });\n\n    const renderOptions = document.getElementById('menu');\n    const inputs = renderOptions.getElementsByTagName('input');\n\n    function switchRenderOption(option) {\n        const status = option.target.id;\n        map.setRenderWorldCopies(status === 'true');\n        map.panTo(map.getCenter());\n    }\n\n    for (let i = 0; i &lt; inputs.length; i++) {\n        inputs[i].onclick = switchRenderOption;\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/restrict-map-panning-to-an-area/","title":"Restrict map panning to an area","text":"<p>Prevent a map from being panned to a different place by setting maxBounds.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Restrict map panning to an area&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Prevent a map from being panned to a different place by setting maxBounds.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    // Set bounds to New York, New York\n    const bounds = [\n        [-74.04728500751165, 40.68392799015035], // Southwest coordinates\n        [-73.91058699000139, 40.87764500765852] // Northeast coordinates\n    ];\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-73.9978, 40.7209],\n        zoom: 13,\n        maxBounds: bounds // Sets bounds as max\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/set-center-point-above-ground/","title":"Set center point above ground","text":"<p>Set the center point above ground level.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;title&gt;Set center point above ground&lt;/title&gt;\n  &lt;meta property=\"og:description\" content=\"Set the center point above ground level.\" /&gt;\n  &lt;meta charset='utf-8'&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n  &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n  &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n  &lt;style&gt;\n      body { margin: 0; padding: 0; }\n      html, body, #map { height: 100%; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n  const map = new maplibregl.Map({\n      style: {\n        version: 8,\n        sources: {\n            openfreemap: {\n                url: `https://tiles.openfreemap.org/planet`,\n                type: 'vector',\n            }\n        },\n        layers: [\n            {\n              'id': '3d-buildings',\n              'source': 'openfreemap',\n              'source-layer': 'building',\n              'type': 'fill-extrusion',\n              'minzoom': 13,\n              'filter': ['!=', ['get', 'hide_3d'], true],\n              'paint': {\n                  'fill-extrusion-color': [\n                      'interpolate',\n                      ['linear'],\n                      ['get', 'render_height'], 0, 'lightgray', 200, 'royalblue', 400, 'lightblue'\n                  ],\n                  'fill-extrusion-height': [\n                      'interpolate',\n                      ['linear'],\n                      ['zoom'],\n                      13,\n                      0,\n                      14,\n                      ['get', 'render_height']\n                  ],\n                  'fill-extrusion-base': ['case',\n                      ['&gt;=', ['get', 'zoom'], 16],\n                      ['get', 'render_min_height'], 0\n                  ]\n              }\n          }\n        ]\n      },\n      center: [-74.01318, 40.713],\n      minZoom: 13,\n      zoom: 15.5,\n      pitch: 85,\n      bearing: -17.6,\n      container: 'map',\n      canvasContextAttributes: {antialias: true},\n      centerClampedToGround: false,\n      elevation: 541,\n      maxPitch: 105\n  });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/set-pitch-and-bearing/","title":"Set pitch and bearing","text":"<p>Initialize a map with pitch and bearing camera options.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Set pitch and bearing&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Initialize a map with pitch and bearing camera options.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        // camera options properties\n        center: [-73.5804, 45.53483],\n        pitch: 60, // pitch in degrees\n        bearing: -60, // bearing in degrees\n        zoom: 4\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/show-polygon-information-on-click/","title":"Show polygon information on click","text":"<p>When a user clicks a polygon, show a popup containing more information.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Show polygon information on click&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"When a user clicks a polygon, show a popup containing more information.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .maplibregl-popup {\n        max-width: 400px;\n        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [-100.04, 38.907],\n        zoom: 3\n    });\n\n    map.on('load', () =&gt; {\n        // Add a source for the state polygons.\n        map.addSource('states', {\n            'type': 'geojson',\n            'data': 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_110m_admin_1_states_provinces_shp.geojson'\n        });\n\n        // Add a layer showing the state polygons.\n        map.addLayer({\n            'id': 'states-layer',\n            'type': 'fill',\n            'source': 'states',\n            'paint': {\n                'fill-color': 'rgba(200, 100, 240, 0.4)',\n                'fill-outline-color': 'rgba(200, 100, 240, 1)'\n            }\n        });\n\n        // When a click event occurs on a feature in the states layer, open a popup at the\n        // location of the click, with description HTML from its properties.\n        map.on('click', 'states-layer', (e) =&gt; {\n            new maplibregl.Popup()\n                .setLngLat(e.lngLat)\n                .setHTML(e.features[0].properties.name)\n                .addTo(map);\n        });\n\n        // Change the cursor to a pointer when the mouse is over the states layer.\n        map.on('mouseenter', 'states-layer', () =&gt; {\n            map.getCanvas().style.cursor = 'pointer';\n        });\n\n        // Change it back to a pointer when it leaves.\n        map.on('mouseleave', 'states-layer', () =&gt; {\n            map.getCanvas().style.cursor = '';\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/sky-fog-terrain/","title":"Sky, Fog, Terrain","text":"<p>Allows changing the sky, fog and horizon color and blends.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Sky, Fog, Terrain&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Allows changing the sky, fog and horizon color and blends.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n        .listing-group {\n            font-family: 'Helvetica Neue', Arial, Helvetica, sans-serif;\n            position: absolute;\n            bottom: 10px;\n            left: 10px;\n            color: #fff;\n            background-color: gray;\n            padding: 10px;\n            border-radius: 4px;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;table id=\"listing-group\" class=\"listing-group\"&gt;\n    &lt;tr&gt;&lt;td&gt;&lt;label for=\"sky-enabled\"&gt;enabled&lt;/label&gt;&lt;/td&gt;&lt;td&gt;&lt;input type=\"checkbox\" id=\"sky-enabled\" checked/&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;&lt;label for=\"sky-color-picker\"&gt;sky-color&lt;/label&gt;&lt;/td&gt;&lt;td&gt;&lt;input type=\"color\" id=\"sky-color-picker\" value=\"#0000ff\" style=\"width: 100%\"/&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;&lt;label for=\"horizon-color-picker\"&gt;horizon-color&lt;/label&gt;&lt;/td&gt;&lt;td&gt;&lt;input type=\"color\" id=\"horizon-color-picker\" value=\"#00ff00\" style=\"width: 100%\"/&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;&lt;label for=\"fog-color-picker\"&gt;fog-color&lt;/label&gt;&lt;/td&gt;&lt;td&gt;&lt;input type=\"color\" id=\"fog-color-picker\" value=\"#ff0000\" style=\"width: 100%\"/&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;&lt;label for=\"sky-horizon-blend-slider\"&gt;sky-horizon-blend&lt;/label&gt;&lt;/td&gt;&lt;td&gt;&lt;input type=\"range\" id=\"sky-horizon-blend-slider\" min=\"0\" max=\"1\" step=\"0.01\" value=\"0.5\" /&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;&lt;label for=\"horizon-fog-blend-slider\"&gt;horizon-fog-blend&lt;/label&gt;&lt;/td&gt;&lt;td&gt;&lt;input type=\"range\" id=\"horizon-fog-blend-slider\" min=\"0\" max=\"1\" step=\"0.01\" value=\"0.5\" /&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;&lt;label for=\"fog-ground-blend-slider\"&gt;fog-ground-blend&lt;/label&gt;&lt;/td&gt;&lt;td&gt;&lt;input type=\"range\" id=\"fog-ground-blend-slider\" min=\"0\" max=\"1\" step=\"0.01\" value=\"0.1\" /&gt;&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n&lt;script&gt;\n    function setSkyFromUi() {\n        if (!document.getElementById('sky-enabled').checked) {\n            map.setSky(undefined);\n            return;\n        }\n        map.setSky({\n            'sky-color': document.getElementById('sky-color-picker').value,\n            'sky-horizon-blend': +document.getElementById('sky-horizon-blend-slider').value,\n            'horizon-color': document.getElementById('horizon-color-picker').value,\n            'horizon-fog-blend': +document.getElementById('horizon-fog-blend-slider').value,\n            'fog-color': document.getElementById('fog-color-picker').value,\n            'fog-ground-blend': +document.getElementById('fog-ground-blend-slider').value\n        });\n    }\n\n    const map = (window.map = new maplibregl.Map({\n        container: 'map',\n        zoom: 12,\n        center: [11.2953, 47.5479],\n        pitch: 77,\n        hash: true,\n        style: {\n            version: 8,\n            sources: {\n                osm: {\n                    type: 'raster',\n                    tiles: ['https://a.tile.openstreetmap.org/{z}/{x}/{y}.png'],\n                    tileSize: 256,\n                    attribution: '&amp;copy; OpenStreetMap Contributors',\n                    maxzoom: 19\n                },\n                // Use a different source for terrain and hillshade layers, to improve render quality\n                terrainSource: {\n                    type: 'raster-dem',\n                    url: 'https://demotiles.maplibre.org/terrain-tiles/tiles.json',\n                    tileSize: 256\n                },\n                hillshadeSource: {\n                    type: 'raster-dem',\n                    url: 'https://demotiles.maplibre.org/terrain-tiles/tiles.json',\n                    tileSize: 256\n                }\n            },\n            layers: [\n                {\n                    id: 'osm',\n                    type: 'raster',\n                    source: 'osm'\n                },\n                {\n                    id: 'hills',\n                    type: 'hillshade',\n                    source: 'hillshadeSource',\n                    layout: {visibility: 'visible'},\n                    paint: {'hillshade-shadow-color': '#473B24'}\n                }\n            ],\n            terrain: {\n                source: 'terrainSource',\n                exaggeration: 1\n            }\n        },\n        maxZoom: 18,\n        maxPitch: 85\n    }));\n\n    map.addControl(\n        new maplibregl.NavigationControl({\n            visualizePitch: true,\n            showZoom: true,\n            showCompass: true\n        })\n    );\n\n\n    map.addControl(\n        new maplibregl.GlobeControl()\n    );\n\n\n    map.addControl(\n        new maplibregl.TerrainControl({\n            source: 'terrainSource',\n            exaggeration: 1\n        })\n    );\n    map.on('load', () =&gt; {\n        document.getElementById('sky-color-picker').addEventListener('change', setSkyFromUi);\n        document.getElementById('horizon-color-picker').addEventListener('change', setSkyFromUi);\n        document.getElementById('fog-color-picker').addEventListener('change', setSkyFromUi);\n        document.getElementById('sky-horizon-blend-slider').addEventListener('change', setSkyFromUi);\n        document.getElementById('horizon-fog-blend-slider').addEventListener('change', setSkyFromUi);\n        document.getElementById('fog-ground-blend-slider').addEventListener('change', setSkyFromUi);\n        document.getElementById('sky-enabled').addEventListener('change', setSkyFromUi);\n        setSkyFromUi();\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/slowly-fly-to-a-location/","title":"Slowly fly to a location","text":"<p>Use flyTo with flyOptions to slowly zoom to a location.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Slowly fly to a location&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use flyTo with flyOptions to slowly zoom to a location.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #fly {\n        display: block;\n        position: absolute;\n        top: 20px;\n        left: 50%;\n        transform: translate(-50%);\n        width: 50%;\n        height: 40px;\n        padding: 10px;\n        border: none;\n        border-radius: 3px;\n        font-size: 12px;\n        text-align: center;\n        color: #fff;\n        background: #ee8a65;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;br /&gt;\n&lt;button id=\"fly\"&gt;Fly&lt;/button&gt;\n&lt;script&gt;\n    const start = [-74.5, 40];\n    const end = [74.5, 40];\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: start,\n        zoom: 9\n    });\n\n    let isAtStart = true;\n\n    document.getElementById('fly').addEventListener('click', () =&gt; {\n        // depending on whether we're currently at point a or b, aim for\n        // point a or b\n        const target = isAtStart ? end : start;\n\n        // and now we're at the opposite point\n        isAtStart = !isAtStart;\n\n        map.flyTo({\n            // These options control the ending camera position: centered at\n            // the target, at zoom level 9, and north up.\n            center: target,\n            zoom: 9,\n            bearing: 0,\n\n            // These options control the flight curve, making it move\n            // slowly and zoom out almost completely before starting\n            // to pan.\n            speed: 0.2, // make the flying slow\n            curve: 1, // change the speed at which it zooms out\n\n            // This can be any easing function: it takes a number between\n            // 0 and 1 and returns another number between 0 and 1.\n            easing (t) {\n                return t;\n            },\n\n            // this animation is considered essential with respect to prefers-reduced-motion\n            essential: true\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/style-lines-with-a-data-driven-property/","title":"Style lines with a data-driven property","text":"<p>Create a visualization with a data expression for line-color.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Style lines with a data-driven property&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Create a visualization with a data expression for line-color.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-122.48383155304096, 37.82882682974591],\n        zoom: 16\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('lines', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'color': '#F7455D' // red\n                        },\n                        'geometry': {\n                            'type': 'LineString',\n                            'coordinates': [\n                                [-122.4833858013153, 37.829607404976734],\n                                [-122.4830961227417, 37.82932776098012],\n                                [-122.4830746650696, 37.82932776098012],\n                                [-122.48218417167662, 37.82889558180985],\n                                [-122.48218417167662, 37.82890193740421],\n                                [-122.48221099376678, 37.82868372835086],\n                                [-122.4822163581848, 37.82868372835086],\n                                [-122.48205006122589, 37.82801003030873]\n                            ]\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'properties': {\n                            'color': '#33C9EB' // blue\n                        },\n                        'geometry': {\n                            'type': 'LineString',\n                            'coordinates': [\n                                [-122.48393028974533, 37.829471820141016],\n                                [-122.48395174741744, 37.82940826466351],\n                                [-122.48395174741744, 37.829412501697064],\n                                [-122.48423874378203, 37.829357420242125],\n                                [-122.48422533273697, 37.829361657278575],\n                                [-122.48459815979002, 37.8293425906126],\n                                [-122.48458743095398, 37.8293447091313],\n                                [-122.4847564101219, 37.82932776098012],\n                                [-122.48474299907684, 37.829331998018276],\n                                [-122.4849334359169, 37.829298101706186],\n                                [-122.48492807149889, 37.82930022022615],\n                                [-122.48509705066681, 37.82920488676767],\n                                [-122.48509168624878, 37.82920912381288],\n                                [-122.48520433902739, 37.82905870855876],\n                                [-122.48519897460936, 37.82905870855876],\n                                [-122.4854403734207, 37.828594749716714],\n                                [-122.48543500900269, 37.82860534241688],\n                                [-122.48571664094925, 37.82808206121068],\n                                [-122.48570591211319, 37.82809689109353],\n                                [-122.4858346581459, 37.82797189627337],\n                                [-122.48582661151886, 37.82797825194729],\n                                [-122.4859634041786, 37.82788503534145],\n                                [-122.48595803976059, 37.82788927246246],\n                                [-122.48605459928514, 37.82786596829394]\n                            ]\n                        }\n                    }\n                ]\n            }\n        });\n        map.addLayer({\n            'id': 'lines',\n            'type': 'line',\n            'source': 'lines',\n            'paint': {\n                'line-width': 3,\n                // Use a get expression (https://maplibre.org/maplibre-style-spec/expressions/#get)\n                // to set the line-color to a feature property value.\n                'line-color': ['get', 'color']\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/sync-movement-of-multiple-maps/","title":"Sync movement of multiple maps","text":"<p>Synchronize MapLibre GL JS maps with the sync-move plugin.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Sync movement of multiple maps&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Synchronize MapLibre GL JS maps with the sync-move plugin.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/@mapbox/mapbox-gl-sync-move@0.3.1\"&gt;&lt;/script&gt;\n\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body { height: 100%; }\n        #map1, #map2, #map3 { height: 100%; width: 100%; }\n        .maps {\n            display: flex;\n            width: 100%;\n            height: 100%;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"maps\"&gt;\n    &lt;div id=\"map1\"&gt;&lt;/div&gt;\n    &lt;div id=\"map2\"&gt;&lt;/div&gt;\n    &lt;div id=\"map3\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;script&gt;\n    const map1 = new maplibregl.Map({\n        container: 'map1',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [0, 0],\n        zoom: 1,\n        maplibreLogo: true\n    });\n    const map2 = new maplibregl.Map({\n        container: 'map2',\n        style: 'https://basemaps.cartocdn.com/gl/positron-gl-style/style.json',\n        center: [0, 0],\n        zoom: 1,\n        maplibreLogo: true\n    });\n    const map3 = new maplibregl.Map({\n        container: 'map3',\n        style: 'https://basemaps.cartocdn.com/gl/dark-matter-gl-style/style.json',\n        center: [0, 0],\n        zoom: 1,\n        maplibreLogo: true\n    });\n\n    syncMaps(map1, map2, map3);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/toggle-deckgl-layer/","title":"Toggle deck.gl layer","text":"<p>Toggle deck.gl layer using maplibre.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;Toggle deck.gl layer&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Toggle deck.gl layer using maplibre.\" /&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css\" /&gt;\n    &lt;script src=\"https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/deck.gl@8.9.33/dist.min.js\"&gt;&lt;/script&gt;\n    &lt;style&gt;\n      body {\n        margin: 0;\n        padding: 0;\n      }\n      html,\n      body,\n      #map {\n        height: 100%;\n      }\n      #toggle-button {\n        position: fixed;\n        top: 20px;\n        left: 20px;\n        background-color: rgb(130, 25, 191);\n        color: #f0ead6;\n        font-size: 1.2rem;\n        min-width: 70px;\n        border-radius: 5px;\n        border: none;\n        padding: 5px 10px;\n        transition: 0.3s;\n      }\n      #toggle-button:hover {\n        scale: 1.1;\n        box-shadow: 0 0 4px 4px gray;\n      }\n      /* Deck.gl layer is added as an overlay, popup needs to be displayed over it */\n      .maplibregl-popup {\n        z-index: 2;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"map\"&gt;&lt;/div&gt;\n    &lt;button id=\"toggle-button\"&gt;Hide&lt;/button&gt;\n    &lt;script&gt;\n      const url = 'https://maps.clockworkmicro.com/streets/v1/style?x-api-key=';\n      const apiKey = 'Dr4eW3s233rRkk8I_public';\n\n      let overlay;\n\n      const map = new maplibregl.Map({\n          container: 'map',\n          style: url + apiKey,\n          center: [2.345885, 48.860412],\n          zoom: 12,\n      });\n      map.addControl(new maplibregl.NavigationControl(), 'top-right');\n\n      // 5 Beautiful gardens in Paris\n      const sampleData = {\n          type: 'FeatureCollection',\n          name: 'Jardins Des Paris',\n          crs: {\n              type: 'name',\n              properties: {name: 'urn:ogc:def:crs:OGC:1.3:CRS84'},\n          },\n          features: [\n              {\n                  type: 'Feature',\n                  properties: {\n                      name: 'Jardins du Trocad\u00e9ro',\n                      district: 16,\n                  },\n                  geometry: {\n                      type: 'Point',\n                      coordinates: [2.289207, 48.861561],\n                  },\n              },\n              {\n                  type: 'Feature',\n                  properties: {\n                      name: 'Jardin des Plantes',\n                      district: 5,\n                  },\n                  geometry: {\n                      type: 'Point',\n                      coordinates: [2.359823, 48.843995],\n                  },\n              },\n              {\n                  type: 'Feature',\n                  properties: {\n                      name: 'Jardins das Tulherias',\n                      district: 1,\n                  },\n                  geometry: {\n                      type: 'Point',\n                      coordinates: [2.327092, 48.863608],\n                  },\n              },\n              {\n                  type: 'Feature',\n                  properties: {\n                      name: 'Parc de Bercy',\n                      district: 12,\n                  },\n                  geometry: {\n                      type: 'Point',\n                      coordinates: [2.382094, 48.835962],\n                  },\n              },\n              {\n                  type: 'Feature',\n                  properties: {\n                      name: 'Jardin du Luxemburg',\n                      district: 6,\n                  },\n                  geometry: {\n                      type: 'Point',\n                      coordinates: [2.336975, 48.846421],\n                  },\n              },\n          ],\n      };\n\n      // Add the overlay as a control\n      function initializeOverlay () {\n          const layer = new deck.ScatterplotLayer({\n              id: 'scatterplot-layer',\n              data: sampleData.features,\n              pickable: true,\n              opacity: 0.8,\n              stroked: true,\n              filled: true,\n              radiusScale: 6,\n              radiusMinPixels: 20,\n              radiusMaxPixels: 100,\n              lineWidthMinPixels: 5,\n              getPosition: (d) =&gt; d.geometry.coordinates,\n              getFillColor: (d) =&gt; [49, 130, 206],\n              getLineColor: (d) =&gt; [175, 0, 32],\n              onClick: (info) =&gt; {\n                  const {coordinate, object} = info;\n                  const description = `&lt;div&gt;\n            &lt;p&gt;\n              &lt;strong&gt;Name: &lt;/strong&gt;${object.properties['name']}\n            &lt;/p&gt;\n              &lt;strong&gt;District: &lt;/strong&gt;${object.properties['district']}\n            &lt;/p&gt;\n          &lt;/div&gt;`;\n\n                  new maplibregl.Popup()\n                      .setLngLat(coordinate)\n                      .setHTML(description)\n                      .addTo(map);\n              },\n          });\n\n          // Create the overlay\n          overlay = new deck.MapboxOverlay({\n              layers: [layer],\n          });\n\n          map.addControl(overlay);\n      }\n\n      let show = true; // Display the layer by default\n\n      map.on('load', () =&gt; {\n          // Add the overlay\n          initializeOverlay();\n\n          const toggleButton = document.querySelector('#toggle-button');\n          toggleButton.addEventListener('click', () =&gt; {\n              if (show) {\n                  map.removeControl(overlay);\n                  toggleButton.innerText = 'Show';\n                  show = false;\n              } else {\n                  initializeOverlay();\n                  toggleButton.innerText = 'Hide';\n                  show = true;\n              }\n          });\n      });\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/toggle-interactions/","title":"Toggle interactions","text":"<p>Enable or disable UI handlers on a map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Toggle interactions&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Enable or disable UI handlers on a map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    .listing-group {\n        font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;\n        font-weight: 600;\n        position: absolute;\n        top: 10px;\n        right: 10px;\n        z-index: 1;\n        border-radius: 3px;\n        max-width: 20%;\n        color: #fff;\n    }\n\n    .listing-group input[type='checkbox']:first-child + label {\n        border-radius: 3px 3px 0 0;\n    }\n\n    .listing-group label:last-child {\n        border-radius: 0 0 3px 3px;\n        border: none;\n    }\n\n    .listing-group input[type='checkbox'] {\n        display: none;\n    }\n\n    .listing-group input[type='checkbox'] + label {\n        background-color: #3386c0;\n        display: block;\n        cursor: pointer;\n        padding: 10px;\n        border-bottom: 1px solid rgba(0, 0, 0, 0.25);\n    }\n\n    .listing-group input[type='checkbox'] + label {\n        background-color: #3386c0;\n        text-transform: capitalize;\n    }\n\n    .listing-group input[type='checkbox'] + label:hover,\n    .listing-group input[type='checkbox']:checked + label {\n        background-color: #4ea0da;\n    }\n\n    .listing-group input[type='checkbox']:checked + label:before {\n        content: '\u2714';\n        margin-right: 5px;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;nav id=\"listing-group\" class=\"listing-group\"&gt;\n    &lt;input type=\"checkbox\" id=\"scrollZoom\" checked=\"checked\" /&gt;\n    &lt;label for=\"scrollZoom\"&gt;Scroll zoom&lt;/label&gt;\n    &lt;input type=\"checkbox\" id=\"boxZoom\" checked=\"checked\" /&gt;\n    &lt;label for=\"boxZoom\"&gt;Box zoom&lt;/label&gt;\n    &lt;input type=\"checkbox\" id=\"dragRotate\" checked=\"checked\" /&gt;\n    &lt;label for=\"dragRotate\"&gt;Drag rotate&lt;/label&gt;\n    &lt;input type=\"checkbox\" id=\"dragPan\" checked=\"checked\" /&gt;\n    &lt;label for=\"dragPan\"&gt;Drag pan&lt;/label&gt;\n    &lt;input type=\"checkbox\" id=\"keyboard\" checked=\"checked\" /&gt;\n    &lt;label for=\"keyboard\"&gt;Keyboard&lt;/label&gt;\n    &lt;input type=\"checkbox\" id=\"doubleClickZoom\" checked=\"checked\" /&gt;\n    &lt;label for=\"doubleClickZoom\"&gt;Double click zoom&lt;/label&gt;\n    &lt;input type=\"checkbox\" id=\"touchZoomRotate\" checked=\"checked\" /&gt;\n    &lt;label for=\"touchZoomRotate\"&gt;Touch zoom rotate&lt;/label&gt;\n&lt;/nav&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [-77.04, 38.907],\n        zoom: 3\n    });\n\n    document\n        .getElementById('listing-group')\n        .addEventListener('change', (e) =&gt; {\n            const handler = e.target.id;\n            if (e.target.checked) {\n                map[handler].enable();\n            } else {\n                map[handler].disable();\n            }\n        });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/update-a-feature-in-realtime/","title":"Update a feature in realtime","text":"<p>Change an existing feature on your map in real-time by updating its data.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Update a feature in realtime&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Change an existing feature on your map in real-time by updating its data.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script src=\"https://d3js.org/d3.v3.min.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        zoom: 0\n    });\n\n    map.on('load', () =&gt; {\n        // We use D3 to fetch the JSON here so that we can parse and use it separately\n        // from GL JS's use in the added source. You can use any request method (library\n        // or otherwise) that you want.\n        d3.json(\n            'https://maplibre.org/maplibre-gl-js/docs/assets/hike.geojson',\n            (err, data) =&gt; {\n                if (err) throw err;\n\n                // save full coordinate list for later\n                const coordinates = data.features[0].geometry.coordinates;\n\n                // start by showing just the first coordinate\n                data.features[0].geometry.coordinates = [coordinates[0]];\n\n                // add it to the map\n                map.addSource('trace', {type: 'geojson', data});\n                map.addLayer({\n                    'id': 'trace',\n                    'type': 'line',\n                    'source': 'trace',\n                    'paint': {\n                        'line-color': 'yellow',\n                        'line-opacity': 0.75,\n                        'line-width': 5\n                    }\n                });\n\n                // setup the viewport\n                map.jumpTo({'center': coordinates[0], 'zoom': 14});\n                map.setPitch(30);\n\n                // on a regular basis, add more coordinates from the saved list and update the map\n                let i = 0;\n                const timer = window.setInterval(() =&gt; {\n                    if (i &lt; coordinates.length) {\n                        data.features[0].geometry.coordinates.push(\n                            coordinates[i]\n                        );\n                        map.getSource('trace').setData(data);\n                        map.panTo(coordinates[i]);\n                        i++;\n                    } else {\n                        window.clearInterval(timer);\n                    }\n                }, 10);\n            }\n        );\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/use-a-fallback-image/","title":"Use a fallback image","text":"<p>Use a coalesce expression to display another image when a requested image is not available.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Use a fallback image&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use a coalesce expression to display another image when a requested image is not available.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-77, 38.75],\n        zoom: 5\n    });\n    map.on('load', () =&gt; {\n        map.addSource('points', {\n            'type': 'geojson',\n            'data': {\n                'type': 'FeatureCollection',\n                'features': [\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [\n                                -77.03238901390978, 38.913188059745586\n                            ]\n                        },\n                        'properties': {\n                            'title': 'Washington DC',\n                            'icon': 'monument'\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-79.9959, 40.4406]\n                        },\n                        'properties': {\n                            'title': 'Pittsburgh',\n                            'icon': 'bridges'\n                        }\n                    },\n                    {\n                        'type': 'Feature',\n                        'geometry': {\n                            'type': 'Point',\n                            'coordinates': [-76.2859, 36.8508]\n                        },\n                        'properties': {\n                            'title': 'Norfolk',\n                            'icon': 'harbor'\n                        }\n                    }\n                ]\n            }\n        });\n        map.addLayer({\n            'id': 'points',\n            'type': 'symbol',\n            'source': 'points',\n            'layout': {\n                'icon-image': [\n                    'coalesce',\n                    ['image', ['concat', ['get', 'icon'], '_11']],\n                    ['image', 'marker_11']\n                ],\n                'text-field': ['get', 'title'],\n                'text-font': ['Noto Sans Regular'],\n                'text-offset': [0, 0.6],\n                'text-anchor': 'top'\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/use-addprotocol-to-transform-feature-properties/","title":"Use addProtocol to Transform Feature Properties","text":"<p>Reverse country names with addProtocol in plain JavaScript.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Use addProtocol to Transform Feature Properties&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Reverse country names with addProtocol in plain JavaScript.\" /&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css\" /&gt;\n    &lt;script src=\"https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"map\"&gt;&lt;/div&gt;\n    &lt;script type=\"module\"&gt;\n        import Protobuf from 'https://unpkg.com/pbf@4.0.1/index.js';\n        import {VectorTile} from 'https://esm.run/@mapbox/vector-tile@2.0.3/index.js';\n        import tileToProtobuf from 'https://esm.run/vt-pbf@3.1.3/index.js';\n\n        const protocol = 'reverse';\n        maplibregl.addProtocol(protocol, (request) =&gt; {\n            const url = request.url.replace(protocol + '://', '');\n            return fetch(url)\n                .then((response) =&gt; response.arrayBuffer())\n                .then((data) =&gt; new VectorTile(new Protobuf(data)))\n                .then((tile) =&gt; ({\n                    layers: Object.entries(tile.layers).reduce((acc, [layerId, layer]) =&gt; ({\n                        ...acc,\n                        [layerId]: {\n                            ...layer,\n                            feature: (index) =&gt; {\n                                const feature = layer.feature(index);\n                                if (feature.properties &amp;&amp; typeof feature.properties['NAME'] === 'string') {\n                                    feature.properties['NAME'] = feature.properties['NAME'].split('').reverse().join('');\n                                }\n                                if (feature.properties &amp;&amp; typeof feature.properties['ABBREV'] === 'string') {\n                                    feature.properties['ABBREV'] = feature.properties['ABBREV'].split('').reverse().join('');\n                                }\n                                return feature;\n                            }\n                        }\n                    }), {})\n                }))\n                .then((tile) =&gt; tileToProtobuf(tile).buffer)\n                .then((data) =&gt; ({ data }));\n        });\n\n        const map = new maplibregl.Map({\n            container: 'map',\n            style: 'https://demotiles.maplibre.org/style.json',\n            center: [8, 47],\n            zoom: 5,\n            hash: 'map'\n        });\n\n        map.setTransformRequest((url, resourceType) =&gt; {\n            if (url.startsWith('https://demotiles.maplibre.org/tiles/') &amp;&amp; resourceType === 'Tile') {\n                return { url: protocol + '://' + url };\n            }\n            return undefined;\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/use-locally-generated-ideographs/","title":"Use locally generated ideographs","text":"<p>Set localIdeographFontFamily to override the font used for displaying CJK (Chinese, Japanese and Korean) characters, ignoring the map style. This setting must be a CSS font rule specifying fallbacks of on-device fonts. Set localIdeographFontFamily to false to use server-provided fonts, which is much slower.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Use locally generated ideographs&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Set localIdeographFontFamily to override the font used for displaying CJK (Chinese, Japanese and Korean) characters, ignoring the map style. This setting must be a CSS font rule specifying fallbacks of on-device fonts. Set localIdeographFontFamily to false to use server-provided fonts, which is much slower.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [120.3049, 31.4751],\n        zoom: 12,\n        localIdeographFontFamily: '\"Apple LiSung\", serif'\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/variable-label-placement-with-offset/","title":"Variable label placement with offset","text":"<p>Use text-variable-anchor-offset to allow high priority labels to shift position to stay on the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Variable label placement with offset&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use text-variable-anchor-offset to allow high priority labels to shift position to stay on the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const places = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'Ford\\'s Theater',\n                    'icon': 'theatre'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.038659, 38.931567]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'The Gaslight',\n                    'icon': 'theatre'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.003168, 38.894651]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'Horrible Harry\\'s',\n                    'icon': 'bar'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.090372, 38.881189]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'Bike Party',\n                    'icon': 'bicycle'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.052477, 38.943951]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'Rockabilly Rockstars',\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.031706, 38.914581]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'District Drum Tribe',\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.020945, 38.878241]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'Motown Memories',\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.007481, 38.876516]\n                }\n            }\n        ]\n    };\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-77.04, 38.907],\n        zoom: 11.15\n    });\n\n    map.on('load', () =&gt; {\n        // Add a GeoJSON source containing place coordinates and information.\n        map.addSource('places', {\n            'type': 'geojson',\n            'data': places\n        });\n\n        map.addLayer({\n            'id': 'poi-labels',\n            'type': 'symbol',\n            'source': 'places',\n            'layout': {\n                'text-field': ['get', 'description'],\n                'text-font': ['Noto Sans Regular'],\n                'text-variable-anchor-offset': ['top', [0, 1], 'bottom', [0, -2], 'left', [1, 0], 'right', [-2, 0]],\n                'text-justify': 'auto',\n                'icon-image': ['get', 'icon']\n            }\n        });\n\n        map.rotateTo(180, {duration: 10000});\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/variable-label-placement/","title":"Variable label placement","text":"<p>Use text-variable-anchor to allow high priority labels to shift position to stay on the map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Variable label placement&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use text-variable-anchor to allow high priority labels to shift position to stay on the map.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const places = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'Ford\\'s Theater',\n                    'icon': 'theatre'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.038659, 38.931567]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'The Gaslight',\n                    'icon': 'theatre'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.003168, 38.894651]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'Horrible Harry\\'s',\n                    'icon': 'bar'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.090372, 38.881189]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'Bike Party',\n                    'icon': 'bicycle'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.052477, 38.943951]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'Rockabilly Rockstars',\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.031706, 38.914581]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'District Drum Tribe',\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.020945, 38.878241]\n                }\n            },\n            {\n                'type': 'Feature',\n                'properties': {\n                    'description': 'Motown Memories',\n                    'icon': 'music'\n                },\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': [-77.007481, 38.876516]\n                }\n            }\n        ]\n    };\n\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-77.04, 38.907],\n        zoom: 11.15\n    });\n\n    map.on('load', () =&gt; {\n        // Add a GeoJSON source containing place coordinates and information.\n        map.addSource('places', {\n            'type': 'geojson',\n            'data': places\n        });\n\n        map.addLayer({\n            'id': 'poi-labels',\n            'type': 'symbol',\n            'source': 'places',\n            'layout': {\n                'text-field': ['get', 'description'],\n                'text-font': ['Noto Sans Regular'],\n                'text-variable-anchor': ['top', 'bottom', 'left', 'right'],\n                'text-radial-offset': 0.5,\n                'text-justify': 'auto',\n                'icon-image': ['get', 'icon']\n            }\n        });\n\n        map.rotateTo(180, {duration: 10000});\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/view-a-fullscreen-map/","title":"View a fullscreen map","text":"<p>Toggle between current view and fullscreen mode. Does not work on iPhones because a pseudo-fullscreen is used, and the code is embedded in an iframe, which prevents the map from scaling.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;View a fullscreen map&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Toggle between current view and fullscreen mode. Does not work on iPhones because a pseudo-fullscreen is used, and the code is embedded in an iframe, which prevents the map from scaling.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style: 'https://tiles.openfreemap.org/styles/bright', //stylesheet location\n        center: [11.255, 43.77], // starting position\n        zoom: 13 // starting zoom\n    });\n\n    map.addControl(new maplibregl.FullscreenControl());\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/view-local-geojson-experimental/","title":"View local GeoJSON (experimental)","text":"<p>View local GeoJSON with experimental File System Access API.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;View local GeoJSON (experimental)&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"View local GeoJSON with experimental File System Access API.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #viewbutton {\n        position: absolute;\n        top: 0;\n        left: 0;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;button id=\"viewbutton\"&gt;View local GeoJSON file&lt;/button&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-8.3226655, 53.7654751],\n        zoom: 8\n    });\n\n    const viewbutton = document.getElementById('viewbutton');\n\n    async function buttonClickHandler() {\n        const [fileHandle] = await window.showOpenFilePicker({\n            // allow only single file\n            multiple: false,\n\n            // apply filter for GeoJSON files\n            types: [\n                {\n                    description: 'GeoJSON',\n                    accept: {'application/geo+json': ['.geojson']}\n                }\n            ],\n\n            // start in download directory\n            startIn: 'downloads'\n        });\n\n        // get file handle and read content\n        const file = await fileHandle.getFile();\n        const contents = await file.text();\n\n        // parse file as json and add as source to the map\n        map.addSource('uploaded-source', {\n            'type': 'geojson',\n            'data': JSON.parse(contents)\n        });\n\n        map.addLayer({\n            'id': 'uploaded-polygons',\n            'type': 'fill',\n            'source': 'uploaded-source',\n            'paint': {\n                'fill-color': '#888888',\n                'fill-outline-color': 'red',\n                'fill-opacity': 0.4\n            },\n            // filter for (multi)polygons; for also displaying linestrings\n            // or points add more layers with different filters\n            'filter': ['==', '$type', 'Polygon']\n        });\n    }\n\n    if ('showOpenFilePicker' in window) {\n        viewbutton.addEventListener('click', buttonClickHandler);\n    } else {\n        viewbutton.innerText =\n            'Your browser does not support File System Access API';\n        // If you want a fallback, try &lt;input type=\"file\"&gt;; but this uses classical file upload\n    }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/view-local-geojson/","title":"View local GeoJSON","text":"<p>View local GeoJSON without server upload.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;View local GeoJSON&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"View local GeoJSON without server upload.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #file {\n        position: absolute;\n        top: 0;\n        left: 0;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;input\n    type=\"file\"\n    id=\"file\"\n    name=\"file\"\n    accept=\"application/geo+json,application/vnd.geo+json,.geojson\"\n/&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://tiles.openfreemap.org/styles/bright',\n        center: [-8.3226655, 53.7654751],\n        zoom: 8\n    });\n\n    function handleFileSelect(evt) {\n        const file = evt.target.files[0]; // Read first selected file\n\n        const reader = new FileReader();\n\n        reader.onload = function (theFile) {\n            // Parse as (geo)JSON\n            const geoJSONcontent = JSON.parse(theFile.target.result);\n\n            // Add as source to the map\n            map.addSource('uploaded-source', {\n                'type': 'geojson',\n                'data': geoJSONcontent\n            });\n\n            map.addLayer({\n                'id': 'uploaded-polygons',\n                'type': 'fill',\n                'source': 'uploaded-source',\n                'paint': {\n                    'fill-color': '#888888',\n                    'fill-outline-color': 'red',\n                    'fill-opacity': 0.4\n                },\n                // filter for (multi)polygons; for also displaying linestrings\n                // or points add more layers with different filters\n                'filter': ['==', '$type', 'Polygon']\n            });\n        };\n\n        // Read the GeoJSON as text\n        reader.readAsText(file, 'UTF-8');\n    }\n\n    document\n        .getElementById('file')\n        .addEventListener('change', handleFileSelect, false);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/visualize-population-density/","title":"Visualize population density","text":"<p>Use a variable binding expression to calculate and display population density.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Visualize population density&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Use a variable binding expression to calculate and display population density.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 100%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map', // container id\n        style: 'https://tiles.openfreemap.org/styles/bright', // stylesheet location\n        center: [30.0222, -1.9596], // starting position [lng, lat]\n        zoom: 7 // starting zoom\n    });\n\n    map.on('load', () =&gt; {\n        map.addSource('rwanda-provinces', {\n            'type': 'geojson',\n            'data': 'https://maplibre.org/maplibre-gl-js/docs/assets/rwanda-provinces.geojson'\n        });\n        map.addLayer({\n            'id': 'rwanda-provinces',\n            'type': 'fill',\n            'source': 'rwanda-provinces',\n            'layout': {},\n            'paint': {\n                'fill-color': [\n                    'let',\n                    'density',\n                    ['/', ['get', 'population'], ['get', 'sq-km']],\n                    [\n                        'interpolate',\n                        ['linear'],\n                        ['zoom'],\n                        8,\n                        [\n                            'interpolate',\n                            ['linear'],\n                            ['var', 'density'],\n                            274,\n                            ['to-color', '#edf8e9'],\n                            1551,\n                            ['to-color', '#006d2c']\n                        ],\n                        10,\n                        [\n                            'interpolate',\n                            ['linear'],\n                            ['var', 'density'],\n                            274,\n                            ['to-color', '#eff3ff'],\n                            1551,\n                            ['to-color', '#08519c']\n                        ]\n                    ]\n                ],\n                'fill-opacity': 0.7\n            }\n        });\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/zoom-and-planet-size-relation-on-globe/","title":"Zoom and planet size relation on globe","text":"<p>Explanation of zoom and planet size relation under globe projection and how to account for it when changing the map center and zoom by some delta.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Zoom and planet size relation on globe&lt;/title&gt;\n    &lt;meta property=\"og:description\" content=\"Explanation of zoom and planet size relation under globe projection and how to account for it when changing the map center and zoom by some delta.\" /&gt;\n    &lt;meta charset='utf-8'&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel='stylesheet' href='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.css' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl@5.10.0/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        body { margin: 0; padding: 0; }\n        html, body, #map { height: 99%; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;style&gt;\n    #fly {\n        display: block;\n        position: absolute;\n        top: 20px;\n        left: 50%;\n        transform: translate(-50%);\n        width: 50%;\n        height: 40px;\n        padding: 10px;\n        border: none;\n        border-radius: 3px;\n        font-size: 12px;\n        text-align: center;\n        color: #fff;\n        background: #ee8a65;\n    }\n&lt;/style&gt;\n&lt;div id=\"map\"&gt;&lt;/div&gt;\n&lt;br /&gt;\n&lt;button id=\"fly\"&gt;Go to pole or equator&lt;/button&gt;\n&lt;script&gt;\n    const map = new maplibregl.Map({\n        container: 'map',\n        style: 'https://demotiles.maplibre.org/style.json',\n        center: [0, 0],\n        zoom: 2,\n    });\n\n    map.on('style.load', () =&gt; {\n        map.setProjection({\n            type: 'globe', // Set projection to globe\n        });\n    });\n\n    // To stay consistent with web mercator maps, globe is automatically enlarged when map center is nearing the poles.\n    // This keeps the map center visually similar to a mercator map with the same x,y and zoom.\n    // However, sometimes we want to negate this effect and keep the globe size consistent even when changing latitudes.\n    // This function computes what we need to add the the target zoom level when changing latitude.\n    function getZoomAdjustment(oldLatitude, newLatitude) {\n        return Math.log2(Math.cos(newLatitude / 180 * Math.PI) / Math.cos(oldLatitude / 180 * Math.PI));\n    }\n\n    // Switch back and forth between zooming in and out.\n    let zoomIn = false;\n    const zoomDelta = 1.5;\n\n    document.getElementById('fly').addEventListener('click', () =&gt; {\n        // Fly to a random location by offsetting the point -74.50, 40\n        // by up to 5 degrees.\n        const center = [\n            map.getCenter().lng,\n            zoomIn ? 0 : 80,\n        ];\n        const mapZoom = map.getZoom();\n        const delta = (zoomIn ? zoomDelta : -zoomDelta);\n        // We want to change the map's globe size by some delta and change the center latitude at the same time,\n        // thus we need to compensate for the globe enlarging effect described earlier.\n        const zoom = map.getZoom() + delta + getZoomAdjustment(map.getCenter().lat, center[1]);\n        map.flyTo({\n            center,\n            zoom,\n            essential: true // this animation is considered essential with respect to prefers-reduced-motion\n        });\n        zoomIn = !zoomIn;\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"guides/","title":"Guides","text":"<p>This section of the docs' site is dedicated to some more complex examples and tutorials. If you have something you would like to share with the community that is not straight forward and might be beneficial to others, this is the place!</p> <p>Things that are short enough and/or with lower complexity are probably already in the Examples section, but if not, feel free to add there.</p> <p>The process of adding examples or guides is pretty straight forward, see our <code>docs</code> folder in the MapLibre GL JS repo for more information.</p>"},{"location":"guides/large-data/","title":"Optimising MapLibre Performance: Tips for Large GeoJSON Datasets","text":"<p>Performance is a critical aspect of providing users with a smooth and responsive experience. This guide focuses on techniques for improving the performance of MapLibre, particularly when dealing with large datasets in GeoJSON format. We'll categorise our strategies into two key areas:</p> <ol> <li>Loading the data</li> <li>Visualizing the data</li> </ol>"},{"location":"guides/large-data/#loading-the-data","title":"Loading the Data","text":""},{"location":"guides/large-data/#making-the-file-smaller","title":"Making the File Smaller","text":"<p>When working with large GeoJSON datasets, one of the most effective ways to enhance loading performance is to reduce the data's size. You can implement the following approaches with packages such as Turf or web tools such as Reduce GeoJSON and Mapshaper.</p>"},{"location":"guides/large-data/#removing-unused-properties","title":"Removing unused properties","text":"<p>GeoJSON files often contain numerous properties that are not essential for your map's functionality. By eliminating any unused or redundant properties, you can significantly reduce the file size, leading to faster loading times.</p>"},{"location":"guides/large-data/#reduce-precision-of-coordinates","title":"Reduce precision of coordinates","text":"<p>GeoJSON coordinates typically default to extreme precision, often with 15-17 decimal places, which is on an atomic scale. For most practical applications, you can reduce the coordinate precision to around 6 decimals, roughly equivalent to a scale of around 1cm. This reduces the file size without compromising usability.</p>"},{"location":"guides/large-data/#simplify-geometry","title":"Simplify geometry","text":"<p>If your GeoJSON contains geometries (not just points), consider using various algorithms to simplify the geometry. Tools like Mapshaper provide user-friendly interfaces for this task.</p>"},{"location":"guides/large-data/#minify","title":"Minify","text":"<p>Minifying the GeoJSON data by removing unnecessary whitespace can further decrease the file size, aiding in quicker data transmission.</p>"},{"location":"guides/large-data/#data-compression","title":"Data Compression","text":"<p>Another approach is to compress the GeoJSON data and send the zipped file to the user's browser. While this introduces a minor tradeoff between processing and file size, it's generally acceptable, considering the efficiency of modern JavaScript.</p>"},{"location":"guides/large-data/#data-chunking","title":"Data Chunking","text":"<p>If your GeoJSON dataset is still quite large after reducing its size, consider splitting it into smaller, manageable chunks. Even 2 or 3 can be beneficial. These split datasets can be added to the map as normal with <code>addSource()</code> and <code>addLayer()</code>.</p> <p>This technique can be particularly useful when there are parts of the dataset that have different properties. For example, if the map starts zoomed into an geographic area, the data within this geography could be one chunk and the rest could be another chunk. Similarly, if one part of the dataset has live updates and the rest is largely static, it could make sense to place these two parts into separate chunks.</p> <p>Data chunking is more impactful on desktop browsers than mobile browsers.</p>"},{"location":"guides/large-data/#data-streaming","title":"Data Streaming","text":"<p>Implementing data streaming techniques can further enhance loading performance. Rather than loading the entire dataset at once, data streaming allows you to load smaller portions as the user interacts with the map. This approach minimises the initial loading time and provides a more responsive experience. A template for data streaming can be found in the Live Update Features example.</p>"},{"location":"guides/large-data/#store-geojson-at-url","title":"Store GeoJSON at URL","text":"<p>For improved performance in MapLibre, it's advisable to load your GeoJSON data from a data URL rather than embedding it directly in your JavaScript code. This practice helps reduce the memory overhead on the client-side.</p>"},{"location":"guides/large-data/#vector-tiling","title":"Vector Tiling","text":"<p>Consider converting your GeoJSON data into vector tiles, which are specifically designed for efficient rendering. An example is available on how to add a vector tile source.</p>"},{"location":"guides/large-data/#tiling-on-the-server","title":"Tiling on the server","text":"<p>For even larger datasets you can use a tool like Martin to turn a database into tiles on the server side. These tiles can then be shown directly to the user. A demo of Martin shows it comfortably handling a 13GB database. However, this approach will require more setup than the others.</p>"},{"location":"guides/large-data/#visualising-the-data","title":"Visualising the Data","text":"<p>Once the data is loaded, to ensure a smooth user experience, it's essential to optimise how you visualise the data on the map.</p>"},{"location":"guides/large-data/#cluster","title":"Cluster","text":"<p>One simple approach is to visualise fewer points. If we are using a GeoJSON source (i.e. not vector tiles), we can use 'clustering' to group nearby points together. This approach reduces the number of features displayed on the map, improving rendering performance and maintaining map readability.</p> <p>To do this, when we add the data, we can adjust the cluster options. For example:</p> <pre><code>map.addSource('earthquakes', {\n            type: 'geojson',\n            data: 'https://maplibre.org/maplibre-gl-js/docs/assets/earthquakes.geojson',\n            cluster: true,\n            clusterMaxZoom: 14, // Max zoom to cluster points on\n            clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)\n        });\n</code></pre> <p>You can see a full example here: Create and style clusters.</p>"},{"location":"guides/large-data/#allow-overlap","title":"Allow Overlap","text":"<p>By default, Maplibre calculates if features such as points, texts or icons are overlapping. This can be computationally intensive, particularly when there are a lot of features. Changing the overlap mode so that all points are shown and no overlapping is checked can significantly reduce this.</p>"},{"location":"guides/large-data/#simplify-styling","title":"Simplify Styling","text":"<p>Complex and intricate map styles can slow down rendering, especially when working with large datasets. Simplify your map styles by reducing the number of layers, symbols, and complex features, and use simpler symbology where appropriate.</p>"},{"location":"guides/large-data/#zoom-levels","title":"Zoom Levels","text":"<p>Optimising your zoom levels ensures that the map loads efficiently and displays the right level of detail at different zoom levels, contributing to a smoother user experience.</p>"},{"location":"guides/large-data/#max-zoom-level","title":"Max Zoom Level","text":"<p>To improve map performance during panning and zooming, set the maxZoom option on your GeoJSON source to a value lower than the default 22. For most point sources, a maxZoom value of 12 strikes a good balance between precision and speed.</p>"},{"location":"guides/large-data/#min-zoom-level","title":"Min Zoom Level","text":"<p>Adjust the minZoom property on the layer that references the GeoJSON source to a value greater than 0. This setting prevents the map from attempting to load and render tiles at low zoom levels, which is often unnecessary because there aren't enough screen pixels to display every feature of a large dataset. By adjusting the minZoom property, you'll achieve a faster map load and improved rendering performance.</p> <p>You can implement them both as follows:</p> <pre><code>let map = new maplibregl.Map({\n  container: 'map',\n  maxZoom: 12,\n  minZoom: 5\n});\n</code></pre>"},{"location":"guides/leaflet-migration-guide/","title":"Leaflet migration guide","text":"<p>This part of the docs is dedicated to the migration from <code>leaflet</code> to <code>maplibre-gl</code>.</p> <p>This guide might not be accurate depending on the current version of <code>leaflet</code>.</p> <p>The main differences in term of functionality is the ability to support map rotation, vector tiles and globe. For large datasets MapLibre is faster due to its usage of webgl technology.</p>"},{"location":"guides/leaflet-migration-guide/#setting-up-maplibre","title":"Setting Up MapLibre","text":"<p>Install MapLibre GL JS and replace Leaflet with MapLibre in your project:</p> <pre><code>npm install maplibre-gl\n</code></pre>"},{"location":"guides/leaflet-migration-guide/#initializing-the-map","title":"Initializing the Map","text":""},{"location":"guides/leaflet-migration-guide/#leaflet","title":"Leaflet","text":"<pre><code>const map = L.map('map').setView([0, 0], 2);\n\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n  attribution: '&amp;copy; OpenStreetMap contributors'\n}).addTo(map);\n</code></pre>"},{"location":"guides/leaflet-migration-guide/#maplibre","title":"MapLibre","text":"<pre><code>import 'maplibre-gl/dist/maplibre-gl.css';\nimport {Map} from 'maplibre-gl';\n\nconst map = new Map({\n  container: 'map',\n  style: 'https://demotiles.maplibre.org/style.json',\n  center: [0, 0],\n  zoom: 2\n});\n</code></pre>"},{"location":"guides/leaflet-migration-guide/#adding-a-marker","title":"Adding a Marker","text":""},{"location":"guides/leaflet-migration-guide/#leaflet_1","title":"Leaflet","text":"<pre><code>L.marker([0, 0]).addTo(map);\n</code></pre>"},{"location":"guides/leaflet-migration-guide/#maplibre_1","title":"MapLibre","text":"<pre><code>new maplibregl.Marker()\n  .setLngLat([0, 0])\n  .addTo(map);\n</code></pre>"},{"location":"guides/leaflet-migration-guide/#adding-a-geojson-layer","title":"Adding a GeoJSON Layer","text":""},{"location":"guides/leaflet-migration-guide/#leaflet_2","title":"Leaflet","text":"<pre><code>L.geoJSON('data.geojson').addTo(map);\n</code></pre>"},{"location":"guides/leaflet-migration-guide/#maplibre_2","title":"MapLibre","text":"<pre><code>map.on('load', function () {\n  map.addSource('geojson-source', {\n    type: 'geojson',\n    data: 'data.geojson',\n  });\n\n  map.addLayer({\n    id: 'geojson-layer',\n    type: 'fill',\n    source: 'geojson-source',\n    paint: {\n      'fill-color': '#0080ff',\n      'fill-opacity': 0.5,\n    },\n  });\n});\n</code></pre>"},{"location":"guides/leaflet-migration-guide/#handling-click-events","title":"Handling Click Events","text":""},{"location":"guides/leaflet-migration-guide/#leaflet_3","title":"Leaflet","text":"<pre><code>map.on('click', function (event) {\n  console.log('Clicked coordinates:', event.latlng);\n});\n</code></pre>"},{"location":"guides/leaflet-migration-guide/#maplibre_3","title":"MapLibre","text":"<pre><code>map.on('click', function (event) {\n  console.log('Clicked coordinates:', event.lngLat);\n});\n</code></pre>"},{"location":"guides/leaflet-migration-guide/#displaying-a-popup","title":"Displaying a Popup","text":""},{"location":"guides/leaflet-migration-guide/#leaflet_4","title":"Leaflet","text":"<pre><code>L.popup()\n  .setLatLng([0, 0])\n  .setContent('Hello, Leaflet!')\n  .openOn(map);\n</code></pre>"},{"location":"guides/leaflet-migration-guide/#maplibre_4","title":"MapLibre","text":"<pre><code>new maplibregl.Popup()\n  .setLngLat([0, 0])\n  .setHTML('&lt;p&gt;Hello, MapLibre!&lt;/p&gt;')\n  .addTo(map);\n</code></pre>"},{"location":"guides/leaflet-migration-guide/#adding-a-custom-tile-layer","title":"Adding a Custom Tile Layer","text":""},{"location":"guides/leaflet-migration-guide/#leaflet_5","title":"Leaflet","text":"<pre><code>L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);\n</code></pre>"},{"location":"guides/leaflet-migration-guide/#maplibre_5","title":"MapLibre","text":"<pre><code>map.on('load', function () {\n  map.addSource('osm', {\n    type: 'raster',\n    tiles: ['https://tile.openstreetmap.org/{z}/{x}/{y}.png'],\n    tileSize: 256\n  });\n\n  map.addLayer({\n    id: 'osm-layer',\n    type: 'raster',\n    source: 'osm',\n  });\n});\n</code></pre>"},{"location":"guides/leaflet-migration-guide/#adding-a-polygon","title":"Adding a Polygon","text":""},{"location":"guides/leaflet-migration-guide/#leaflet_6","title":"Leaflet","text":"<pre><code>L.polygon([\n  [51.5, -0.1],\n  [51.5, -0.12],\n  [51.52, -0.12]\n]).addTo(map);\n</code></pre>"},{"location":"guides/leaflet-migration-guide/#maplibre_6","title":"MapLibre","text":"<pre><code>map.on('load', function () {\n  map.addSource('polygon', {\n    type: 'geojson',\n    data: {\n      type: 'Feature',\n      geometry: {\n        type: 'Polygon',\n        coordinates: [[[ -0.1, 51.5 ], [ -0.12, 51.5 ], [ -0.12, 51.52 ], [ -0.1, 51.5 ]]]\n      }\n    }\n  });\n\n  map.addLayer({\n    id: 'polygon-layer',\n    type: 'fill',\n    source: 'polygon',\n    paint: {\n      'fill-color': '#ff0000',\n      'fill-opacity': 0.5\n    }\n  });\n});\n</code></pre>"},{"location":"guides/mapbox-migration-guide/","title":"Mapbox migration guide","text":"<p>This part of the docs is dedicated to the migration from <code>mapbox-gl</code> to <code>maplibre-gl</code>.</p> <p>This guide might not be accurate depending on the current version of <code>mapbox-gl</code> but should be fairly straight forward.</p> <p>The libraries are very similar but diverge with newer features happening from v2 in both libraries where Mapbox turned proprietary.</p> <p>The overall migration happens by uninstalling <code>mapbox-gl</code> and installing <code>maplibre-gl</code> in your node packages (or see below for CDN links), and replacing <code>mapboxgl</code> with <code>maplibregl</code> throughout your TypeScript, JavaScript and HTML/CSS.</p> <pre><code>-    var map = new mapboxgl.Map({\n+    var map = new maplibregl.Map({\n\n-    &lt;button class=\"mapboxgl-ctrl\"&gt;\n+    &lt;button class=\"maplibregl-ctrl\"&gt;\n</code></pre>"},{"location":"guides/mapbox-migration-guide/#compatibility-branch","title":"Compatibility branch","text":"<p>MapLibre GL JS v1 is completely backward compatible with Mapbox GL JS v1. This compatibility branch (named 1.x) is tagged v1 on npm, and its current version is 1.15.3. </p>"},{"location":"guides/mapbox-migration-guide/#cdn-links","title":"CDN Links","text":"<p>MapLibre GL JS is distributed via unpkg.com.</p> <pre><code>-    &lt;script src=\"https://api.mapbox.com/mapbox-gl-js/v#.#.#/mapbox-gl.js\"&gt;&lt;/script&gt;\n-    &lt;link\n-      href=\"https://api.mapbox.com/mapbox-gl-js/v#.#.#/mapbox-gl.css\"\n-      rel=\"stylesheet\"\n-    /&gt;\n\n\n+    &lt;script src=\"https://unpkg.com/maplibre-gl@#.#.#/dist/maplibre-gl.js\"&gt;&lt;/script&gt;\n+    &lt;link\n+      href=\"https://unpkg.com/maplibre-gl@#.#.#/dist/maplibre-gl.css\"\n+      rel=\"stylesheet\"\n+    /&gt;\n</code></pre> <p>Don't forget to replace the version above <code>#.#.#</code> with the version you would like to use. In the upper right corner of this page you can find the number of the latest version.</p>"},{"location":"guides/openlayers-migration-guide/","title":"OpenLayers migration guide","text":"<p>This part of the docs is dedicated to the migration from <code>openlayers</code> to <code>maplibre-gl</code>.</p>"},{"location":"guides/openlayers-migration-guide/#setting-up-maplibre","title":"Setting Up MapLibre","text":"<p>Install MapLibre GL JS and replace OpenLayers with MapLibre in your project:</p> <pre><code>npm install maplibre-gl\n</code></pre>"},{"location":"guides/openlayers-migration-guide/#initializing-the-map","title":"Initializing the Map","text":""},{"location":"guides/openlayers-migration-guide/#openlayers","title":"OpenLayers","text":"<pre><code>import 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\n\nconst map = new Map({\n  target: 'map',\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n    }),\n  ],\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n</code></pre>"},{"location":"guides/openlayers-migration-guide/#maplibre","title":"MapLibre","text":"<pre><code>import 'maplibre-gl/dist/maplibre-gl.css';\nimport {Map} from 'maplibre-gl';\n\nconst map = new Map({\n  container: 'map',\n  style: 'https://demotiles.maplibre.org/style.json',\n  center: [0, 0],\n  zoom: 2\n});\n</code></pre>"},{"location":"guides/openlayers-migration-guide/#adding-a-marker","title":"Adding a Marker","text":""},{"location":"guides/openlayers-migration-guide/#openlayers_1","title":"OpenLayers","text":"<pre><code>import Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Style from 'ol/style/Style';\nimport Icon from 'ol/style/Icon';\n\nconst marker = new Feature({\n  geometry: new Point([0, 0]),\n});\n\nmarker.setStyle(new Style({\n  image: new Icon({\n    src: 'marker.png',\n    scale: 0.1,\n  }),\n}));\n\nconst vectorLayer = new VectorLayer({\n  source: new VectorSource({\n    features: [marker],\n  }),\n});\n\nmap.addLayer(vectorLayer);\n</code></pre>"},{"location":"guides/openlayers-migration-guide/#maplibre_1","title":"MapLibre","text":"<pre><code>map.on('load', function () {\n  new maplibregl.Marker({ color: 'red' })\n    .setLngLat([0, 0])\n    .addTo(map);\n});\n</code></pre>"},{"location":"guides/openlayers-migration-guide/#adding-a-geojson-layer","title":"Adding a GeoJSON Layer","text":""},{"location":"guides/openlayers-migration-guide/#openlayers_2","title":"OpenLayers","text":"<pre><code>import VectorSource from 'ol/source/Vector';\nimport VectorLayer from 'ol/layer/Vector';\nimport GeoJSON from 'ol/format/GeoJSON';\n\nconst geoJsonLayer = new VectorLayer({\n  source: new VectorSource({\n    url: 'data.geojson',\n    format: new GeoJSON(),\n  }),\n});\n\nmap.addLayer(geoJsonLayer);\n</code></pre>"},{"location":"guides/openlayers-migration-guide/#maplibre_2","title":"MapLibre","text":"<pre><code>map.on('load', function () {\n  map.addSource('geojson-source', {\n    type: 'geojson',\n    data: 'data.geojson',\n  });\n\n  map.addLayer({\n    id: 'geojson-layer',\n    type: 'fill',\n    source: 'geojson-source',\n    paint: {\n      'fill-color': '#0080ff',\n      'fill-opacity': 0.5,\n    },\n  });\n});\n</code></pre>"},{"location":"guides/openlayers-migration-guide/#handling-click-events","title":"Handling Click Events","text":""},{"location":"guides/openlayers-migration-guide/#openlayers_3","title":"OpenLayers","text":"<pre><code>map.on('click', function (event) {\n  console.log('Clicked coordinates:', event.coordinate);\n});\n</code></pre>"},{"location":"guides/openlayers-migration-guide/#maplibre_3","title":"MapLibre","text":"<pre><code>map.on('click', function (event) {\n  console.log('Clicked coordinates:', event.lngLat);\n});\n</code></pre>"},{"location":"guides/openlayers-migration-guide/#displaying-a-popup","title":"Displaying a Popup","text":""},{"location":"guides/openlayers-migration-guide/#openlayers_4","title":"OpenLayers","text":"<pre><code>import Overlay from 'ol/Overlay';\n\nconst popup = new Overlay({\n  element: document.getElementById('popup'),\n});\n\nmap.addOverlay(popup);\n\nmap.on('click', function (event) {\n  popup.setPosition(event.coordinate);\n  document.getElementById('popup-content').innerHTML = 'Hello, OpenLayers!';\n});\n</code></pre>"},{"location":"guides/openlayers-migration-guide/#maplibre_4","title":"MapLibre","text":"<pre><code>const popup = new maplibregl.Popup()\n  .setLngLat([0, 0])\n  .setHTML('&lt;p&gt;Hello, MapLibre!&lt;/p&gt;')\n  .addTo(map);\n</code></pre>"}]}