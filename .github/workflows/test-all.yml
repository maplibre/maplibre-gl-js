name: Tests

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

permissions:
  checks: write
  pull-requests: write
  contents: write

jobs:
# DEBUG #  code-hygiene:
# DEBUG #    name: Code Hygiene
# DEBUG #    runs-on: ubuntu-latest
# DEBUG #    steps:
# DEBUG #      - uses: actions/checkout@v3
# DEBUG #      - uses: actions/setup-node@v3
# DEBUG #        with:
# DEBUG #          node-version: lts/*
# DEBUG #      - run: npm ci
# DEBUG #      - run: npm run lint
# DEBUG #        if: success() || failure()
# DEBUG #      - run: npm run lint-css
# DEBUG #        if: success() || failure()
# DEBUG #      - run: npm run lint-docs
# DEBUG #        if: success() || failure()
# DEBUG #      - run: npm run typecheck
# DEBUG #        if: success() || failure()
# DEBUG #
# DEBUG #  unit-tests:
# DEBUG #    name: Unit tests and Coverage
# DEBUG #    strategy:
# DEBUG #      matrix:
# DEBUG #        os: [ubuntu-latest]
# DEBUG #    runs-on: ${{ matrix.os }}
# DEBUG #    timeout-minutes: 40
# DEBUG #    steps:
# DEBUG #      - uses: actions/checkout@v3
# DEBUG #      - uses: actions/setup-node@v3
# DEBUG #        with:
# DEBUG #          node-version: lts/*
# DEBUG #      - name: Start display server
# DEBUG #        if: runner.os == 'Linux'
# DEBUG #        run: nohup Xvfb &
# DEBUG #          echo "DISPLAY=:0" >> $GITHUB_ENV
# DEBUG #      - run: npm ci
# DEBUG #      - run: npm run jest-ci -- --coverage --coverageReporters text html-spa --selectProjects unit
# DEBUG #      - name: Upload unit test coverage
# DEBUG #        if: success() || failure()
# DEBUG #        uses: actions/upload-artifact@v3
# DEBUG #        with:
# DEBUG #          name: unit-test-coverage
# DEBUG #          path: ${{ github.workspace }}/coverage
# DEBUG #
# DEBUG #  integration-tests:
# DEBUG #    name: Integration tests
# DEBUG #    strategy:
# DEBUG #      matrix:
# DEBUG #        os: [ubuntu-latest, windows-latest]
# DEBUG #    runs-on: ${{ matrix.os }}
# DEBUG #    timeout-minutes: 40
# DEBUG #    steps:
# DEBUG #      - uses: actions/checkout@v3
# DEBUG #      - uses: actions/setup-node@v3
# DEBUG #        with:
# DEBUG #          node-version: lts/*
# DEBUG #      - run: npm ci
# DEBUG #      - run: npm run build-dist
# DEBUG #      - uses: actions/upload-artifact@v3
# DEBUG #        if: success()
# DEBUG #        with:
# DEBUG #          name: build-dist
# DEBUG #          path: dist/maplibre-gl.js
# DEBUG #      - run: npm run test-integration
# DEBUG #        if: success() || failure()

  render-tests-ubuntu:
    name: Render tests
# DEBUG #    env:
# DEBUG #      SPLIT_COUNT: 2
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
# DEBUG #        split: [0, 1]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
      - run: npm ci
      - name: Start display server
        if: runner.os == 'Linux'
        run: nohup Xvfb &
          echo "DISPLAY=:0" >> $GITHUB_ENV
      - run: npm run build-prod
      - run: npm run test-render -- --debug terrain/fill-extrusion-multiple # DEBUG #
# DEBUG #        env:
# DEBUG #          CURRENT_SPLIT_INDEX: ${{ matrix.split }}
        if: success() || failure()
      - name: Upload render test failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: render-test-report-${{ matrix.os }}-${{ matrix.split }}
          path: ${{ github.workspace }}/test/integration/render/results.html

# DEBUG #  render-tests-windows:
# DEBUG #    name: Render tests
# DEBUG #    env:
# DEBUG #      SPLIT_COUNT: 3
# DEBUG #    strategy:
# DEBUG #      fail-fast: false
# DEBUG #      matrix:
# DEBUG #        os: [windows-latest]
# DEBUG #        split: [0, 1, 2]
# DEBUG #    runs-on: ${{ matrix.os }}
# DEBUG #    timeout-minutes: 120
# DEBUG #    steps:
# DEBUG #      - uses: actions/checkout@v3
# DEBUG #      - uses: actions/setup-node@v3
# DEBUG #        with:
# DEBUG #          node-version: lts/*
# DEBUG #      - run: npm ci
# DEBUG #      - name: Start display server
# DEBUG #        if: runner.os == 'Linux'
# DEBUG #        run: nohup Xvfb &
# DEBUG #          echo "DISPLAY=:0" >> $GITHUB_ENV
# DEBUG #      - run: npm run build-prod
# DEBUG #      - run: npm run test-render
# DEBUG #        env:
# DEBUG #          CURRENT_SPLIT_INDEX: ${{ matrix.split }}
# DEBUG #        if: success() || failure()
# DEBUG #      - name: Upload render test failure
# DEBUG #        if: failure()
# DEBUG #        uses: actions/upload-artifact@v3
# DEBUG #        with:
# DEBUG #          name: render-test-report-${{ matrix.os }}-${{ matrix.split }}
# DEBUG #          path: ${{ github.workspace }}/test/integration/render/results.html
# DEBUG #
# DEBUG #  build-tests:
# DEBUG #    name: Build tests
# DEBUG #    strategy:
# DEBUG #      matrix:
# DEBUG #        os: [ubuntu-latest, windows-latest]
# DEBUG #    runs-on: ${{ matrix.os }}
# DEBUG #    steps:
# DEBUG #      - uses: actions/checkout@v3
# DEBUG #      - uses: actions/setup-node@v3
# DEBUG #        with:
# DEBUG #          node-version: lts/*
# DEBUG #      - run: npm ci
# DEBUG #      - run: npm run build-dist
# DEBUG #      - run: npm run test-build
# DEBUG #        if: success() || failure()
