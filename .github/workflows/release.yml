name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - v1.*
    paths-ignore:
      - ".github/**"
      - "**/*.md"

jobs:
  lint_build_test:
    name: Build, Lint and Test
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Use Node.js 10 x64
        uses: actions/setup-node@v2
        with:
          node-version: 10
          architecture: x64
          registry-url: 'https://registry.npmjs.org'

      - name: Install
        run: yarn install --frozen-lockfile

      - name: Validate version tag
        run: |
          node build\version-utils.js validate-latest-tag

      - name: Prepare
        id: prepare
        run: |
          $LatestVersionTag=$(node build\version-utils.js latest-version-tag)
          echo "Latest version tag=$LatestVersionTag"
          echo "::set-output name=version_tag::$LatestVersionTag"

      - name: Ensure correct revision
        run: |
          git checkout tags/${{ steps.prepare.outputs.version_tag }}

      - name: Lint
        run: |
          yarn run lint
          yarn run lint-docs
          yarn run lint-css

      - name: Test
        run: |
          yarn run test-flow
          yarn run test-unit
          yarn run test-render
          yarn run test-query
          yarn run test-expressions

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: lint_build_test
    defaults:
      run:
        shell: bash
    steps:

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Use Node.js 10 x64
        uses: actions/setup-node@v2
        with:
          node-version: 10
          architecture: x64
          registry-url: 'https://registry.npmjs.org'

      - name: Install
        run: yarn install --frozen-lockfile

      - name: Validate version tag
        run: |
          build/version-utils.js validate-latest-tag

      - name: Prepare release
        id: prepare_release
        run: |
          echo ::set-output name=version_tag::$( build/version-utils.js latest-version-tag)
          echo ::set-output name=version::$( build/version-utils.js version-from-tags)
          echo ::set-output name=release_type::$( build/version-utils.js version-type )

      - name: Ensure correct revision
        run: |
          git checkout tags/${{ steps.prepare_release.outputs.version_tag }}

      - name: Build
        run: |
          yarn run build-prod-min
          yarn run build-css

      - name: Create Archive
        run: |
          zip -r dist dist

      - name: Build Release Notes
        id: release_notes
        if: ${{ steps.prepare_release.outputs.release_type == 'regular' }}
        run: |
          RELEASE_NOTES_PATH="${PWD}/release_notes.txt"
          ./build/release-notes.js > ${RELEASE_NOTES_PATH}
          echo ::set-output name=release_notes::${RELEASE_NOTES_PATH}

      - name: Create GitHub Release (regular)
        id: create_regular_release
        if: ${{ steps.prepare_release.outputs.release_type == 'regular' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.prepare_release.outputs.version_tag }}
          release_name: ${{steps.prepare_release.outputs.version_tag }}
          body_path: ${{ steps.release_notes.outputs.release_notes }}
          draft: false
          prerelease: false

      - name: Upload GitHub Release Assets (regular)
        if: ${{ steps.prepare_release.outputs.release_type == 'regular' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_regular_release.outputs.upload_url }}
          asset_path: ./dist.zip
          asset_name: dist.zip
          asset_content_type: application/zip

      - name: Create GitHub Release (prerelease)
        id: create_prerelease
        if: ${{ steps.prepare_release.outputs.release_type == 'prerelease' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.prepare_release.outputs.version_tag }}
          release_name: ${{steps.prepare_release.outputs.version_tag }}
          draft: false
          prerelease: true

      - name: Upload GitHub Release Assets (prerelease)
        uses: actions/upload-release-asset@v1
        if: ${{ steps.prepare_release.outputs.release_type == 'prerelease' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_prerelease.outputs.upload_url }}
          asset_path: ./dist.zip
          asset_name: dist.zip
          asset_content_type: application/zip

      - name: Clean up
        if: ${{ steps.prepare_release.outputs.release_type == 'regular' }}
        run: |
          rm -f ${{ steps.prepare_release.outputs.release_notes }}

      - name: Update NPM Package Version
        run: |
          yarn version --non-interactive --no-git-tag-version --new-version ${{ steps.prepare_release.outputs.version }}

      - name: Publish NPM package
        run: |
          yarn publish --non-interactive --tag v1
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ORG_TOKEN }}
