name: Release

on:
  workflow_dispatch

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: main

      - name: Use Node.js 16 x64
        uses: actions/setup-node@v2
        with:
          node-version: 16
          architecture: x64
          registry-url: 'https://registry.npmjs.org'

      - name: Get version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.1.0

      - name: Check tag does not exist yet
        run: if git rev-list v${{ steps.package-version.outputs.current-version }}; then echo "Tag already exists. Aborting the release process."; exit 1; fi

      - name: Tag commit and push
        uses: mathieudutour/github-tag-action@v5.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.package-version.outputs.current-version }}

      - name: Install
        run: npm ci

      - name: Prepare release
        id: prepare_release
        run: |
          echo ::set-output name=version_tag::v${{ steps.package-version.outputs.current-version }}
          echo ::set-output name=release_type::$(node -e "console.log(require('semver').prerelease('${{ steps.package-version.outputs.current-version }}') ? 'prerelease' : 'regular')")

      - name: Build
        run: |
          npm run build-prod-min
          npm run build-css
          npm run build-benchmarks

      - name: Create Archive
        run: |
          zip -r dist dist

      - name: Build Release Notes
        id: release_notes
        if: ${{ steps.prepare_release.outputs.release_type == 'regular' }}
        run: |
          RELEASE_NOTES_PATH="${PWD}/release_notes.txt"
          ./build/release-notes.js > ${RELEASE_NOTES_PATH}
          echo ::set-output name=release_notes::${RELEASE_NOTES_PATH}

      - name: Create GitHub Release (regular)
        id: create_regular_release
        if: ${{ steps.prepare_release.outputs.release_type == 'regular' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.prepare_release.outputs.version_tag }}
          release_name: ${{steps.prepare_release.outputs.version_tag }}
          body_path: ${{ steps.release_notes.outputs.release_notes }}
          draft: false
          prerelease: false

      - name: Upload GitHub Release Assets (regular)
        if: ${{ steps.prepare_release.outputs.release_type == 'regular' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_regular_release.outputs.upload_url }}
          asset_path: ./dist.zip
          asset_name: dist.zip
          asset_content_type: application/zip

      - name: Create GitHub Release (prerelease)
        id: create_prerelease
        if: ${{ steps.prepare_release.outputs.release_type == 'prerelease' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.prepare_release.outputs.version_tag }}
          release_name: ${{steps.prepare_release.outputs.version_tag }}
          draft: false
          prerelease: true

      - name: Upload GitHub Release Assets (prerelease)
        uses: actions/upload-release-asset@v1
        if: ${{ steps.prepare_release.outputs.release_type == 'prerelease' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_prerelease.outputs.upload_url }}
          asset_path: ./dist.zip
          asset_name: dist.zip
          asset_content_type: application/zip

      - name: Copy benchmarks_generated.js
        run: |
          mkdir tmp
          cp bench/versions/benchmarks_generated.js tmp
          cp bench/versions/benchmarks_generated.js.map tmp

      - name: Upload Benchmarks to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: tmp
          destination_dir: benchmarks/${{ steps.prepare_release.outputs.version_tag }}

      - name: Clean up
        if: ${{ steps.prepare_release.outputs.release_type == 'regular' }}
        run: |
          rm -f ${{ steps.prepare_release.outputs.release_notes }}

      - name: Publish NPM package (regular)
        if: ${{ steps.prepare_release.outputs.release_type == 'regular' }}
        run: |
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ORG_TOKEN }}

      - name: Publish NPM package (pre-release)
        if: ${{ steps.prepare_release.outputs.release_type == 'prerelease' }}
        run: |
          npm publish --tag next
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ORG_TOKEN }}
