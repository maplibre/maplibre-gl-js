// Generated by dts-bundle-generator v6.5.0

import Point from '@mapbox/point-geometry';

/**
 * Format a MapLibre GL Style.  Returns a stringified style with its keys
 * sorted in the same order as the reference style.
 *
 * The optional `space` argument is passed to
 * [`JSON.stringify`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify)
 * to generate formatted output.
 *
 * If `space` is unspecified, a default of `2` spaces will be used.
 *
 * @private
 * @param {Object} style a MapLibre GL Style
 * @param {number} [space] space argument to pass to `JSON.stringify`
 * @returns {string} stringified formatted JSON
 * @example
 * var fs = require('fs');
 * var format = require('maplibre-gl-style-spec').format;
 * var style = fs.readFileSync('./source.json', 'utf8');
 * fs.writeFileSync('./dest.json', format(style));
 * fs.writeFileSync('./dest.min.json', format(style, 0));
 */
export declare function format(style: any, space?: number): string;
/**
 * Migrate a Mapbox GL Style to the latest version.
 *
 * @private
 * @alias migrate
 * @param {object} style a Mapbox GL Style
 * @returns {Object} a migrated style
 * @example
 * var fs = require('fs');
 * var migrate = require('maplibre-gl-style-spec').migrate;
 * var style = fs.readFileSync('./style.json', 'utf8');
 * fs.writeFileSync('./style.json', JSON.stringify(migrate(style)));
 */
export function migrate(style: any): any;
export function composite(style: any): any;
/**
 * Given an array of layers, some of which may contain `ref` properties
 * whose value is the `id` of another property, return a new array where
 * such layers have been augmented with the 'type', 'source', etc. properties
 * from the parent layer, and the `ref` property has been removed.
 *
 * The input is not modified. The output may contain references to portions
 * of the input.
 *
 * @private
 * @param {Array<Layer>} layers
 * @returns {Array<Layer>}
 */
export declare function derefLayers(layers: any): any;
declare function diffStyles(before: any, after: any): any[];
export export declare class ValidationError {
	message: string;
	identifier: string;
	line: number;
	constructor(key: string, value: {
		__line__: number;
	}, message: string, identifier?: string | null);
}
export export declare class ParsingError {
	message: string;
	error: Error;
	line: number;
	constructor(error: Error);
}
export declare class ExpressionParsingError extends Error {
	key: string;
	message: string;
	constructor(key: string, message: string);
}
/**
 * An RGBA color value. Create instances from color strings using the static
 * method `Color.parse`. The constructor accepts RGB channel values in the range
 * `[0, 1]`, premultiplied by A.
 *
 * @param {number} r The red channel.
 * @param {number} g The green channel.
 * @param {number} b The blue channel.
 * @param {number} a The alpha channel.
 * @private
 */
export export declare class Color {
	r: number;
	g: number;
	b: number;
	a: number;
	constructor(r: number, g: number, b: number, a?: number);
	static black: Color;
	static white: Color;
	static transparent: Color;
	static red: Color;
	/**
	 * Parses valid CSS color strings and returns a `Color` instance.
	 * @returns A `Color` instance, or `undefined` if the input is not a valid color string.
	 */
	static parse(input?: string | Color | null): Color | void;
	/**
	 * Returns an RGBA string representing the color value.
	 *
	 * @returns An RGBA string.
	 * @example
	 * var purple = new Color.parse('purple');
	 * purple.toString; // = "rgba(128,0,128,1)"
	 * var translucentGreen = new Color.parse('rgba(26, 207, 26, .73)');
	 * translucentGreen.toString(); // = "rgba(26,207,26,0.73)"
	 */
	toString(): string;
	toArray(): [
		number,
		number,
		number,
		number
	];
}
export declare class Intl$Collator {
	constructor(locales?: string | string[], options?: CollatorOptions);
	compare(a: string, b: string): number;
	resolvedOptions(): any;
}
export declare type CollatorOptions = {
	localeMatcher?: "lookup" | "best fit";
	usage?: "sort" | "search";
	sensitivity?: "base" | "accent" | "case" | "variant";
	ignorePunctuation?: boolean;
	numeric?: boolean;
	caseFirst?: "upper" | "lower" | "false";
};
export declare class Collator {
	locale: string | null;
	sensitivity: "base" | "accent" | "case" | "variant";
	collator: Intl$Collator;
	constructor(caseSensitive: boolean, diacriticSensitive: boolean, locale: string | null);
	compare(lhs: string, rhs: string): number;
	resolvedLocale(): string;
}
export declare type ResolvedImageOptions = {
	name: string;
	available: boolean;
};
export declare class ResolvedImage {
	name: string;
	available: boolean;
	constructor(options: ResolvedImageOptions);
	toString(): string;
	static fromString(name: string): ResolvedImage | null;
	serialize(): Array<string>;
}
export declare class FormattedSection {
	text: string;
	image: ResolvedImage | null;
	scale: number | null;
	fontStack: string | null;
	textColor: Color | null;
	constructor(text: string, image: ResolvedImage | null, scale: number | null, fontStack: string | null, textColor: Color | null);
}
export declare class Formatted {
	sections: Array<FormattedSection>;
	constructor(sections: Array<FormattedSection>);
	static fromString(unformatted: string): Formatted;
	isEmpty(): boolean;
	static factory(text: Formatted | string): Formatted;
	toString(): string;
	serialize(): Array<unknown>;
}
export declare type NullTypeT = {
	kind: "null";
};
export declare type NumberTypeT = {
	kind: "number";
};
export declare type StringTypeT = {
	kind: "string";
};
export declare type BooleanTypeT = {
	kind: "boolean";
};
export declare type ColorTypeT = {
	kind: "color";
};
export declare type ObjectTypeT = {
	kind: "object";
};
export declare type ValueTypeT = {
	kind: "value";
};
export declare type ErrorTypeT = {
	kind: "error";
};
export declare type CollatorTypeT = {
	kind: "collator";
};
export declare type FormattedTypeT = {
	kind: "formatted";
};
export declare type ResolvedImageTypeT = {
	kind: "resolvedImage";
};
export declare type EvaluationKind = "constant" | "source" | "camera" | "composite";
export declare type Type = NullTypeT | NumberTypeT | StringTypeT | BooleanTypeT | ColorTypeT | ObjectTypeT | ValueTypeT | // eslint-disable-line no-use-before-define
ArrayType | ErrorTypeT | CollatorTypeT | FormattedTypeT | ResolvedImageTypeT;
export declare type ArrayType = {
	kind: "array";
	itemType: Type;
	N: number;
};
export declare type Value = null | string | boolean | number | Color | Collator | Formatted | ResolvedImage | ReadonlyArray<Value> | {
	readonly [x: string]: Value;
};
export declare class LngLatBounds {
	_ne: LngLat;
	_sw: LngLat;
	constructor(sw?: any, ne?: any);
	/**
	 * Set the northeast corner of the bounding box
	 *
	 * @param {LngLatLike} ne a {@link LngLatLike} object describing the northeast corner of the bounding box.
	 * @returns {LngLatBounds} `this`
	 */
	setNorthEast(ne: LngLatLike): this;
	/**
	 * Set the southwest corner of the bounding box
	 *
	 * @param {LngLatLike} sw a {@link LngLatLike} object describing the southwest corner of the bounding box.
	 * @returns {LngLatBounds} `this`
	 */
	setSouthWest(sw: LngLatLike): this;
	/**
	 * Extend the bounds to include a given LngLatLike or LngLatBoundsLike.
	 *
	 * @param {LngLatLike|LngLatBoundsLike} obj object to extend to
	 * @returns {LngLatBounds} `this`
	 */
	extend(obj: LngLatLike | LngLatBoundsLike): any;
	/**
	 * Returns the geographical coordinate equidistant from the bounding box's corners.
	 *
	 * @returns {LngLat} The bounding box's center.
	 * @example
	 * var llb = new maplibregl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.getCenter(); // = LngLat {lng: -73.96365, lat: 40.78315}
	 */
	getCenter(): LngLat;
	/**
	 * Returns the southwest corner of the bounding box.
	 *
	 * @returns {LngLat} The southwest corner of the bounding box.
	 */
	getSouthWest(): LngLat;
	/**
	 * Returns the northeast corner of the bounding box.
	 *
	 * @returns {LngLat} The northeast corner of the bounding box.
	 */
	getNorthEast(): LngLat;
	/**
	 * Returns the northwest corner of the bounding box.
	 *
	 * @returns {LngLat} The northwest corner of the bounding box.
	 */
	getNorthWest(): LngLat;
	/**
	 * Returns the southeast corner of the bounding box.
	 *
	 * @returns {LngLat} The southeast corner of the bounding box.
	 */
	getSouthEast(): LngLat;
	/**
	 * Returns the west edge of the bounding box.
	 *
	 * @returns {number} The west edge of the bounding box.
	 */
	getWest(): number;
	/**
	 * Returns the south edge of the bounding box.
	 *
	 * @returns {number} The south edge of the bounding box.
	 */
	getSouth(): number;
	/**
	 * Returns the east edge of the bounding box.
	 *
	 * @returns {number} The east edge of the bounding box.
	 */
	getEast(): number;
	/**
	 * Returns the north edge of the bounding box.
	 *
	 * @returns {number} The north edge of the bounding box.
	 */
	getNorth(): number;
	/**
	 * Returns the bounding box represented as an array.
	 *
	 * @returns {Array<Array<number>>} The bounding box represented as an array, consisting of the
	 *   southwest and northeast coordinates of the bounding represented as arrays of numbers.
	 * @example
	 * var llb = new maplibregl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.toArray(); // = [[-73.9876, 40.7661], [-73.9397, 40.8002]]
	 */
	toArray(): number[][];
	/**
	 * Return the bounding box represented as a string.
	 *
	 * @returns {string} The bounding box represents as a string of the format
	 *   `'LngLatBounds(LngLat(lng, lat), LngLat(lng, lat))'`.
	 * @example
	 * var llb = new maplibregl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.toString(); // = "LngLatBounds(LngLat(-73.9876, 40.7661), LngLat(-73.9397, 40.8002))"
	 */
	toString(): string;
	/**
	 * Check if the bounding box is an empty/`null`-type box.
	 *
	 * @returns {boolean} True if bounds have been defined, otherwise false.
	 */
	isEmpty(): boolean;
	/**
	 * Check if the point is within the bounding box.
	 *
	 * @param {LngLatLike} lnglat geographic point to check against.
	 * @returns {boolean} True if the point is within the bounding box.
	 * @example
	 * var llb = new maplibregl.LngLatBounds(
	 *   new maplibregl.LngLat(-73.9876, 40.7661),
	 *   new maplibregl.LngLat(-73.9397, 40.8002)
	 * );
	 *
	 * var ll = new maplibregl.LngLat(-73.9567, 40.7789);
	 *
	 * console.log(llb.contains(ll)); // = true
	 */
	contains(lnglat: LngLatLike): boolean;
	/**
	 * Converts an array to a `LngLatBounds` object.
	 *
	 * If a `LngLatBounds` object is passed in, the function returns it unchanged.
	 *
	 * Internally, the function calls `LngLat#convert` to convert arrays to `LngLat` values.
	 *
	 * @param {LngLatBoundsLike} input An array of two coordinates to convert, or a `LngLatBounds` object to return.
	 * @returns {LngLatBounds} A new `LngLatBounds` object, if a conversion occurred, or the original `LngLatBounds` object.
	 * @example
	 * var arr = [[-73.9876, 40.7661], [-73.9397, 40.8002]];
	 * var llb = maplibregl.LngLatBounds.convert(arr);
	 * llb;   // = LngLatBounds {_sw: LngLat {lng: -73.9876, lat: 40.7661}, _ne: LngLat {lng: -73.9397, lat: 40.8002}}
	 */
	static convert(input: LngLatBoundsLike): LngLatBounds;
}
/**
 * A {@link LngLatBounds} object, an array of {@link LngLatLike} objects in [sw, ne] order,
 * or an array of numbers in [west, south, east, north] order.
 *
 * @typedef {LngLatBounds | [LngLatLike, LngLatLike] | [number, number, number, number]} LngLatBoundsLike
 * @example
 * var v1 = new maplibregl.LngLatBounds(
 *   new maplibregl.LngLat(-73.9876, 40.7661),
 *   new maplibregl.LngLat(-73.9397, 40.8002)
 * );
 * var v2 = new maplibregl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002])
 * var v3 = [[-73.9876, 40.7661], [-73.9397, 40.8002]];
 */
export declare type LngLatBoundsLike = LngLatBounds | [
	LngLatLike,
	LngLatLike
] | [
	number,
	number,
	number,
	number
];
export declare class LngLat {
	lng: number;
	lat: number;
	constructor(lng: number, lat: number);
	/**
	 * Returns a new `LngLat` object whose longitude is wrapped to the range (-180, 180).
	 *
	 * @returns {LngLat} The wrapped `LngLat` object.
	 * @example
	 * var ll = new maplibregl.LngLat(286.0251, 40.7736);
	 * var wrapped = ll.wrap();
	 * wrapped.lng; // = -73.9749
	 */
	wrap(): LngLat;
	/**
	 * Returns the coordinates represented as an array of two numbers.
	 *
	 * @returns {Array<number>} The coordinates represeted as an array of longitude and latitude.
	 * @example
	 * var ll = new maplibregl.LngLat(-73.9749, 40.7736);
	 * ll.toArray(); // = [-73.9749, 40.7736]
	 */
	toArray(): number[];
	/**
	 * Returns the coordinates represent as a string.
	 *
	 * @returns {string} The coordinates represented as a string of the format `'LngLat(lng, lat)'`.
	 * @example
	 * var ll = new maplibregl.LngLat(-73.9749, 40.7736);
	 * ll.toString(); // = "LngLat(-73.9749, 40.7736)"
	 */
	toString(): string;
	/**
	 * Returns the approximate distance between a pair of coordinates in meters
	 * Uses the Haversine Formula (from R.W. Sinnott, "Virtues of the Haversine", Sky and Telescope, vol. 68, no. 2, 1984, p. 159)
	 *
	 * @param {LngLat} lngLat coordinates to compute the distance to
	 * @returns {number} Distance in meters between the two coordinates.
	 * @example
	 * var new_york = new maplibregl.LngLat(-74.0060, 40.7128);
	 * var los_angeles = new maplibregl.LngLat(-118.2437, 34.0522);
	 * new_york.distanceTo(los_angeles); // = 3935751.690893987, "true distance" using a non-spherical approximation is ~3966km
	 */
	distanceTo(lngLat: LngLat): number;
	/**
	 * Returns a `LngLatBounds` from the coordinates extended by a given `radius`. The returned `LngLatBounds` completely contains the `radius`.
	 *
	 * @param {number} [radius=0] Distance in meters from the coordinates to extend the bounds.
	 * @returns {LngLatBounds} A new `LngLatBounds` object representing the coordinates extended by the `radius`.
	 * @example
	 * var ll = new maplibregl.LngLat(-73.9749, 40.7736);
	 * ll.toBounds(100).toArray(); // = [[-73.97501862141328, 40.77351016847229], [-73.97478137858673, 40.77368983152771]]
	 */
	toBounds(radius?: number): LngLatBounds;
	/**
	 * Converts an array of two numbers or an object with `lng` and `lat` or `lon` and `lat` properties
	 * to a `LngLat` object.
	 *
	 * If a `LngLat` object is passed in, the function returns it unchanged.
	 *
	 * @param {LngLatLike} input An array of two numbers or object to convert, or a `LngLat` object to return.
	 * @returns {LngLat} A new `LngLat` object, if a conversion occurred, or the original `LngLat` object.
	 * @example
	 * var arr = [-73.9749, 40.7736];
	 * var ll = maplibregl.LngLat.convert(arr);
	 * ll;   // = LngLat {lng: -73.9749, lat: 40.7736}
	 */
	static convert(input: LngLatLike): LngLat;
}
/**
 * A {@link LngLat} object, an array of two numbers representing longitude and latitude,
 * or an object with `lng` and `lat` or `lon` and `lat` properties.
 *
 * @typedef {LngLat | {lng: number, lat: number} | {lon: number, lat: number} | [number, number]} LngLatLike
 * @example
 * var v1 = new maplibregl.LngLat(-122.420679, 37.772537);
 * var v2 = [-122.420679, 37.772537];
 * var v3 = {lon: -122.420679, lat: 37.772537};
 */
export declare type LngLatLike = LngLat | {
	lng: number;
	lat: number;
} | {
	lon: number;
	lat: number;
} | [
	number,
	number
];
export declare class MercatorCoordinate {
	x: number;
	y: number;
	z: number;
	constructor(x: number, y: number, z?: number);
	/**
	 * Project a `LngLat` to a `MercatorCoordinate`.
	 *
	 * @param {LngLatLike} lngLatLike The location to project.
	 * @param {number} altitude The altitude in meters of the position.
	 * @returns {MercatorCoordinate} The projected mercator coordinate.
	 * @example
	 * var coord = maplibregl.MercatorCoordinate.fromLngLat({ lng: 0, lat: 0}, 0);
	 * coord; // MercatorCoordinate(0.5, 0.5, 0)
	 */
	static fromLngLat(lngLatLike: LngLatLike, altitude?: number): MercatorCoordinate;
	/**
	 * Returns the `LngLat` for the coordinate.
	 *
	 * @returns {LngLat} The `LngLat` object.
	 * @example
	 * var coord = new maplibregl.MercatorCoordinate(0.5, 0.5, 0);
	 * var lngLat = coord.toLngLat(); // LngLat(0, 0)
	 */
	toLngLat(): LngLat;
	/**
	 * Returns the altitude in meters of the coordinate.
	 *
	 * @returns {number} The altitude in meters.
	 * @example
	 * var coord = new maplibregl.MercatorCoordinate(0, 0, 0.02);
	 * coord.toAltitude(); // 6914.281956295339
	 */
	toAltitude(): number;
	/**
	 * Returns the distance of 1 meter in `MercatorCoordinate` units at this latitude.
	 *
	 * For coordinates in real world units using meters, this naturally provides the scale
	 * to transform into `MercatorCoordinate`s.
	 *
	 * @returns {number} Distance of 1 meter in `MercatorCoordinate` units.
	 */
	meterInMercatorCoordinateUnits(): number;
}
export declare class CanonicalTileID {
	z: number;
	x: number;
	y: number;
	key: string;
	constructor(z: number, x: number, y: number);
	equals(id: CanonicalTileID): boolean;
	url(urls: Array<string>, pixelRatio: number, scheme?: string | null): string;
	getTilePoint(coord: MercatorCoordinate): Point;
	toString(): string;
}
export declare class EvaluationContext {
	globals: GlobalProperties;
	feature: Feature;
	featureState: FeatureState;
	formattedSection: FormattedSection;
	availableImages: Array<string>;
	canonical: CanonicalTileID;
	_parseColorCache: {
		[_: string]: Color;
	};
	constructor();
	id(): any;
	geometryType(): string;
	geometry(): import("@mapbox/point-geometry")[][];
	canonicalID(): CanonicalTileID;
	properties(): {
		[_: string]: any;
	};
	parseColor(input: string): Color;
}
export declare type SerializedExpression = Array<unknown> | string | number | boolean | null;
export interface Expression {
	readonly type: Type;
	evaluate(ctx: EvaluationContext): any;
	eachChild(fn: (a: Expression) => void): void;
	/**
	 * Statically analyze the expression, attempting to enumerate possible outputs. Returns
	 * false if the complete set of outputs is statically undecidable, otherwise true.
	 */
	outputDefined(): boolean;
	serialize(): SerializedExpression;
}
/**
 * A type used for returning and propagating errors. The first element of the union
 * represents success and contains a value, and the second represents an error and
 * contains an error value.
 * @private
 */
export declare type Result<T, E> = {
	result: "success";
	value: T;
} | {
	result: "error";
	value: E;
};
export declare type InterpolationType = {
	name: "linear";
} | {
	name: "exponential";
	base: number;
} | {
	name: "cubic-bezier";
	controlPoints: [
		number,
		number,
		number,
		number
	];
};
export declare type ColorSpecification = string;
export declare type FormattedSpecification = string;
export declare type ResolvedImageSpecification = string;
export declare type PromoteIdSpecification = {
	[_: string]: string;
} | string;
export declare type FilterSpecificationInputType = string | number | boolean;
export declare type FilterSpecification = [
	"at",
	number,
	(number | string)[]
] | [
	"get",
	string,
	Record<string, unknown>?
] | [
	"has",
	string,
	Record<string, unknown>?
] | [
	"in",
	...FilterSpecificationInputType[],
	FilterSpecificationInputType | FilterSpecificationInputType[]
] | [
	"index-of",
	FilterSpecificationInputType,
	FilterSpecificationInputType | FilterSpecificationInputType[]
] | [
	"length",
	string | string[]
] | [
	"slice",
	string | string[],
	number
] | [
	"!",
	FilterSpecification
] | [
	"!=",
	string | FilterSpecification,
	FilterSpecificationInputType
] | [
	"<",
	string | FilterSpecification,
	FilterSpecificationInputType
] | [
	"<=",
	string | FilterSpecification,
	FilterSpecificationInputType
] | [
	"==",
	string | FilterSpecification,
	FilterSpecificationInputType
] | [
	">",
	string | FilterSpecification,
	FilterSpecificationInputType
] | [
	">=",
	string | FilterSpecification,
	FilterSpecificationInputType
] | [
	"all",
	...FilterSpecification[],
	FilterSpecificationInputType
] | [
	"any",
	...FilterSpecification[],
	FilterSpecificationInputType
] | [
	"case",
	...FilterSpecification[],
	FilterSpecificationInputType
] | [
	"coalesce",
	...FilterSpecification[],
	FilterSpecificationInputType
] | [
	"match",
	...FilterSpecification[],
	FilterSpecificationInputType
] | [
	"within",
	...FilterSpecification[],
	FilterSpecificationInputType
] | [
	"!in",
	...FilterSpecification[],
	FilterSpecificationInputType
] | [
	"!has",
	...FilterSpecification[],
	FilterSpecificationInputType
] | [
	"none",
	...FilterSpecification[],
	FilterSpecificationInputType
] | Array<string | FilterSpecification>;
export declare type TransitionSpecification = {
	duration?: number;
	delay?: number;
};
export declare type CameraFunctionSpecification<T> = {
	type: "exponential";
	stops: Array<[
		number,
		T
	]>;
} | {
	type: "interval";
	stops: Array<[
		number,
		T
	]>;
};
export declare type SourceFunctionSpecification<T> = {
	type: "exponential";
	stops: Array<[
		number,
		T
	]>;
	property: string;
	default?: T;
} | {
	type: "interval";
	stops: Array<[
		number,
		T
	]>;
	property: string;
	default?: T;
} | {
	type: "categorical";
	stops: Array<[
		string | number | boolean,
		T
	]>;
	property: string;
	default?: T;
} | {
	type: "identity";
	property: string;
	default?: T;
};
export declare type CompositeFunctionSpecification<T> = {
	type: "exponential";
	stops: Array<[
		{
			zoom: number;
			value: number;
		},
		T
	]>;
	property: string;
	default?: T;
} | {
	type: "interval";
	stops: Array<[
		{
			zoom: number;
			value: number;
		},
		T
	]>;
	property: string;
	default?: T;
} | {
	type: "categorical";
	stops: Array<[
		{
			zoom: number;
			value: string | number | boolean;
		},
		T
	]>;
	property: string;
	default?: T;
};
export declare type ExpressionSpecificationArray = Array<unknown>;
export declare type PropertyValueSpecification<T> = T | CameraFunctionSpecification<T> | ExpressionSpecificationArray;
export declare type DataDrivenPropertyValueSpecification<T> = T | CameraFunctionSpecification<T> | SourceFunctionSpecification<T> | CompositeFunctionSpecification<T> | ExpressionSpecificationArray;
export declare type StyleSpecification = {
	"version": 8;
	"name"?: string;
	"metadata"?: unknown;
	"center"?: Array<number>;
	"zoom"?: number;
	"bearing"?: number;
	"pitch"?: number;
	"light"?: LightSpecification;
	"sources": {
		[_: string]: SourceSpecification;
	};
	"sprite"?: string;
	"glyphs"?: string;
	"transition"?: TransitionSpecification;
	"layers": Array<LayerSpecification>;
};
export declare type LightSpecification = {
	"anchor"?: PropertyValueSpecification<"map" | "viewport">;
	"position"?: PropertyValueSpecification<[
		number,
		number,
		number
	]>;
	"color"?: PropertyValueSpecification<ColorSpecification>;
	"intensity"?: PropertyValueSpecification<number>;
};
export declare type VectorSourceSpecification = {
	"type": "vector";
	"url"?: string;
	"tiles"?: Array<string>;
	"bounds"?: [
		number,
		number,
		number,
		number
	];
	"scheme"?: "xyz" | "tms";
	"minzoom"?: number;
	"maxzoom"?: number;
	"attribution"?: string;
	"promoteId"?: PromoteIdSpecification;
	"volatile"?: boolean;
};
export declare type RasterSourceSpecification = {
	"type": "raster";
	"url"?: string;
	"tiles"?: Array<string>;
	"bounds"?: [
		number,
		number,
		number,
		number
	];
	"minzoom"?: number;
	"maxzoom"?: number;
	"tileSize"?: number;
	"scheme"?: "xyz" | "tms";
	"attribution"?: string;
	"volatile"?: boolean;
};
export declare type RasterDEMSourceSpecification = {
	"type": "raster-dem";
	"url"?: string;
	"tiles"?: Array<string>;
	"bounds"?: [
		number,
		number,
		number,
		number
	];
	"minzoom"?: number;
	"maxzoom"?: number;
	"tileSize"?: number;
	"attribution"?: string;
	"encoding"?: "terrarium" | "mapbox";
	"volatile"?: boolean;
};
export declare type GeoJSONSourceSpecification = {
	"type": "geojson";
	"data"?: unknown;
	"maxzoom"?: number;
	"attribution"?: string;
	"buffer"?: number;
	"filter"?: unknown;
	"tolerance"?: number;
	"cluster"?: boolean;
	"clusterRadius"?: number;
	"clusterMaxZoom"?: number;
	"clusterMinPoints"?: number;
	"clusterProperties"?: unknown;
	"lineMetrics"?: boolean;
	"generateId"?: boolean;
	"promoteId"?: PromoteIdSpecification;
};
export declare type VideoSourceSpecification = {
	"type": "video";
	"urls": Array<string>;
	"coordinates": [
		[
			number,
			number
		],
		[
			number,
			number
		],
		[
			number,
			number
		],
		[
			number,
			number
		]
	];
};
export declare type ImageSourceSpecification = {
	"type": "image";
	"url": string;
	"coordinates": [
		[
			number,
			number
		],
		[
			number,
			number
		],
		[
			number,
			number
		],
		[
			number,
			number
		]
	];
};
export declare type SourceSpecification = VectorSourceSpecification | RasterSourceSpecification | RasterDEMSourceSpecification | GeoJSONSourceSpecification | VideoSourceSpecification | ImageSourceSpecification;
export declare type FillLayerSpecification = {
	"id": string;
	"type": "fill";
	"metadata"?: unknown;
	"source": string;
	"source-layer"?: string;
	"minzoom"?: number;
	"maxzoom"?: number;
	"filter"?: FilterSpecification;
	"layout"?: {
		"fill-sort-key"?: DataDrivenPropertyValueSpecification<number>;
		"visibility"?: "visible" | "none";
	};
	"paint"?: {
		"fill-antialias"?: PropertyValueSpecification<boolean>;
		"fill-opacity"?: DataDrivenPropertyValueSpecification<number>;
		"fill-color"?: DataDrivenPropertyValueSpecification<ColorSpecification>;
		"fill-outline-color"?: DataDrivenPropertyValueSpecification<ColorSpecification>;
		"fill-translate"?: PropertyValueSpecification<[
			number,
			number
		]>;
		"fill-translate-anchor"?: PropertyValueSpecification<"map" | "viewport">;
		"fill-pattern"?: DataDrivenPropertyValueSpecification<ResolvedImageSpecification>;
	};
};
export declare type LineLayerSpecification = {
	"id": string;
	"type": "line";
	"metadata"?: unknown;
	"source": string;
	"source-layer"?: string;
	"minzoom"?: number;
	"maxzoom"?: number;
	"filter"?: FilterSpecification;
	"layout"?: {
		"line-cap"?: PropertyValueSpecification<"butt" | "round" | "square">;
		"line-join"?: DataDrivenPropertyValueSpecification<"bevel" | "round" | "miter">;
		"line-miter-limit"?: PropertyValueSpecification<number>;
		"line-round-limit"?: PropertyValueSpecification<number>;
		"line-sort-key"?: DataDrivenPropertyValueSpecification<number>;
		"visibility"?: "visible" | "none";
	};
	"paint"?: {
		"line-opacity"?: DataDrivenPropertyValueSpecification<number>;
		"line-color"?: DataDrivenPropertyValueSpecification<ColorSpecification>;
		"line-translate"?: PropertyValueSpecification<[
			number,
			number
		]>;
		"line-translate-anchor"?: PropertyValueSpecification<"map" | "viewport">;
		"line-width"?: DataDrivenPropertyValueSpecification<number>;
		"line-gap-width"?: DataDrivenPropertyValueSpecification<number>;
		"line-offset"?: DataDrivenPropertyValueSpecification<number>;
		"line-blur"?: DataDrivenPropertyValueSpecification<number>;
		"line-dasharray"?: PropertyValueSpecification<Array<number>>;
		"line-pattern"?: DataDrivenPropertyValueSpecification<ResolvedImageSpecification>;
		"line-gradient"?: ExpressionSpecificationArray;
	};
};
export declare type SymbolLayerSpecification = {
	"id": string;
	"type": "symbol";
	"metadata"?: unknown;
	"source": string;
	"source-layer"?: string;
	"minzoom"?: number;
	"maxzoom"?: number;
	"filter"?: FilterSpecification;
	"layout"?: {
		"symbol-placement"?: PropertyValueSpecification<"point" | "line" | "line-center">;
		"symbol-spacing"?: PropertyValueSpecification<number>;
		"symbol-avoid-edges"?: PropertyValueSpecification<boolean>;
		"symbol-sort-key"?: DataDrivenPropertyValueSpecification<number>;
		"symbol-z-order"?: PropertyValueSpecification<"auto" | "viewport-y" | "source">;
		"icon-allow-overlap"?: PropertyValueSpecification<boolean>;
		"icon-overlap"?: PropertyValueSpecification<"never" | "always" | "cooperative">;
		"icon-ignore-placement"?: PropertyValueSpecification<boolean>;
		"icon-optional"?: PropertyValueSpecification<boolean>;
		"icon-rotation-alignment"?: PropertyValueSpecification<"map" | "viewport" | "auto">;
		"icon-size"?: DataDrivenPropertyValueSpecification<number>;
		"icon-text-fit"?: PropertyValueSpecification<"none" | "width" | "height" | "both">;
		"icon-text-fit-padding"?: PropertyValueSpecification<[
			number,
			number,
			number,
			number
		]>;
		"icon-image"?: DataDrivenPropertyValueSpecification<ResolvedImageSpecification>;
		"icon-rotate"?: DataDrivenPropertyValueSpecification<number>;
		"icon-padding"?: PropertyValueSpecification<number>;
		"icon-keep-upright"?: PropertyValueSpecification<boolean>;
		"icon-offset"?: DataDrivenPropertyValueSpecification<[
			number,
			number
		]>;
		"icon-anchor"?: DataDrivenPropertyValueSpecification<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">;
		"icon-pitch-alignment"?: PropertyValueSpecification<"map" | "viewport" | "auto">;
		"text-pitch-alignment"?: PropertyValueSpecification<"map" | "viewport" | "auto">;
		"text-rotation-alignment"?: PropertyValueSpecification<"map" | "viewport" | "viewport-glyph" | "auto">;
		"text-field"?: DataDrivenPropertyValueSpecification<FormattedSpecification>;
		"text-font"?: DataDrivenPropertyValueSpecification<Array<string>>;
		"text-size"?: DataDrivenPropertyValueSpecification<number>;
		"text-max-width"?: DataDrivenPropertyValueSpecification<number>;
		"text-line-height"?: PropertyValueSpecification<number>;
		"text-letter-spacing"?: DataDrivenPropertyValueSpecification<number>;
		"text-justify"?: DataDrivenPropertyValueSpecification<"auto" | "left" | "center" | "right">;
		"text-radial-offset"?: DataDrivenPropertyValueSpecification<number>;
		"text-variable-anchor"?: PropertyValueSpecification<Array<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">>;
		"text-anchor"?: DataDrivenPropertyValueSpecification<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">;
		"text-max-angle"?: PropertyValueSpecification<number>;
		"text-writing-mode"?: PropertyValueSpecification<Array<"horizontal" | "vertical">>;
		"text-rotate"?: DataDrivenPropertyValueSpecification<number>;
		"text-padding"?: PropertyValueSpecification<number>;
		"text-keep-upright"?: PropertyValueSpecification<boolean>;
		"text-transform"?: DataDrivenPropertyValueSpecification<"none" | "uppercase" | "lowercase">;
		"text-offset"?: DataDrivenPropertyValueSpecification<[
			number,
			number
		]>;
		"text-allow-overlap"?: PropertyValueSpecification<boolean>;
		"text-overlap"?: PropertyValueSpecification<"never" | "always" | "cooperative">;
		"text-ignore-placement"?: PropertyValueSpecification<boolean>;
		"text-optional"?: PropertyValueSpecification<boolean>;
		"visibility"?: "visible" | "none";
	};
	"paint"?: {
		"icon-opacity"?: DataDrivenPropertyValueSpecification<number>;
		"icon-color"?: DataDrivenPropertyValueSpecification<ColorSpecification>;
		"icon-halo-color"?: DataDrivenPropertyValueSpecification<ColorSpecification>;
		"icon-halo-width"?: DataDrivenPropertyValueSpecification<number>;
		"icon-halo-blur"?: DataDrivenPropertyValueSpecification<number>;
		"icon-translate"?: PropertyValueSpecification<[
			number,
			number
		]>;
		"icon-translate-anchor"?: PropertyValueSpecification<"map" | "viewport">;
		"text-opacity"?: DataDrivenPropertyValueSpecification<number>;
		"text-color"?: DataDrivenPropertyValueSpecification<ColorSpecification>;
		"text-halo-color"?: DataDrivenPropertyValueSpecification<ColorSpecification>;
		"text-halo-width"?: DataDrivenPropertyValueSpecification<number>;
		"text-halo-blur"?: DataDrivenPropertyValueSpecification<number>;
		"text-translate"?: PropertyValueSpecification<[
			number,
			number
		]>;
		"text-translate-anchor"?: PropertyValueSpecification<"map" | "viewport">;
	};
};
export declare type CircleLayerSpecification = {
	"id": string;
	"type": "circle";
	"metadata"?: unknown;
	"source": string;
	"source-layer"?: string;
	"minzoom"?: number;
	"maxzoom"?: number;
	"filter"?: FilterSpecification;
	"layout"?: {
		"circle-sort-key"?: DataDrivenPropertyValueSpecification<number>;
		"visibility"?: "visible" | "none";
	};
	"paint"?: {
		"circle-radius"?: DataDrivenPropertyValueSpecification<number>;
		"circle-color"?: DataDrivenPropertyValueSpecification<ColorSpecification>;
		"circle-blur"?: DataDrivenPropertyValueSpecification<number>;
		"circle-opacity"?: DataDrivenPropertyValueSpecification<number>;
		"circle-translate"?: PropertyValueSpecification<[
			number,
			number
		]>;
		"circle-translate-anchor"?: PropertyValueSpecification<"map" | "viewport">;
		"circle-pitch-scale"?: PropertyValueSpecification<"map" | "viewport">;
		"circle-pitch-alignment"?: PropertyValueSpecification<"map" | "viewport">;
		"circle-stroke-width"?: DataDrivenPropertyValueSpecification<number>;
		"circle-stroke-color"?: DataDrivenPropertyValueSpecification<ColorSpecification>;
		"circle-stroke-opacity"?: DataDrivenPropertyValueSpecification<number>;
	};
};
export declare type HeatmapLayerSpecification = {
	"id": string;
	"type": "heatmap";
	"metadata"?: unknown;
	"source": string;
	"source-layer"?: string;
	"minzoom"?: number;
	"maxzoom"?: number;
	"filter"?: FilterSpecification;
	"layout"?: {
		"visibility"?: "visible" | "none";
	};
	"paint"?: {
		"heatmap-radius"?: DataDrivenPropertyValueSpecification<number>;
		"heatmap-weight"?: DataDrivenPropertyValueSpecification<number>;
		"heatmap-intensity"?: PropertyValueSpecification<number>;
		"heatmap-color"?: ExpressionSpecificationArray;
		"heatmap-opacity"?: PropertyValueSpecification<number>;
	};
};
export declare type FillExtrusionLayerSpecification = {
	"id": string;
	"type": "fill-extrusion";
	"metadata"?: unknown;
	"source": string;
	"source-layer"?: string;
	"minzoom"?: number;
	"maxzoom"?: number;
	"filter"?: FilterSpecification;
	"layout"?: {
		"visibility"?: "visible" | "none";
	};
	"paint"?: {
		"fill-extrusion-opacity"?: PropertyValueSpecification<number>;
		"fill-extrusion-color"?: DataDrivenPropertyValueSpecification<ColorSpecification>;
		"fill-extrusion-translate"?: PropertyValueSpecification<[
			number,
			number
		]>;
		"fill-extrusion-translate-anchor"?: PropertyValueSpecification<"map" | "viewport">;
		"fill-extrusion-pattern"?: DataDrivenPropertyValueSpecification<ResolvedImageSpecification>;
		"fill-extrusion-height"?: DataDrivenPropertyValueSpecification<number>;
		"fill-extrusion-base"?: DataDrivenPropertyValueSpecification<number>;
		"fill-extrusion-vertical-gradient"?: PropertyValueSpecification<boolean>;
	};
};
export declare type RasterLayerSpecification = {
	"id": string;
	"type": "raster";
	"metadata"?: unknown;
	"source": string;
	"source-layer"?: string;
	"minzoom"?: number;
	"maxzoom"?: number;
	"filter"?: FilterSpecification;
	"layout"?: {
		"visibility"?: "visible" | "none";
	};
	"paint"?: {
		"raster-opacity"?: PropertyValueSpecification<number>;
		"raster-hue-rotate"?: PropertyValueSpecification<number>;
		"raster-brightness-min"?: PropertyValueSpecification<number>;
		"raster-brightness-max"?: PropertyValueSpecification<number>;
		"raster-saturation"?: PropertyValueSpecification<number>;
		"raster-contrast"?: PropertyValueSpecification<number>;
		"raster-resampling"?: PropertyValueSpecification<"linear" | "nearest">;
		"raster-fade-duration"?: PropertyValueSpecification<number>;
	};
};
export declare type HillshadeLayerSpecification = {
	"id": string;
	"type": "hillshade";
	"metadata"?: unknown;
	"source": string;
	"source-layer"?: string;
	"minzoom"?: number;
	"maxzoom"?: number;
	"filter"?: FilterSpecification;
	"layout"?: {
		"visibility"?: "visible" | "none";
	};
	"paint"?: {
		"hillshade-illumination-direction"?: PropertyValueSpecification<number>;
		"hillshade-illumination-anchor"?: PropertyValueSpecification<"map" | "viewport">;
		"hillshade-exaggeration"?: PropertyValueSpecification<number>;
		"hillshade-shadow-color"?: PropertyValueSpecification<ColorSpecification>;
		"hillshade-highlight-color"?: PropertyValueSpecification<ColorSpecification>;
		"hillshade-accent-color"?: PropertyValueSpecification<ColorSpecification>;
	};
};
export declare type BackgroundLayerSpecification = {
	"id": string;
	"type": "background";
	"metadata"?: unknown;
	"minzoom"?: number;
	"maxzoom"?: number;
	"layout"?: {
		"visibility"?: "visible" | "none";
	};
	"paint"?: {
		"background-color"?: PropertyValueSpecification<ColorSpecification>;
		"background-pattern"?: PropertyValueSpecification<ResolvedImageSpecification>;
		"background-opacity"?: PropertyValueSpecification<number>;
	};
};
export declare type LayerSpecification = FillLayerSpecification | LineLayerSpecification | SymbolLayerSpecification | CircleLayerSpecification | HeatmapLayerSpecification | FillExtrusionLayerSpecification | RasterLayerSpecification | HillshadeLayerSpecification | BackgroundLayerSpecification;
export declare type Feature = {
	readonly type: 1 | 2 | 3 | "Unknown" | "Point" | "MultiPoint" | "LineString" | "MultiLineString" | "Polygon" | "MultiPolygon";
	readonly id?: any;
	readonly properties: {
		[_: string]: any;
	};
	readonly patterns?: {
		[_: string]: {
			"min": string;
			"mid": string;
			"max": string;
		};
	};
	readonly geometry?: Array<Array<Point>>;
};
export declare type FeatureState = {
	[_: string]: any;
};
export declare type GlobalProperties = Readonly<{
	zoom: number;
	heatmapDensity?: number;
	lineProgress?: number;
	isSupportedScript?: (_: string) => boolean;
	accumulated?: Value;
}>;
export declare class StyleExpression {
	expression: Expression;
	_evaluator: EvaluationContext;
	_defaultValue: Value;
	_warningHistory: {
		[key: string]: boolean;
	};
	_enumValues: {
		[_: string]: any;
	};
	constructor(expression: Expression, propertySpec?: StylePropertySpecification | null);
	evaluateWithoutErrorHandling(globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, canonical?: CanonicalTileID, availableImages?: Array<string>, formattedSection?: FormattedSection): any;
	evaluate(globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, canonical?: CanonicalTileID, availableImages?: Array<string>, formattedSection?: FormattedSection): any;
}
declare function isExpression(expression: unknown): boolean;
declare function createExpression(expression: unknown, propertySpec?: StylePropertySpecification | null): Result<StyleExpression, Array<ExpressionParsingError>>;
export declare class ZoomConstantExpression<Kind extends EvaluationKind> {
	kind: Kind;
	isStateDependent: boolean;
	_styleExpression: StyleExpression;
	constructor(kind: Kind, expression: StyleExpression);
	evaluateWithoutErrorHandling(globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, canonical?: CanonicalTileID, availableImages?: Array<string>, formattedSection?: FormattedSection): any;
	evaluate(globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, canonical?: CanonicalTileID, availableImages?: Array<string>, formattedSection?: FormattedSection): any;
}
export declare class ZoomDependentExpression<Kind extends EvaluationKind> {
	kind: Kind;
	zoomStops: Array<number>;
	isStateDependent: boolean;
	_styleExpression: StyleExpression;
	interpolationType: InterpolationType;
	constructor(kind: Kind, expression: StyleExpression, zoomStops: Array<number>, interpolationType?: InterpolationType);
	evaluateWithoutErrorHandling(globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, canonical?: CanonicalTileID, availableImages?: Array<string>, formattedSection?: FormattedSection): any;
	evaluate(globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, canonical?: CanonicalTileID, availableImages?: Array<string>, formattedSection?: FormattedSection): any;
	interpolationFactor(input: number, lower: number, upper: number): number;
}
export declare type ConstantExpression = {
	kind: "constant";
	readonly evaluate: (globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, canonical?: CanonicalTileID, availableImages?: Array<string>) => any;
};
export declare type SourceExpression = {
	kind: "source";
	isStateDependent: boolean;
	readonly evaluate: (globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, canonical?: CanonicalTileID, availableImages?: Array<string>, formattedSection?: FormattedSection) => any;
};
export declare type CameraExpression = {
	kind: "camera";
	readonly evaluate: (globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, canonical?: CanonicalTileID, availableImages?: Array<string>) => any;
	readonly interpolationFactor: (input: number, lower: number, upper: number) => number;
	zoomStops: Array<number>;
	interpolationType: InterpolationType;
};
export declare type CompositeExpression = {
	kind: "composite";
	isStateDependent: boolean;
	readonly evaluate: (globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, canonical?: CanonicalTileID, availableImages?: Array<string>, formattedSection?: FormattedSection) => any;
	readonly interpolationFactor: (input: number, lower: number, upper: number) => number;
	zoomStops: Array<number>;
	interpolationType: InterpolationType;
};
export declare type StylePropertyExpression = ConstantExpression | SourceExpression | CameraExpression | CompositeExpression;
declare function createPropertyExpression(expressionInput: unknown, propertySpec: StylePropertySpecification): Result<StylePropertyExpression, Array<ExpressionParsingError>>;
export declare class StylePropertyFunction<T> {
	_parameters: PropertyValueSpecification<T>;
	_specification: StylePropertySpecification;
	kind: EvaluationKind;
	evaluate: (globals: GlobalProperties, feature?: Feature) => any;
	interpolationFactor: ((input: number, lower: number, upper: number) => number);
	zoomStops: Array<number>;
	constructor(parameters: PropertyValueSpecification<T>, specification: StylePropertySpecification);
	static deserialize<T>(serialized: {
		_parameters: PropertyValueSpecification<T>;
		_specification: StylePropertySpecification;
	}): StylePropertyFunction<T>;
	static serialize<T>(input: StylePropertyFunction<T>): {
		_parameters: PropertyValueSpecification<T>;
		_specification: StylePropertySpecification;
	};
}
declare function normalizePropertyExpression<T>(value: PropertyValueSpecification<T>, specification: StylePropertySpecification): StylePropertyExpression;
export declare type FilterExpression = (globalProperties: GlobalProperties, feature: Feature, canonical?: CanonicalTileID) => boolean;
export declare type FeatureFilter = {
	filter: FilterExpression;
	needGeometry: boolean;
};
declare function isExpressionFilter(filter: any): boolean;
declare function createFilter(filter: any): FeatureFilter;
/**
 * Convert the given legacy filter to (the JSON representation of) an
 * equivalent expression
 * @private
 */
export function convertFilter(filter: FilterSpecification): unknown;
declare function isFunction(value: any): boolean;
declare function createFunction(parameters: any, propertySpec: any): {
	kind: string;
	interpolationType: {
		name: string;
	};
	interpolationFactor: any;
	zoomStops: any[];
	evaluate({ zoom }: {
		zoom: any;
	}, properties: any): any;
} | {
	kind: string;
	interpolationType: {
		name: string;
		base: any;
	};
	interpolationFactor: any;
	zoomStops: any;
	evaluate: ({ zoom }: {
		zoom: any;
	}) => any;
} | {
	kind: string;
	evaluate(_: any, feature: any): any;
	interpolationType?: undefined;
	interpolationFactor?: undefined;
	zoomStops?: undefined;
};
declare function convertFunction(parameters: any, propertySpec: StylePropertySpecification): any;
declare function eachSource(style: StyleSpecification, callback: (_: SourceSpecification) => void): void;
declare function eachLayer(style: StyleSpecification, callback: (_: LayerSpecification) => void): void;
export declare type PropertyCallback = (a: {
	path: [
		string,
		"paint" | "layout",
		string
	];
	key: string;
	value: PropertyValueSpecification<unknown> | DataDrivenPropertyValueSpecification<unknown>;
	reference: StylePropertySpecification;
	set: (a: PropertyValueSpecification<unknown> | DataDrivenPropertyValueSpecification<unknown>) => void;
}) => void;
declare function eachProperty(style: StyleSpecification, options: {
	paint?: boolean;
	layout?: boolean;
}, callback: PropertyCallback): void;
declare function validateStyle(style: any, styleSpec?: {
	$version: number;
	$root: {
		version: {
			required: boolean;
			type: string;
			values: number[];
			doc: string;
			example: number;
		};
		name: {
			type: string;
			doc: string;
			example: string;
		};
		metadata: {
			type: string;
			doc: string;
		};
		center: {
			type: string;
			value: string;
			doc: string;
			example: number[];
		};
		zoom: {
			type: string;
			doc: string;
			example: number;
		};
		bearing: {
			type: string;
			default: number;
			period: number;
			units: string;
			doc: string;
			example: number;
		};
		pitch: {
			type: string;
			default: number;
			units: string;
			doc: string;
			example: number;
		};
		light: {
			type: string;
			doc: string;
			example: {
				anchor: string;
				color: string;
				intensity: number;
			};
		};
		sources: {
			required: boolean;
			type: string;
			doc: string;
			example: {
				"maplibre-demotiles": {
					type: string;
					url: string;
				};
			};
		};
		sprite: {
			type: string;
			doc: string;
			example: string;
		};
		glyphs: {
			type: string;
			doc: string;
			example: string;
		};
		transition: {
			type: string;
			doc: string;
			example: {
				duration: number;
				delay: number;
			};
		};
		layers: {
			required: boolean;
			type: string;
			value: string;
			doc: string;
			example: {
				id: string;
				source: string;
				"source-layer": string;
				type: string;
				paint: {
					"fill-color": string;
				};
			}[];
		};
	};
	sources: {
		"*": {
			type: string;
			doc: string;
		};
	};
	source: string[];
	source_vector: {
		type: {
			required: boolean;
			type: string;
			values: {
				vector: {
					doc: string;
				};
			};
			doc: string;
		};
		url: {
			type: string;
			doc: string;
		};
		tiles: {
			type: string;
			value: string;
			doc: string;
		};
		bounds: {
			type: string;
			value: string;
			length: number;
			default: number[];
			doc: string;
		};
		scheme: {
			type: string;
			values: {
				xyz: {
					doc: string;
				};
				tms: {
					doc: string;
				};
			};
			default: string;
			doc: string;
		};
		minzoom: {
			type: string;
			default: number;
			doc: string;
		};
		maxzoom: {
			type: string;
			default: number;
			doc: string;
		};
		attribution: {
			type: string;
			doc: string;
		};
		promoteId: {
			type: string;
			doc: string;
		};
		volatile: {
			type: string;
			default: boolean;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					android: string;
					ios: string;
				};
			};
		};
		"*": {
			type: string;
			doc: string;
		};
	};
	source_raster: {
		type: {
			required: boolean;
			type: string;
			values: {
				raster: {
					doc: string;
				};
			};
			doc: string;
		};
		url: {
			type: string;
			doc: string;
		};
		tiles: {
			type: string;
			value: string;
			doc: string;
		};
		bounds: {
			type: string;
			value: string;
			length: number;
			default: number[];
			doc: string;
		};
		minzoom: {
			type: string;
			default: number;
			doc: string;
		};
		maxzoom: {
			type: string;
			default: number;
			doc: string;
		};
		tileSize: {
			type: string;
			default: number;
			units: string;
			doc: string;
		};
		scheme: {
			type: string;
			values: {
				xyz: {
					doc: string;
				};
				tms: {
					doc: string;
				};
			};
			default: string;
			doc: string;
		};
		attribution: {
			type: string;
			doc: string;
		};
		volatile: {
			type: string;
			default: boolean;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					android: string;
					ios: string;
				};
			};
		};
		"*": {
			type: string;
			doc: string;
		};
	};
	source_raster_dem: {
		type: {
			required: boolean;
			type: string;
			values: {
				"raster-dem": {
					doc: string;
				};
			};
			doc: string;
		};
		url: {
			type: string;
			doc: string;
		};
		tiles: {
			type: string;
			value: string;
			doc: string;
		};
		bounds: {
			type: string;
			value: string;
			length: number;
			default: number[];
			doc: string;
		};
		minzoom: {
			type: string;
			default: number;
			doc: string;
		};
		maxzoom: {
			type: string;
			default: number;
			doc: string;
		};
		tileSize: {
			type: string;
			default: number;
			units: string;
			doc: string;
		};
		attribution: {
			type: string;
			doc: string;
		};
		encoding: {
			type: string;
			values: {
				terrarium: {
					doc: string;
				};
				mapbox: {
					doc: string;
				};
			};
			default: string;
			doc: string;
		};
		volatile: {
			type: string;
			default: boolean;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					android: string;
					ios: string;
				};
			};
		};
		"*": {
			type: string;
			doc: string;
		};
	};
	source_geojson: {
		type: {
			required: boolean;
			type: string;
			values: {
				geojson: {
					doc: string;
				};
			};
			doc: string;
		};
		data: {
			type: string;
			doc: string;
		};
		maxzoom: {
			type: string;
			default: number;
			doc: string;
		};
		attribution: {
			type: string;
			doc: string;
		};
		buffer: {
			type: string;
			default: number;
			maximum: number;
			minimum: number;
			doc: string;
		};
		filter: {
			type: string;
			doc: string;
		};
		tolerance: {
			type: string;
			default: number;
			doc: string;
		};
		cluster: {
			type: string;
			default: boolean;
			doc: string;
		};
		clusterRadius: {
			type: string;
			default: number;
			minimum: number;
			doc: string;
		};
		clusterMaxZoom: {
			type: string;
			doc: string;
		};
		clusterMinPoints: {
			type: string;
			doc: string;
		};
		clusterProperties: {
			type: string;
			doc: string;
		};
		lineMetrics: {
			type: string;
			default: boolean;
			doc: string;
		};
		generateId: {
			type: string;
			default: boolean;
			doc: string;
		};
		promoteId: {
			type: string;
			doc: string;
		};
	};
	source_video: {
		type: {
			required: boolean;
			type: string;
			values: {
				video: {
					doc: string;
				};
			};
			doc: string;
		};
		urls: {
			required: boolean;
			type: string;
			value: string;
			doc: string;
		};
		coordinates: {
			required: boolean;
			doc: string;
			type: string;
			length: number;
			value: {
				type: string;
				length: number;
				value: string;
				doc: string;
			};
		};
	};
	source_image: {
		type: {
			required: boolean;
			type: string;
			values: {
				image: {
					doc: string;
				};
			};
			doc: string;
		};
		url: {
			required: boolean;
			type: string;
			doc: string;
		};
		coordinates: {
			required: boolean;
			doc: string;
			type: string;
			length: number;
			value: {
				type: string;
				length: number;
				value: string;
				doc: string;
			};
		};
	};
	layer: {
		id: {
			type: string;
			doc: string;
			required: boolean;
		};
		type: {
			type: string;
			values: {
				fill: {
					doc: string;
					"sdk-support": {
						"basic functionality": {
							js: string;
							android: string;
							ios: string;
							macos: string;
						};
					};
				};
				line: {
					doc: string;
					"sdk-support": {
						"basic functionality": {
							js: string;
							android: string;
							ios: string;
							macos: string;
						};
					};
				};
				symbol: {
					doc: string;
					"sdk-support": {
						"basic functionality": {
							js: string;
							android: string;
							ios: string;
							macos: string;
						};
					};
				};
				circle: {
					doc: string;
					"sdk-support": {
						"basic functionality": {
							js: string;
							android: string;
							ios: string;
							macos: string;
						};
					};
				};
				heatmap: {
					doc: string;
					"sdk-support": {
						"basic functionality": {
							js: string;
							android: string;
							ios: string;
							macos: string;
						};
					};
				};
				"fill-extrusion": {
					doc: string;
					"sdk-support": {
						"basic functionality": {
							js: string;
							android: string;
							ios: string;
							macos: string;
						};
					};
				};
				raster: {
					doc: string;
					"sdk-support": {
						"basic functionality": {
							js: string;
							android: string;
							ios: string;
							macos: string;
						};
					};
				};
				hillshade: {
					doc: string;
					"sdk-support": {
						"basic functionality": {
							js: string;
							android: string;
							ios: string;
							macos: string;
						};
					};
				};
				background: {
					doc: string;
					"sdk-support": {
						"basic functionality": {
							js: string;
							android: string;
							ios: string;
							macos: string;
						};
					};
				};
			};
			doc: string;
			required: boolean;
		};
		metadata: {
			type: string;
			doc: string;
		};
		source: {
			type: string;
			doc: string;
		};
		"source-layer": {
			type: string;
			doc: string;
		};
		minzoom: {
			type: string;
			minimum: number;
			maximum: number;
			doc: string;
		};
		maxzoom: {
			type: string;
			minimum: number;
			maximum: number;
			doc: string;
		};
		filter: {
			type: string;
			doc: string;
		};
		layout: {
			type: string;
			doc: string;
		};
		paint: {
			type: string;
			doc: string;
		};
	};
	layout: string[];
	layout_background: {
		visibility: {
			type: string;
			values: {
				visible: {
					doc: string;
				};
				none: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			"property-type": string;
		};
	};
	layout_fill: {
		"fill-sort-key": {
			type: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		visibility: {
			type: string;
			values: {
				visible: {
					doc: string;
				};
				none: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			"property-type": string;
		};
	};
	layout_circle: {
		"circle-sort-key": {
			type: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		visibility: {
			type: string;
			values: {
				visible: {
					doc: string;
				};
				none: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			"property-type": string;
		};
	};
	layout_heatmap: {
		visibility: {
			type: string;
			values: {
				visible: {
					doc: string;
				};
				none: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			"property-type": string;
		};
	};
	"layout_fill-extrusion": {
		visibility: {
			type: string;
			values: {
				visible: {
					doc: string;
				};
				none: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			"property-type": string;
		};
	};
	layout_line: {
		"line-cap": {
			type: string;
			values: {
				butt: {
					doc: string;
				};
				round: {
					doc: string;
				};
				square: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"line-join": {
			type: string;
			values: {
				bevel: {
					doc: string;
				};
				round: {
					doc: string;
				};
				miter: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"line-miter-limit": {
			type: string;
			default: number;
			doc: string;
			requires: {
				"line-join": string;
			}[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"line-round-limit": {
			type: string;
			default: number;
			doc: string;
			requires: {
				"line-join": string;
			}[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"line-sort-key": {
			type: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		visibility: {
			type: string;
			values: {
				visible: {
					doc: string;
				};
				none: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			"property-type": string;
		};
	};
	layout_symbol: {
		"symbol-placement": {
			type: string;
			values: {
				point: {
					doc: string;
				};
				line: {
					doc: string;
				};
				"line-center": {
					doc: string;
				};
			};
			default: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"`line-center` value": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"symbol-spacing": {
			type: string;
			default: number;
			minimum: number;
			units: string;
			doc: string;
			requires: {
				"symbol-placement": string;
			}[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"symbol-avoid-edges": {
			type: string;
			default: boolean;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"symbol-sort-key": {
			type: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"symbol-z-order": {
			type: string;
			values: {
				auto: {
					doc: string;
				};
				"viewport-y": {
					doc: string;
				};
				source: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"icon-allow-overlap": {
			type: string;
			default: boolean;
			doc: string;
			requires: (string | {
				"!": string;
			})[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"icon-overlap": {
			type: string;
			values: {
				never: {
					doc: string;
				};
				always: {
					doc: string;
				};
				cooperative: {
					doc: string;
				};
			};
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"icon-ignore-placement": {
			type: string;
			default: boolean;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"icon-optional": {
			type: string;
			default: boolean;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"icon-rotation-alignment": {
			type: string;
			values: {
				map: {
					doc: string;
				};
				viewport: {
					doc: string;
				};
				auto: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"`auto` value": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"icon-size": {
			type: string;
			default: number;
			minimum: number;
			units: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"icon-text-fit": {
			type: string;
			values: {
				none: {
					doc: string;
				};
				width: {
					doc: string;
				};
				height: {
					doc: string;
				};
				both: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"stretchable icons": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"icon-text-fit-padding": {
			type: string;
			value: string;
			length: number;
			default: number[];
			units: string;
			doc: string;
			requires: (string | {
				"icon-text-fit": string[];
			})[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"icon-image": {
			type: string;
			doc: string;
			tokens: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"icon-rotate": {
			type: string;
			default: number;
			period: number;
			units: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"icon-padding": {
			type: string;
			default: number;
			minimum: number;
			units: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"icon-keep-upright": {
			type: string;
			default: boolean;
			doc: string;
			requires: (string | {
				"icon-rotation-alignment": string;
				"symbol-placement"?: undefined;
			} | {
				"symbol-placement": string[];
				"icon-rotation-alignment"?: undefined;
			})[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"icon-offset": {
			type: string;
			value: string;
			length: number;
			default: number[];
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"icon-anchor": {
			type: string;
			values: {
				center: {
					doc: string;
				};
				left: {
					doc: string;
				};
				right: {
					doc: string;
				};
				top: {
					doc: string;
				};
				bottom: {
					doc: string;
				};
				"top-left": {
					doc: string;
				};
				"top-right": {
					doc: string;
				};
				"bottom-left": {
					doc: string;
				};
				"bottom-right": {
					doc: string;
				};
			};
			default: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"icon-pitch-alignment": {
			type: string;
			values: {
				map: {
					doc: string;
				};
				viewport: {
					doc: string;
				};
				auto: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-pitch-alignment": {
			type: string;
			values: {
				map: {
					doc: string;
				};
				viewport: {
					doc: string;
				};
				auto: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"`auto` value": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-rotation-alignment": {
			type: string;
			values: {
				map: {
					doc: string;
				};
				viewport: {
					doc: string;
				};
				"viewport-glyph": {
					doc: string;
				};
				auto: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"`auto` value": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"`viewport-glyph` value": {
					js: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-field": {
			type: string;
			default: string;
			tokens: boolean;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-font": {
			type: string;
			value: string;
			default: string[];
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-size": {
			type: string;
			default: number;
			minimum: number;
			units: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-max-width": {
			type: string;
			default: number;
			minimum: number;
			units: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-line-height": {
			type: string;
			default: number;
			units: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-letter-spacing": {
			type: string;
			default: number;
			units: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-justify": {
			type: string;
			values: {
				auto: {
					doc: string;
				};
				left: {
					doc: string;
				};
				center: {
					doc: string;
				};
				right: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				auto: {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-radial-offset": {
			type: string;
			units: string;
			default: number;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			requires: string[];
			"property-type": string;
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
		};
		"text-variable-anchor": {
			type: string;
			value: string;
			values: {
				center: {
					doc: string;
				};
				left: {
					doc: string;
				};
				right: {
					doc: string;
				};
				top: {
					doc: string;
				};
				bottom: {
					doc: string;
				};
				"top-left": {
					doc: string;
				};
				"top-right": {
					doc: string;
				};
				"bottom-left": {
					doc: string;
				};
				"bottom-right": {
					doc: string;
				};
			};
			requires: (string | {
				"symbol-placement": string[];
			})[];
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-anchor": {
			type: string;
			values: {
				center: {
					doc: string;
				};
				left: {
					doc: string;
				};
				right: {
					doc: string;
				};
				top: {
					doc: string;
				};
				bottom: {
					doc: string;
				};
				"top-left": {
					doc: string;
				};
				"top-right": {
					doc: string;
				};
				"bottom-left": {
					doc: string;
				};
				"bottom-right": {
					doc: string;
				};
			};
			default: string;
			doc: string;
			requires: (string | {
				"!": string;
			})[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-max-angle": {
			type: string;
			default: number;
			units: string;
			doc: string;
			requires: (string | {
				"symbol-placement": string[];
			})[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-writing-mode": {
			type: string;
			value: string;
			values: {
				horizontal: {
					doc: string;
				};
				vertical: {
					doc: string;
				};
			};
			doc: string;
			requires: (string | {
				"symbol-placement": string[];
			})[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-rotate": {
			type: string;
			default: number;
			period: number;
			units: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-padding": {
			type: string;
			default: number;
			minimum: number;
			units: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-keep-upright": {
			type: string;
			default: boolean;
			doc: string;
			requires: (string | {
				"text-rotation-alignment": string;
				"symbol-placement"?: undefined;
			} | {
				"symbol-placement": string[];
				"text-rotation-alignment"?: undefined;
			})[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-transform": {
			type: string;
			values: {
				none: {
					doc: string;
				};
				uppercase: {
					doc: string;
				};
				lowercase: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-offset": {
			type: string;
			doc: string;
			value: string;
			units: string;
			length: number;
			default: number[];
			requires: (string | {
				"!": string;
			})[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-allow-overlap": {
			type: string;
			default: boolean;
			doc: string;
			requires: (string | {
				"!": string;
			})[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-overlap": {
			type: string;
			values: {
				never: {
					doc: string;
				};
				always: {
					doc: string;
				};
				cooperative: {
					doc: string;
				};
			};
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-ignore-placement": {
			type: string;
			default: boolean;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-optional": {
			type: string;
			default: boolean;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		visibility: {
			type: string;
			values: {
				visible: {
					doc: string;
				};
				none: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			"property-type": string;
		};
	};
	layout_raster: {
		visibility: {
			type: string;
			values: {
				visible: {
					doc: string;
				};
				none: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			"property-type": string;
		};
	};
	layout_hillshade: {
		visibility: {
			type: string;
			values: {
				visible: {
					doc: string;
				};
				none: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			"property-type": string;
		};
	};
	filter: {
		type: string;
		value: string;
		doc: string;
	};
	filter_operator: {
		type: string;
		values: {
			"==": {
				doc: string;
			};
			"!=": {
				doc: string;
			};
			">": {
				doc: string;
			};
			">=": {
				doc: string;
			};
			"<": {
				doc: string;
			};
			"<=": {
				doc: string;
			};
			in: {
				doc: string;
			};
			"!in": {
				doc: string;
			};
			all: {
				doc: string;
			};
			any: {
				doc: string;
			};
			none: {
				doc: string;
			};
			has: {
				doc: string;
			};
			"!has": {
				doc: string;
			};
			within: {
				doc: string;
			};
		};
		doc: string;
	};
	geometry_type: {
		type: string;
		values: {
			Point: {
				doc: string;
			};
			LineString: {
				doc: string;
			};
			Polygon: {
				doc: string;
			};
		};
		doc: string;
	};
	function: {
		expression: {
			type: string;
			doc: string;
		};
		stops: {
			type: string;
			doc: string;
			value: string;
		};
		base: {
			type: string;
			default: number;
			minimum: number;
			doc: string;
		};
		property: {
			type: string;
			doc: string;
			default: string;
		};
		type: {
			type: string;
			values: {
				identity: {
					doc: string;
				};
				exponential: {
					doc: string;
				};
				interval: {
					doc: string;
				};
				categorical: {
					doc: string;
				};
			};
			doc: string;
			default: string;
		};
		colorSpace: {
			type: string;
			values: {
				rgb: {
					doc: string;
				};
				lab: {
					doc: string;
				};
				hcl: {
					doc: string;
				};
			};
			doc: string;
			default: string;
		};
		default: {
			type: string;
			required: boolean;
			doc: string;
		};
	};
	function_stop: {
		type: string;
		minimum: number;
		maximum: number;
		value: string[];
		length: number;
		doc: string;
	};
	expression: {
		type: string;
		value: string;
		minimum: number;
		doc: string;
	};
	expression_name: {
		doc: string;
		type: string;
		values: {
			let: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			var: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			literal: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			array: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			at: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			in: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"index-of": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
					};
				};
			};
			slice: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
					};
				};
			};
			case: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			match: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			coalesce: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			step: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			interpolate: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"interpolate-hcl": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
					};
				};
			};
			"interpolate-lab": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
					};
				};
			};
			ln2: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			pi: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			e: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			typeof: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			string: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			number: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			boolean: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			object: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			collator: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			format: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
					"text-font": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
					"font-scale": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
					"text-color": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
					image: {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			image: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"number-format": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
					};
				};
			};
			"to-string": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"to-number": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"to-boolean": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"to-rgba": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"to-color": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			rgb: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			rgba: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			get: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			has: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			length: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			properties: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"feature-state": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
					};
				};
			};
			"geometry-type": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			id: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			zoom: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"heatmap-density": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"line-progress": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			accumulated: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
					};
				};
			};
			"+": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"*": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"-": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"/": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"%": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"^": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			sqrt: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			log10: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			ln: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			log2: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			sin: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			cos: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			tan: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			asin: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			acos: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			atan: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			min: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			max: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			round: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			abs: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			ceil: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			floor: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			distance: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"==": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
					collator: {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"!=": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
					collator: {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			">": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
					collator: {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"<": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
					collator: {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			">=": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
					collator: {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"<=": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
					collator: {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			all: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			any: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"!": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			within: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"is-supported-script": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
					};
				};
			};
			upcase: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			downcase: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			concat: {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
			"resolved-locale": {
				doc: string;
				group: string;
				"sdk-support": {
					"basic functionality": {
						js: string;
						android: string;
						ios: string;
						macos: string;
					};
				};
			};
		};
	};
	light: {
		anchor: {
			type: string;
			default: string;
			values: {
				map: {
					doc: string;
				};
				viewport: {
					doc: string;
				};
			};
			"property-type": string;
			transition: boolean;
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			doc: string;
			example: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
		};
		position: {
			type: string;
			default: number[];
			length: number;
			value: string;
			"property-type": string;
			transition: boolean;
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			doc: string;
			example: number[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
		};
		color: {
			type: string;
			"property-type": string;
			default: string;
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			transition: boolean;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
		};
		intensity: {
			type: string;
			"property-type": string;
			default: number;
			minimum: number;
			maximum: number;
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			transition: boolean;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
		};
	};
	paint: string[];
	paint_fill: {
		"fill-antialias": {
			type: string;
			default: boolean;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"fill-opacity": {
			type: string;
			default: number;
			minimum: number;
			maximum: number;
			doc: string;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"fill-color": {
			type: string;
			default: string;
			doc: string;
			transition: boolean;
			requires: {
				"!": string;
			}[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"fill-outline-color": {
			type: string;
			doc: string;
			transition: boolean;
			requires: ({
				"!": string;
				"fill-antialias"?: undefined;
			} | {
				"fill-antialias": boolean;
				"!"?: undefined;
			})[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"fill-translate": {
			type: string;
			value: string;
			length: number;
			default: number[];
			transition: boolean;
			units: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"fill-translate-anchor": {
			type: string;
			values: {
				map: {
					doc: string;
				};
				viewport: {
					doc: string;
				};
			};
			doc: string;
			default: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"fill-pattern": {
			type: string;
			transition: boolean;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					macos: string;
					ios: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
	};
	"paint_fill-extrusion": {
		"fill-extrusion-opacity": {
			type: string;
			default: number;
			minimum: number;
			maximum: number;
			doc: string;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"fill-extrusion-color": {
			type: string;
			default: string;
			doc: string;
			transition: boolean;
			requires: {
				"!": string;
			}[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"fill-extrusion-translate": {
			type: string;
			value: string;
			length: number;
			default: number[];
			transition: boolean;
			units: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"fill-extrusion-translate-anchor": {
			type: string;
			values: {
				map: {
					doc: string;
				};
				viewport: {
					doc: string;
				};
			};
			doc: string;
			default: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"fill-extrusion-pattern": {
			type: string;
			transition: boolean;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					macos: string;
					ios: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"fill-extrusion-height": {
			type: string;
			default: number;
			minimum: number;
			units: string;
			doc: string;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"fill-extrusion-base": {
			type: string;
			default: number;
			minimum: number;
			units: string;
			doc: string;
			transition: boolean;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"fill-extrusion-vertical-gradient": {
			type: string;
			default: boolean;
			doc: string;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
	};
	paint_line: {
		"line-opacity": {
			type: string;
			doc: string;
			default: number;
			minimum: number;
			maximum: number;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"line-color": {
			type: string;
			doc: string;
			default: string;
			transition: boolean;
			requires: {
				"!": string;
			}[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"line-translate": {
			type: string;
			value: string;
			length: number;
			default: number[];
			transition: boolean;
			units: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"line-translate-anchor": {
			type: string;
			values: {
				map: {
					doc: string;
				};
				viewport: {
					doc: string;
				};
			};
			doc: string;
			default: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"line-width": {
			type: string;
			default: number;
			minimum: number;
			transition: boolean;
			units: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"line-gap-width": {
			type: string;
			default: number;
			minimum: number;
			doc: string;
			transition: boolean;
			units: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"line-offset": {
			type: string;
			default: number;
			doc: string;
			transition: boolean;
			units: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"line-blur": {
			type: string;
			default: number;
			minimum: number;
			transition: boolean;
			units: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"line-dasharray": {
			type: string;
			value: string;
			doc: string;
			minimum: number;
			transition: boolean;
			units: string;
			requires: {
				"!": string;
			}[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"line-pattern": {
			type: string;
			transition: boolean;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					macos: string;
					ios: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"line-gradient": {
			type: string;
			doc: string;
			transition: boolean;
			requires: ({
				"!": string;
				source?: undefined;
				has?: undefined;
			} | {
				source: string;
				has: {
					lineMetrics: boolean;
				};
				"!"?: undefined;
			})[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
	};
	paint_circle: {
		"circle-radius": {
			type: string;
			default: number;
			minimum: number;
			transition: boolean;
			units: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"circle-color": {
			type: string;
			default: string;
			doc: string;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"circle-blur": {
			type: string;
			default: number;
			doc: string;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"circle-opacity": {
			type: string;
			doc: string;
			default: number;
			minimum: number;
			maximum: number;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"circle-translate": {
			type: string;
			value: string;
			length: number;
			default: number[];
			transition: boolean;
			units: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"circle-translate-anchor": {
			type: string;
			values: {
				map: {
					doc: string;
				};
				viewport: {
					doc: string;
				};
			};
			doc: string;
			default: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"circle-pitch-scale": {
			type: string;
			values: {
				map: {
					doc: string;
				};
				viewport: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"circle-pitch-alignment": {
			type: string;
			values: {
				map: {
					doc: string;
				};
				viewport: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"circle-stroke-width": {
			type: string;
			default: number;
			minimum: number;
			transition: boolean;
			units: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"circle-stroke-color": {
			type: string;
			default: string;
			doc: string;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"circle-stroke-opacity": {
			type: string;
			doc: string;
			default: number;
			minimum: number;
			maximum: number;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
	};
	paint_heatmap: {
		"heatmap-radius": {
			type: string;
			default: number;
			minimum: number;
			transition: boolean;
			units: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"heatmap-weight": {
			type: string;
			default: number;
			minimum: number;
			transition: boolean;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"heatmap-intensity": {
			type: string;
			default: number;
			minimum: number;
			transition: boolean;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"heatmap-color": {
			type: string;
			default: (string | number | string[])[];
			doc: string;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"heatmap-opacity": {
			type: string;
			doc: string;
			default: number;
			minimum: number;
			maximum: number;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
	};
	paint_symbol: {
		"icon-opacity": {
			doc: string;
			type: string;
			default: number;
			minimum: number;
			maximum: number;
			transition: boolean;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"icon-color": {
			type: string;
			default: string;
			transition: boolean;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"icon-halo-color": {
			type: string;
			default: string;
			transition: boolean;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"icon-halo-width": {
			type: string;
			default: number;
			minimum: number;
			transition: boolean;
			units: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"icon-halo-blur": {
			type: string;
			default: number;
			minimum: number;
			transition: boolean;
			units: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"icon-translate": {
			type: string;
			value: string;
			length: number;
			default: number[];
			transition: boolean;
			units: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"icon-translate-anchor": {
			type: string;
			values: {
				map: {
					doc: string;
				};
				viewport: {
					doc: string;
				};
			};
			doc: string;
			default: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-opacity": {
			type: string;
			doc: string;
			default: number;
			minimum: number;
			maximum: number;
			transition: boolean;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-color": {
			type: string;
			doc: string;
			default: string;
			transition: boolean;
			overridable: boolean;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-halo-color": {
			type: string;
			default: string;
			transition: boolean;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-halo-width": {
			type: string;
			default: number;
			minimum: number;
			transition: boolean;
			units: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-halo-blur": {
			type: string;
			default: number;
			minimum: number;
			transition: boolean;
			units: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-translate": {
			type: string;
			value: string;
			length: number;
			default: number[];
			transition: boolean;
			units: string;
			doc: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"text-translate-anchor": {
			type: string;
			values: {
				map: {
					doc: string;
				};
				viewport: {
					doc: string;
				};
			};
			doc: string;
			default: string;
			requires: string[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
	};
	paint_raster: {
		"raster-opacity": {
			type: string;
			doc: string;
			default: number;
			minimum: number;
			maximum: number;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"raster-hue-rotate": {
			type: string;
			default: number;
			period: number;
			transition: boolean;
			units: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"raster-brightness-min": {
			type: string;
			doc: string;
			default: number;
			minimum: number;
			maximum: number;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"raster-brightness-max": {
			type: string;
			doc: string;
			default: number;
			minimum: number;
			maximum: number;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"raster-saturation": {
			type: string;
			doc: string;
			default: number;
			minimum: number;
			maximum: number;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"raster-contrast": {
			type: string;
			doc: string;
			default: number;
			minimum: number;
			maximum: number;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"raster-resampling": {
			type: string;
			doc: string;
			values: {
				linear: {
					doc: string;
				};
				nearest: {
					doc: string;
				};
			};
			default: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"raster-fade-duration": {
			type: string;
			default: number;
			minimum: number;
			transition: boolean;
			units: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
	};
	paint_hillshade: {
		"hillshade-illumination-direction": {
			type: string;
			default: number;
			minimum: number;
			maximum: number;
			doc: string;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"hillshade-illumination-anchor": {
			type: string;
			values: {
				map: {
					doc: string;
				};
				viewport: {
					doc: string;
				};
			};
			default: string;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"hillshade-exaggeration": {
			type: string;
			doc: string;
			default: number;
			minimum: number;
			maximum: number;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"hillshade-shadow-color": {
			type: string;
			default: string;
			doc: string;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"hillshade-highlight-color": {
			type: string;
			default: string;
			doc: string;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"hillshade-accent-color": {
			type: string;
			default: string;
			doc: string;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
	};
	paint_background: {
		"background-color": {
			type: string;
			default: string;
			doc: string;
			transition: boolean;
			requires: {
				"!": string;
			}[];
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"background-pattern": {
			type: string;
			transition: boolean;
			doc: string;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
				"data-driven styling": {};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
		"background-opacity": {
			type: string;
			default: number;
			minimum: number;
			maximum: number;
			doc: string;
			transition: boolean;
			"sdk-support": {
				"basic functionality": {
					js: string;
					android: string;
					ios: string;
					macos: string;
				};
			};
			expression: {
				interpolated: boolean;
				parameters: string[];
			};
			"property-type": string;
		};
	};
	transition: {
		duration: {
			type: string;
			default: number;
			minimum: number;
			units: string;
			doc: string;
		};
		delay: {
			type: string;
			default: number;
			minimum: number;
			units: string;
			doc: string;
		};
	};
	"property-type": {
		"data-driven": {
			type: string;
			doc: string;
		};
		"cross-faded": {
			type: string;
			doc: string;
		};
		"cross-faded-data-driven": {
			type: string;
			doc: string;
		};
		"color-ramp": {
			type: string;
			doc: string;
		};
		"data-constant": {
			type: string;
			doc: string;
		};
		constant: {
			type: string;
			doc: string;
		};
	};
	promoteId: {
		"*": {
			type: string;
			doc: string;
		};
	};
}): any[];
export declare type ExpressionType = "data-driven" | "cross-faded" | "cross-faded-data-driven" | "color-ramp" | "data-constant" | "constant";
export declare type ExpressionParameters = Array<"zoom" | "feature" | "feature-state" | "heatmap-density" | "line-progress">;
export declare type ExpressionSpecification = {
	interpolated: boolean;
	parameters: ExpressionParameters;
};
export declare type StylePropertySpecification = {
	type: "number";
	"property-type": ExpressionType;
	expression?: ExpressionSpecification;
	transition: boolean;
	default?: number;
} | {
	type: "string";
	"property-type": ExpressionType;
	expression?: ExpressionSpecification;
	transition: boolean;
	default?: string;
	tokens?: boolean;
} | {
	type: "boolean";
	"property-type": ExpressionType;
	expression?: ExpressionSpecification;
	transition: boolean;
	default?: boolean;
} | {
	type: "enum";
	"property-type": ExpressionType;
	expression?: ExpressionSpecification;
	values: {
		[_: string]: {};
	};
	transition: boolean;
	default?: string;
} | {
	type: "color";
	"property-type": ExpressionType;
	expression?: ExpressionSpecification;
	transition: boolean;
	default?: string;
	overridable: boolean;
} | {
	type: "array";
	value: "number";
	"property-type": ExpressionType;
	expression?: ExpressionSpecification;
	length?: number;
	transition: boolean;
	default?: Array<number>;
} | {
	type: "array";
	value: "string";
	"property-type": ExpressionType;
	expression?: ExpressionSpecification;
	length?: number;
	transition: boolean;
	default?: Array<string>;
};
export declare const expression: {
	StyleExpression: typeof StyleExpression;
	isExpression: typeof isExpression;
	isExpressionFilter: typeof isExpressionFilter;
	createExpression: typeof createExpression;
	createPropertyExpression: typeof createPropertyExpression;
	normalizePropertyExpression: typeof normalizePropertyExpression;
	ZoomConstantExpression: typeof ZoomConstantExpression;
	ZoomDependentExpression: typeof ZoomDependentExpression;
	StylePropertyFunction: typeof StylePropertyFunction;
};
declare const styleFunction: {
	convertFunction: typeof convertFunction;
	createFunction: typeof createFunction;
	isFunction: typeof isFunction;
};
export declare const visit: {
	eachSource: typeof eachSource;
	eachLayer: typeof eachLayer;
	eachProperty: typeof eachProperty;
};

export {
	 as latest,
	 as v8,
	createFilter as featureFilter,
	diffStyles as diff,
	styleFunction as function,
	validateStyle as validate,
};

export {};
