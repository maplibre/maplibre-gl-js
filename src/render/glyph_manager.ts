import {loadGlyphRange} from '../style/load_glyph_range';

import TinySDF from '@mapbox/tiny-sdf';
import {unicodeBlockLookup} from '../util/is_char_in_unicode_block';
import {RGBAImage, AlphaImage} from '../util/image';

import type {StyleGlyph} from '../style/style_glyph';
import type {RequestManager} from '../util/request_manager';
import type {GetGlyphsResponse} from '../util/actor_messages';

type Entry = {
    // null means we've requested the range, but the glyph wasn't included in the result.
    glyphs: {
        [id: number]: StyleGlyph | null;
    };
    requests: {
        [range: number]: Promise<{[_: number]: StyleGlyph | null}>;
    };
    ranges: {
        [range: number]: boolean | null;
    };
    tinySDF?: TinySDF;
};

export class GlyphManager {
    requestManager: RequestManager;
    localIdeographFontFamily: string;
    entries: {[stack: string]: Entry};
    url: string;

    // exposed as statics to enable stubbing in unit tests
    static loadGlyphRange = loadGlyphRange;
    static TinySDF = TinySDF;

    constructor(requestManager: RequestManager, localIdeographFontFamily?: string | null) {
        this.requestManager = requestManager;
        this.localIdeographFontFamily = localIdeographFontFamily;
        this.entries = {};
    }

    setURL(url?: string | null) {
        this.url = url;
    }

    async getGlyphs(glyphs: {[stack: string]: Array<number>}): Promise<GetGlyphsResponse> {
        const glyphsPromises: Promise<{stack: string; id: number; glyph: StyleGlyph}>[] = [];

        for (const stack in glyphs) {
            for (const id of glyphs[stack]) {
                glyphsPromises.push(this._getAndCacheGlyphsPromise(stack, id));
            }
        }

        const updatedGlyphs = await Promise.all(glyphsPromises);

        const result: GetGlyphsResponse = {};

        for (const {stack, id, glyph} of updatedGlyphs) {
            if (!result[stack]) {
                result[stack] = {};
            }
            // Clone the glyph so that our own copy of its ArrayBuffer doesn't get transferred.
            result[stack][id] = glyph && {
                id: glyph.id,
                bitmap: glyph.bitmap.clone(),
                metrics: glyph.metrics
            };
        }

        return result;
    }

    async _getAndCacheGlyphsPromise(stack: string, id: number): Promise<{stack: string; id: number; glyph: StyleGlyph}> {
        let entry = this.entries[stack];
        if (!entry) {
            entry = this.entries[stack] = {
                glyphs: {},
                requests: {},
                ranges: {}
            };
        }

        let glyph = entry.glyphs[id];
        if (glyph !== undefined) {
            return {stack, id, glyph};
        }

        glyph = this._tinySDF(entry, stack, id);
        if (glyph) {
            entry.glyphs[id] = glyph;
            return {stack, id, glyph};
        }

        const range = Math.floor(id / 256);
        if (range * 256 > 65535) {
            throw new Error('glyphs > 65535 not supported');
        }

        if (entry.ranges[range]) {
            return {stack, id, glyph};
        }

        if (!this.url) {
            throw new Error('glyphsUrl is not set');
        }

        if (!entry.requests[range]) {
            const promise = GlyphManager.loadGlyphRange(stack, range, this.url, this.requestManager);
            entry.requests[range] = promise;
        }

        const response = await entry.requests[range];
        for (const id in response) {
            if (!this._doesCharSupportLocalGlyph(+id)) {
                entry.glyphs[+id] = response[+id];
            }
        }
        entry.ranges[range] = true;
        return {stack, id, glyph: response[id] || null};
    }

    _doesCharSupportLocalGlyph(id: number): boolean {
        return true;
        // /* eslint-disable new-cap */
        // return !!this.localIdeographFontFamily &&
        //     (unicodeBlockLookup['CJK Unified Ideographs'](id) ||
        //     unicodeBlockLookup['Hangul Syllables'](id) ||
        //     unicodeBlockLookup['Hiragana'](id) ||
        //     unicodeBlockLookup['Katakana'](id));
        // /* eslint-enable new-cap */
    }

    _tinySDF(entry: Entry, stack: string, id: number): StyleGlyph {
        const fontFamily = this.localIdeographFontFamily;
        if (!fontFamily) {
            return;
        }

        if (!this._doesCharSupportLocalGlyph(id)) {
            return;
        }

        // Client-generated glyphs are rendered at 2x texture scale,
        // because CJK glyphs are more detailed than others.
        const textureScale = 2;

        let tinySDF = entry.tinySDF;
        if (!tinySDF) {
            let fontWeight = '400';
            if (/bold/i.test(stack)) {
                fontWeight = '900';
            } else if (/medium/i.test(stack)) {
                fontWeight = '500';
            } else if (/light/i.test(stack)) {
                fontWeight = '200';
            }
            tinySDF = entry.tinySDF = new GlyphManager.TinySDF({
                fontSize: 24 * textureScale,
                buffer: 3 * textureScale,
                radius: 8 * textureScale,
                cutoff: 0.25,
                fontFamily,
                fontWeight
            });
        }

        const char = tinySDF.draw(String.fromCharCode(id));

        // const newData = new Uint8ClampedArray(4 * char.data.length);
        // for (let i = 0; i < char.data.length; ++i) {
        //     newData[4 * i + 0] = char.data[i];
        //     newData[4 * i + 1] = char.data[i];
        //     newData[4 * i + 2] = char.data[i];
        //     newData[4 * i + 3] = char.data[i];
        // }

        //  0  1  2  3  4  5  6  7  8  9 10 11
        // r0 g0 b0 a0 r1 g1 b1 a1 r2 g2 b2 a2
        // r0 r1 r2 g0 g1 g2 b0 b1 b2 a0 a1 a2

        

        // {
        //     "id": 65,
        //     "index": 37,
        //     "char": "A",
        //     "width": 28,
        //     "height": 31,
        //     "xoffset": -4,
        //     "yoffset": 5,
        //     "xadvance": 21,
        //     "chnl": 15,
        //     "x": 145,
        //     "y": 37,
        //     "page": 0
        // },
        const newData = new Uint8ClampedArray([0, 8, 0, 255, 0, 8, 0, 255, 0, 8, 0, 255, 0, 8, 0, 255, 0, 8, 0, 255, 0, 8, 0, 255, 0, 8, 0, 255, 0, 8, 0, 255, 0, 8, 0, 255, 0, 8, 0, 255, 6, 8, 6, 255, 8, 8, 36, 255, 8, 8, 66, 255, 8, 8, 96, 255, 8, 8, 122, 255, 8, 8, 92, 255, 8, 8, 62, 255, 8, 8, 32, 255, 8, 2, 2, 255, 8, 0, 0, 255, 8, 0, 0, 255, 8, 0, 0, 255, 8, 0, 0, 255, 8, 0, 0, 255, 8, 0, 0, 255, 8, 0, 0, 255, 8, 0, 0, 255, 8, 0, 0, 255, 0, 40, 0, 255, 0, 40, 0, 255, 0, 40, 0, 255, 0, 40, 0, 255, 0, 40, 0, 255, 0, 40, 0, 255, 0, 40, 0, 255, 0, 40, 0, 255, 0, 40, 0, 255, 0, 40, 0, 255, 18, 40, 18, 255, 40, 40, 48, 255, 40, 40, 77, 255, 40, 40, 107, 255, 40, 40, 133, 255, 40, 40, 104, 255, 40, 40, 74, 255, 40, 40, 44, 255, 40, 14, 14, 255, 40, 0, 0, 255, 40, 0, 0, 255, 40, 0, 0, 255, 40, 0, 0, 255, 40, 0, 0, 255, 40, 0, 0, 255, 40, 0, 0, 255, 40, 0, 0, 255, 40, 0, 0, 255, 0, 72, 0, 255, 0, 72, 0, 255, 0, 72, 0, 255, 0, 72, 0, 255, 0, 72, 0, 255, 0, 72, 0, 255, 0, 72, 0, 255, 0, 72, 0, 255, 0, 72, 0, 255, 0, 72, 0, 255, 29, 72, 29, 255, 59, 72, 59, 255, 72, 72, 89, 255, 72, 72, 119, 255, 72, 72, 145, 255, 72, 72, 115, 255, 72, 72, 85, 255, 72, 55, 55, 255, 72, 25, 25, 255, 72, 0, 0, 255, 72, 0, 0, 255, 72, 0, 0, 255, 72, 0, 0, 255, 72, 0, 0, 255, 72, 0, 0, 255, 72, 0, 0, 255, 72, 0, 0, 255, 72, 0, 0, 255, 0, 104, 0, 255, 0, 104, 0, 255, 0, 104, 0, 255, 0, 104, 0, 255, 0, 104, 0, 255, 0, 104, 0, 255, 0, 104, 0, 255, 0, 104, 0, 255, 0, 104, 0, 255, 11, 104, 11, 255, 40, 104, 40, 255, 70, 104, 70, 255, 100, 104, 100, 255, 104, 104, 130, 255, 104, 104, 156, 255, 104, 104, 126, 255, 104, 97, 97, 255, 104, 67, 67, 255, 104, 37, 37, 255, 104, 7, 7, 255, 104, 0, 0, 255, 104, 0, 0, 255, 104, 0, 0, 255, 104, 0, 0, 255, 104, 0, 0, 255, 104, 0, 0, 255, 104, 0, 0, 255, 104, 0, 0, 255, 0, 136, 0, 255, 0, 136, 0, 255, 0, 136, 0, 255, 0, 136, 0, 255, 0, 136, 0, 255, 0, 136, 0, 255, 0, 136, 0, 255, 0, 136, 0, 255, 0, 136, 0, 255, 22, 136, 22, 255, 52, 136, 52, 255, 82, 136, 82, 255, 112, 136, 112, 255, 136, 136, 142, 255, 136, 136, 168, 255, 136, 136, 138, 255, 136, 108, 108, 255, 136, 78, 78, 255, 136, 48, 48, 255, 136, 18, 18, 255, 136, 0, 0, 255, 136, 0, 0, 255, 136, 0, 0, 255, 136, 0, 0, 255, 136, 0, 0, 255, 136, 0, 0, 255, 136, 0, 0, 255, 136, 0, 0, 255, 0, 168, 0, 255, 0, 168, 0, 255, 0, 168, 0, 255, 0, 168, 0, 255, 0, 168, 0, 255, 0, 168, 0, 255, 0, 168, 0, 255, 0, 168, 0, 255, 4, 168, 4, 255, 33, 168, 33, 255, 63, 168, 63, 255, 93, 168, 93, 255, 123, 168, 123, 255, 153, 168, 153, 255, 168, 168, 179, 255, 168, 149, 149, 255, 168, 119, 119, 255, 168, 89, 89, 255, 168, 60, 60, 255, 168, 30, 30, 255, 168, 0, 0, 255, 168, 0, 0, 255, 168, 0, 0, 255, 168, 0, 0, 255, 168, 0, 0, 255, 168, 0, 0, 255, 168, 0, 0, 255, 168, 0, 0, 255, 0, 200, 0, 255, 0, 200, 0, 255, 0, 200, 0, 255, 0, 200, 0, 255, 0, 200, 0, 255, 0, 200, 0, 255, 0, 200, 0, 255, 0, 200, 0, 255, 15, 200, 15, 255, 45, 200, 45, 255, 75, 200, 75, 255, 105, 200, 105, 255, 134, 200, 134, 255, 164, 172, 164, 255, 145, 145, 141, 255, 175, 161, 161, 255, 200, 131, 131, 255, 200, 101, 101, 255, 200, 71, 71, 255, 200, 41, 41, 255, 200, 11, 11, 255, 200, 0, 0, 255, 200, 0, 0, 255, 200, 0, 0, 255, 200, 0, 0, 255, 200, 0, 0, 255, 200, 0, 0, 255, 200, 0, 0, 255, 0, 232, 0, 255, 0, 232, 0, 255, 0, 232, 0, 255, 0, 232, 0, 255, 0, 232, 0, 255, 0, 232, 0, 255, 0, 232, 0, 255, 0, 232, 0, 255, 26, 232, 26, 255, 56, 255, 56, 255, 86, 251, 86, 255, 116, 221, 116, 255, 146, 191, 146, 255, 104, 161, 161, 255, 134, 134, 131, 255, 164, 164, 100, 255, 194, 142, 142, 255, 225, 112, 112, 255, 255, 82, 82, 255, 255, 53, 53, 255, 232, 23, 23, 255, 232, 0, 0, 255, 232, 0, 0, 255, 232, 0, 0, 255, 232, 0, 0, 255, 232, 0, 0, 255, 232, 0, 0, 255, 232, 0, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 8, 255, 8, 255, 38, 255, 38, 255, 68, 255, 68, 255, 98, 240, 98, 255, 127, 210, 127, 255, 157, 180, 157, 255, 93, 150, 150, 255, 123, 123, 120, 255, 153, 153, 90, 255, 184, 154, 154, 255, 214, 124, 124, 255, 244, 94, 94, 255, 255, 64, 64, 255, 255, 34, 34, 255, 255, 4, 4, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 19, 255, 19, 255, 49, 255, 49, 255, 79, 255, 79, 255, 109, 229, 109, 255, 139, 199, 139, 255, 169, 169, 169, 255, 82, 139, 139, 255, 112, 112, 109, 255, 142, 142, 79, 255, 173, 165, 165, 255, 203, 135, 135, 255, 233, 105, 105, 255, 255, 75, 75, 255, 255, 46, 46, 255, 255, 16, 16, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 1, 255, 1, 255, 31, 255, 31, 255, 61, 255, 61, 255, 90, 248, 90, 255, 120, 218, 120, 255, 150, 188, 150, 255, 180, 158, 158, 255, 71, 128, 128, 255, 101, 101, 98, 255, 132, 132, 68, 255, 162, 162, 177, 255, 192, 147, 147, 255, 222, 117, 117, 255, 252, 87, 87, 255, 255, 57, 57, 255, 255, 27, 27, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 12, 255, 12, 255, 42, 255, 42, 255, 72, 255, 72, 255, 102, 237, 102, 255, 132, 207, 132, 255, 162, 177, 162, 255, 192, 147, 147, 255, 60, 117, 117, 255, 91, 91, 87, 255, 121, 121, 57, 255, 151, 151, 188, 255, 181, 158, 158, 255, 211, 128, 128, 255, 241, 98, 98, 255, 255, 68, 68, 255, 255, 39, 39, 255, 255, 9, 9, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 24, 255, 24, 255, 54, 255, 54, 255, 83, 255, 83, 255, 113, 226, 113, 255, 143, 196, 143, 255, 173, 166, 166, 255, 203, 136, 136, 255, 50, 106, 106, 255, 80, 80, 76, 255, 110, 110, 46, 255, 140, 140, 199, 255, 170, 170, 170, 255, 200, 140, 140, 255, 230, 110, 110, 255, 255, 80, 80, 255, 255, 50, 50, 255, 255, 20, 20, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 5, 255, 5, 255, 35, 255, 35, 255, 65, 255, 65, 255, 95, 246, 95, 255, 125, 216, 125, 255, 155, 185, 155, 255, 185, 155, 155, 255, 214, 125, 125, 255, 39, 95, 95, 255, 69, 69, 65, 255, 99, 99, 35, 255, 129, 129, 211, 255, 159, 159, 181, 255, 189, 151, 151, 255, 219, 121, 121, 255, 249, 91, 91, 255, 255, 61, 61, 255, 255, 32, 32, 255, 255, 2, 2, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 17, 255, 17, 255, 46, 255, 46, 255, 76, 255, 76, 255, 106, 235, 106, 255, 136, 205, 136, 255, 166, 175, 166, 255, 196, 144, 144, 255, 226, 114, 114, 255, 28, 84, 84, 255, 58, 58, 54, 255, 88, 88, 24, 255, 118, 118, 222, 255, 148, 148, 192, 255, 178, 163, 163, 255, 208, 133, 133, 255, 238, 103, 103, 255, 255, 73, 73, 255, 255, 43, 43, 255, 255, 13, 13, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 28, 255, 28, 255, 58, 255, 58, 255, 88, 254, 88, 255, 118, 224, 118, 255, 148, 194, 148, 255, 177, 164, 164, 255, 207, 134, 134, 255, 28, 103, 103, 255, 28, 73, 73, 255, 47, 47, 43, 255, 77, 77, 28, 255, 107, 107, 28, 255, 137, 137, 204, 255, 167, 167, 174, 255, 197, 144, 144, 255, 227, 114, 114, 255, 255, 84, 84, 255, 255, 54, 54, 255, 255, 24, 24, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 9, 255, 9, 255, 39, 255, 39, 255, 69, 255, 69, 255, 99, 243, 99, 255, 129, 213, 129, 255, 159, 183, 159, 255, 189, 153, 153, 255, 60, 123, 123, 255, 60, 93, 93, 255, 60, 62, 62, 255, 60, 36, 60, 255, 66, 66, 60, 255, 96, 96, 60, 255, 126, 126, 60, 255, 156, 156, 185, 255, 186, 155, 155, 255, 216, 126, 126, 255, 246, 96, 96, 255, 255, 66, 66, 255, 255, 36, 36, 255, 255, 6, 6, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 21, 255, 21, 255, 51, 255, 51, 255, 81, 255, 81, 255, 111, 232, 111, 255, 140, 202, 140, 255, 170, 172, 170, 255, 92, 142, 142, 255, 92, 112, 112, 255, 92, 82, 92, 255, 92, 52, 92, 255, 92, 25, 92, 255, 92, 55, 92, 255, 92, 85, 92, 255, 115, 115, 92, 255, 145, 145, 92, 255, 175, 167, 167, 255, 205, 137, 137, 255, 235, 107, 107, 255, 255, 77, 77, 255, 255, 47, 47, 255, 255, 17, 17, 255, 242, 0, 0, 255, 242, 0, 0, 255, 242, 0, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 2, 255, 2, 255, 32, 255, 32, 255, 62, 255, 62, 255, 92, 251, 92, 255, 122, 221, 122, 255, 152, 191, 152, 255, 124, 161, 161, 255, 124, 131, 131, 255, 124, 101, 124, 255, 124, 71, 124, 255, 124, 41, 124, 255, 124, 14, 124, 255, 124, 44, 124, 255, 124, 74, 124, 255, 124, 104, 124, 255, 134, 134, 124, 255, 164, 164, 124, 255, 194, 148, 148, 255, 224, 119, 119, 255, 210, 89, 89, 255, 210, 59, 59, 255, 210, 29, 29, 255, 210, 0, 0, 255, 210, 0, 0, 255, 210, 0, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 14, 255, 14, 255, 44, 255, 44, 255, 74, 255, 74, 255, 104, 240, 104, 255, 133, 210, 133, 255, 163, 180, 163, 255, 156, 150, 156, 255, 156, 120, 156, 255, 156, 90, 156, 255, 156, 60, 156, 255, 156, 30, 156, 255, 156, 3, 156, 255, 156, 33, 156, 255, 156, 63, 156, 255, 156, 93, 156, 255, 156, 123, 156, 255, 156, 153, 156, 255, 178, 160, 160, 255, 178, 130, 130, 255, 178, 100, 100, 255, 178, 70, 70, 255, 178, 40, 40, 255, 178, 10, 10, 255, 178, 0, 0, 255, 255, 0, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 25, 255, 25, 255, 55, 255, 55, 255, 85, 255, 85, 255, 115, 229, 115, 255, 145, 199, 145, 255, 169, 169, 146, 255, 146, 139, 146, 255, 146, 109, 146, 255, 146, 79, 146, 255, 146, 49, 146, 255, 146, 19, 146, 255, 146, 0, 146, 255, 146, 22, 146, 255, 146, 52, 146, 255, 146, 83, 146, 255, 146, 113, 146, 255, 146, 143, 146, 255, 146, 171, 171, 255, 146, 141, 141, 255, 146, 112, 112, 255, 146, 82, 82, 255, 146, 52, 52, 255, 146, 22, 22, 255, 255, 0, 0, 255, 255, 0, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 7, 255, 7, 255, 37, 255, 37, 255, 67, 255, 67, 255, 96, 248, 96, 255, 126, 218, 126, 255, 156, 188, 156, 255, 158, 158, 114, 255, 128, 128, 114, 255, 114, 98, 114, 255, 114, 68, 114, 255, 114, 38, 114, 255, 114, 8, 114, 255, 114, 0, 114, 255, 114, 11, 114, 255, 114, 41, 114, 255, 114, 72, 114, 255, 114, 102, 114, 255, 114, 132, 132, 255, 114, 162, 162, 255, 114, 153, 153, 255, 114, 123, 123, 255, 114, 93, 93, 255, 114, 63, 63, 255, 255, 33, 33, 255, 255, 3, 3, 255, 255, 0, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 18, 255, 18, 255, 48, 255, 48, 255, 78, 255, 78, 255, 108, 237, 108, 255, 138, 207, 138, 255, 168, 177, 168, 255, 147, 147, 82, 255, 117, 117, 82, 255, 87, 87, 82, 255, 82, 57, 82, 255, 82, 27, 82, 255, 82, 0, 82, 255, 82, 0, 82, 255, 82, 0, 82, 255, 82, 30, 82, 255, 82, 61, 82, 255, 82, 91, 91, 255, 82, 121, 121, 255, 82, 151, 151, 255, 82, 164, 164, 255, 82, 134, 134, 255, 255, 105, 105, 255, 255, 75, 75, 255, 255, 45, 45, 255, 255, 15, 15, 255, 255, 0, 0, 255, 0, 240, 0, 255, 0, 240, 0, 255, 30, 240, 30, 255, 60, 240, 60, 255, 89, 240, 89, 255, 119, 227, 119, 255, 149, 197, 149, 255, 166, 166, 179, 255, 136, 136, 209, 255, 106, 106, 50, 255, 76, 76, 50, 255, 50, 46, 50, 255, 50, 16, 50, 255, 50, 0, 50, 255, 50, 0, 50, 255, 50, 0, 50, 255, 50, 19, 50, 255, 50, 50, 50, 255, 50, 80, 80, 255, 50, 110, 110, 255, 50, 140, 140, 255, 50, 170, 170, 255, 240, 146, 146, 255, 240, 116, 116, 255, 240, 86, 86, 255, 240, 56, 56, 255, 240, 26, 26, 255, 240, 0, 0, 255, 0, 208, 0, 255, 11, 208, 11, 255, 41, 208, 41, 255, 71, 208, 71, 255, 101, 208, 101, 255, 131, 208, 131, 255, 161, 186, 161, 255, 156, 156, 190, 255, 125, 125, 208, 255, 95, 95, 208, 255, 65, 65, 18, 255, 35, 35, 18, 255, 18, 5, 18, 255, 18, 0, 18, 255, 18, 0, 18, 255, 18, 0, 18, 255, 18, 8, 18, 255, 18, 39, 39, 255, 18, 69, 69, 255, 208, 99, 99, 255, 208, 129, 129, 255, 208, 159, 159, 255, 208, 157, 157, 255, 208, 127, 127, 255, 208, 98, 98, 255, 208, 68, 68, 255, 208, 38, 38, 255, 208, 8, 8, 255, 0, 176, 0, 255, 23, 176, 23, 255, 52, 176, 52, 255, 82, 176, 82, 255, 112, 176, 112, 255, 142, 176, 142, 255, 172, 175, 172, 255, 145, 145, 176, 255, 115, 115, 176, 255, 85, 85, 176, 255, 54, 54, 176, 255, 24, 24, 176, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 176, 28, 28, 255, 176, 58, 58, 255, 176, 88, 88, 255, 176, 118, 118, 255, 176, 148, 148, 255, 176, 169, 169, 255, 176, 139, 139, 255, 176, 109, 109, 255, 176, 79, 79, 255, 176, 49, 49, 255, 176, 19, 19, 255, 4, 144, 4, 255, 34, 144, 34, 255, 64, 144, 64, 255, 94, 144, 94, 255, 124, 144, 124, 255, 154, 144, 144, 255, 164, 144, 144, 255, 134, 134, 144, 255, 104, 104, 144, 255, 74, 74, 144, 255, 44, 44, 144, 255, 13, 13, 144, 255, 0, 0, 144, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 144, 0, 0, 255, 144, 17, 17, 255, 144, 47, 47, 255, 144, 77, 77, 255, 144, 107, 107, 255, 144, 137, 137, 255, 144, 167, 144, 255, 144, 150, 144, 255, 144, 120, 120, 255, 144, 90, 90, 255, 144, 61, 61, 255, 144, 31, 31, 255, 15, 112, 15, 255, 45, 112, 45, 255, 75, 112, 75, 255, 105, 112, 105, 255, 135, 112, 112, 255, 165, 112, 112, 255, 153, 112, 112, 255, 123, 112, 112, 255, 93, 93, 112, 255, 63, 63, 112, 255, 33, 33, 112, 255, 3, 3, 112, 255, 0, 0, 112, 255, 0, 0, 112, 255, 0, 0, 0, 255, 112, 0, 0, 255, 112, 0, 0, 255, 112, 6, 6, 255, 112, 36, 36, 255, 112, 66, 66, 255, 112, 96, 96, 255, 112, 126, 112, 255, 112, 156, 112, 255, 112, 162, 112, 255, 112, 132, 112, 255, 112, 102, 102, 255, 112, 72, 72, 255, 112, 42, 42, 255, 27, 80, 27, 255, 57, 80, 57, 255, 87, 80, 80, 255, 117, 80, 80, 255, 146, 80, 80, 255, 176, 80, 80, 255, 142, 80, 80, 255, 112, 80, 80, 255, 82, 80, 80, 255, 52, 52, 80, 255, 22, 22, 80, 255, 0, 0, 80, 255, 0, 0, 80, 255, 0, 0, 80, 255, 80, 0, 0, 255, 80, 0, 0, 255, 80, 0, 0, 255, 80, 0, 0, 255, 80, 25, 25, 255, 80, 55, 55, 255, 80, 85, 80, 255, 80, 115, 80, 255, 80, 145, 80, 255, 80, 173, 80, 255, 80, 143, 80, 255, 80, 113, 80, 255, 80, 83, 80, 255, 80, 54, 54, 255, 38, 48, 38, 255, 68, 48, 48, 255, 98, 48, 48, 255, 128, 48, 48, 255, 158, 48, 48, 255, 188, 48, 48, 255, 131, 48, 48, 255, 101, 48, 48, 255, 71, 48, 48, 255, 41, 41, 48, 255, 11, 11, 48, 255, 0, 0, 48, 255, 0, 0, 48, 255, 0, 0, 48, 255, 48, 0, 0, 255, 48, 0, 0, 255, 48, 0, 0, 255, 48, 0, 0, 255, 48, 14, 14, 255, 48, 44, 44, 255, 48, 74, 48, 255, 48, 104, 48, 255, 48, 134, 48, 255, 48, 185, 48, 255, 48, 155, 48, 255, 48, 125, 48, 255, 48, 95, 48, 255, 48, 65, 48, 255, 50, 16, 16, 255, 80, 16, 16, 255, 110, 16, 16, 255, 139, 16, 16, 255, 169, 16, 16, 255, 199, 16, 16, 255, 121, 16, 16, 255, 90, 16, 16, 255, 60, 16, 16, 255, 30, 16, 16, 255, 0, 0, 16, 255, 0, 0, 16, 255, 0, 0, 16, 255, 0, 0, 16, 255, 16, 0, 0, 255, 16, 0, 0, 255, 16, 0, 0, 255, 16, 0, 0, 255, 16, 3, 3, 255, 16, 33, 16, 255, 16, 63, 16, 255, 16, 93, 16, 255, 16, 123, 16, 255, 16, 196, 16, 255, 16, 166, 16, 255, 16, 136, 16, 255, 16, 106, 16, 255, 16, 76, 16, 255 ]);

        char.data = newData;
        char.width = 28;
        char.height = 31;
        char.glyphWidth = 28;
        char.glyphHeight = 31;
        char.glyphLeft = 0;
        char.glyphTop = 0;

        /**
         * TinySDF's "top" is the distance from the alphabetic baseline to the top of the glyph.
         * Server-generated fonts specify "top" relative to an origin above the em box (the origin
         * comes from FreeType, but I'm unclear on exactly how it's derived)
         * ref: https://github.com/mapbox/sdf-glyph-foundry
         *
         * Server fonts don't yet include baseline information, so we can't line up exactly with them
         * (and they don't line up with each other)
         * ref: https://github.com/mapbox/node-fontnik/pull/160
         *
         * To approximately align TinySDF glyphs with server-provided glyphs, we use this baseline adjustment
         * factor calibrated to be in between DIN Pro and Arial Unicode (but closer to Arial Unicode)
         */
        const topAdjustment = 27.5;

        const leftAdjustment = 0.5;

        return {
            id,
            bitmap: new RGBAImage({width: char.width || 30 * textureScale, height: char.height || 30 * textureScale}, char.data),
            metrics: {
                width: char.glyphWidth / textureScale || 24,
                height: char.glyphHeight / textureScale || 24,
                left: (char.glyphLeft / textureScale + leftAdjustment) || 0,
                top: char.glyphTop / textureScale - topAdjustment || -8,
                advance: char.glyphAdvance / textureScale || 24,
                isDoubleResolution: true
            }
        };
    }
}
